1.控制台权限设置
	1.1.D:\dev\apache-activemq-5.15.0\conf\jetty.xml
		<bean id="securityConstraint" class="org.eclipse.jetty.util.security.Constraint">
	        <property name="name" value="BASIC" />
	        <property name="roles" value="user,admin" />
	        <!-- set authenticate=false to disable login -->
	        <!-- true:需要校验-->
	        <property name="authenticate" value="false" />
	    </bean>
	1.2.D:\dev\apache-activemq-5.15.0\conf\jetty-realm.properties
		账户密码设置
		# username: password [,rolename ...]rolename---------[admin|user|guest]
		admin: admin123, admin
		r_admin_user: r_admin_passwd, admin

2.JMS
	2.1.简单
		2.1.1./Users/renho/software/apache-activemq-5.15.0/conf/activemq.xml
			broker节点中增加
			<plugins>    
	            <simpleAuthenticationPlugin>    
	                <users>    
	                    <authenticationUser username="system" password="${activemq.password}" groups="users,admins"/>    
	                    <authenticationUser username="user" password="${guest.password}" groups="users"/>    
	                    <authenticationUser username="guest" password="${guest.password}" groups="guests"/>    
	                </users>    
	            </simpleAuthenticationPlugin>    
	        </plugins>
	        占位引用可在conf/credential.properties中配置
		控制台查询brows MQ信息时通过credential.properties获取密码？
	2.2.JAAS身份验证
		2.2.1./Users/renho/software/apache-activemq-5.15.0/conf/activemq.xml
			broker节点中增加
			<plugins>    
			    <!--use JAAS to authenticate using the login.config file on the classpath to configure JAAS -->    
			    <jaasAuthenticationPlugin configuration="activemq-domain" />    
			    <!--  lets configure a destination based authorization mechanism -->    
			    <authorizationPlugin>    
			        <map>    
			            <authorizationMap>    
			                <authorizationEntries>
				                <!-->表示通配符,例如USERS.>表示以USERS.开头的主题,>表示所有主题,read表示读的权限,write表示写的权限，admin表示角色组-->    
				                <authorizationEntry queue=">" read="r_admin_role,admins" write="r_admin_role,admins" admin="r_admin_role,admins" />    
	                            <authorizationEntry topic=">" read="r_admin_role,admins" write="r_admin_role,admins" admin="r_admin_role,admins" />    
	                            <authorizationEntry queue="ActiveMQ.Advisory.>" read="r_read_role,r_write_role,r_admin_role" write="r_read_role,r_write_role,r_admin_role" admin="r_read_role,r_write_role,r_admin_role" />  
	                            <authorizationEntry topic="ActiveMQ.Advisory.>" read="r_read_role,r_write_role,r_admin_role" write="r_read_role,r_write_role,r_admin_role" admin="r_read_role,r_write_role,r_admin_role" />
	                            <authorizationEntry queue="renho.demo.>" read="r_read_role" write="r_write_role" admin="r_admin_role" />    
			                </authorizationEntries>    
			            </authorizationMap>    
			        </map>    
			    </authorizationPlugin>    
			</plugins>
			在配置中 ">" 代表所有的意思. 而 "ActiveMQ.Advisory.>" 则代表.名为 "ActiveMQ.Advisory."下的所有.

			login.config 内容如下：
			activemq-domain {  
                org.apache.activemq.jaas.PropertiesLoginModule required  
                debug=true  
                org.apache.activemq.jaas.properties.user="users.properties"  
                org.apache.activemq.jaas.properties.group="groups.properties";  
            };  



			groups.properties  内容如下：
			#group=userName  
			admins=system
			r_admin_role=r_admin_user
			r_read_role=r_read_user
			r_write_role=r_write_user

			users.properties  内容如下：
			#userName=password  
			system=manager  
			r_admin_user=r_admin_passwd
			r_read_user=r_read_passwd
			r_write_user=r_write_passwd