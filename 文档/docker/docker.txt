1.docker远程
	vi /usr/lib/systemd/system/docker.service
	ExecStart中增加-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock

2.创建
	docker run -p 8761:8761 -t renho/spring-cloud-demo-eureka-server-docker
	docker run -p 8763:8763 -t renho/spring-cloud-demo-eureka-service-hi-docker
3.开始
4.停止
	docker stop 20ca048468f4
5.查看镜像
	docker images
6.删除
	docker ps -a | grep "Exited" | awk '{print $1 }'|xargs docker stop
	docker ps -a | grep "Exited" | awk '{print $1 }'|xargs docker rm
	docker images|grep none|awk '{print $3 }'|xargs docker rmi

	docker rmi $(docker images -f "dangling=true" -q)
7.新建网络
	docker network create --subnet=172.22.0.0/16 renho

8.docker nginx
	docker cp 19b951:/etc/nginx/ /home/pi/docker-nginx
	docker run \
	-p 18800:80 \
	--name nginx154 \
	-v /home/pi/docker-nginx/logs:/var/log/nginx \
	-v /home/pi/docker-nginx:/etc/nginx \
	--network renho --ip 172.22.0.100 \
	--restart=unless-stopped \
	-d nginx


 netstat -anp|grep 2375
 curl 127.0.0.1:2375/info

docker run --privileged=true -v /home/docker/sso:/usr/local/tomcat/webapps -p 8080:8080 tomcat:8
docker run --privileged=true -v /root/software/test/:/opt/tomcat/webapps/test -p 8081:8080 --name aaaaa renho/test:v1.0 /root/run.sh
docker export 9d > my.tar
cat my.tar | sudo docker import - renho/test:v1.0
docker exec -it 0f8586201c5e /bin/bash
docker run -i -t centos7_jdk8 /bin/bash

docker run -d -p 9000:9000 portainer/portainer -H tcp://192.168.111.130:2375

1.Dockerfile创建镜像
编辑Dockerfile文件
下载jdk放同目录
2.docker build --force-rm --rm -t centos7_jdk8 .
3.启动并连接
docker run -i -t centos7_jdk8 /bin/bash

docker run --privileged=true --name renho -v /home/docker/app/test.jar:/usr/local/app/test.jar -p 9090:9090 -it centos7_jdk8 /bin/bash
docker run --privileged=true --name renho -v /home/docker/app/test.jar:/usr/local/app/test.jar -p 9090:9090 -itd centos7_jdk8 java -jar /usr/local/test.jar
docker run --privileged=true --name service-test -v /home/docker/service-test.jar:/usr/local/app/service-test.jar -p 9090:9090 -itd centos7_jdk8 java -jar /usr/local/app/service-test.jar

docker logs -f cid

树莓派

/lib/systemd/system/docker.service

1.
	# 下载官方提供的安装脚本
	curl -fsSL get.docker.com -o get-docker.sh
	# 下载的脚本已经有定义阿里云镜像加速地址，这里加参数使用
	sudo sh get-docker.sh --mirror Aliyun
	# 使pi账号也可以使用docker（否则说权限不够，只能前面加sudo），注意要重启才生效
	sudo usermod -aG docker pi
	# 设置开机启动docker
	sudo systemctl enable docker
	# 下载docker-compose，官网是建议使用python的pip安装
	sudo pip install docker-compose
	sudo usermod -aG docker 
2.
curl -sSL https://get.docker.com | sh
wget https://curl.haxx.se/ca/cacert-2018-03-07.pem
cacert-2018-03-07.pem
curl -fsSL --cacert ./cacert-2018-03-07.pem get.docker.com | sh
curl -sSL https://get.docker.com | sh
ll
wget https://get.docker.com/
mkdie docker
mkdir docker
cd docker/
ll
vi install.sh
chmod 755 install.sh 
./install.sh 
sudo usermod -aG docker $USER
docker info
sudo usermod -aG docker $USER
sudo usermod -aG docker pi
docker info
exit
docker info
docker pull registry.docker-cn.com/portainer/portainer:linux-arm-1.14.0
mkdir -p ~/portaniner/data
docker run -d --name portainer --network renho --ip 172.22.0.110 --restart unless-stopped -p 9000:9000 -v ~/portaniner/data:/data -v /var/run/docker.sock:/var/run/docker.sock registry.docker-cn.com/portainer/portainer:linux-arm-1.14.0


systemctl enable docker
systemctl disable docker
systemctl start docker
systemctl stop docker
systemctl daemon-reload
sudo systemctl enable docker


docker run --privileged=true --name service-test -v /home/docker/service-test.jar:/usr/local/app/service-test.jar -p 9090:9090 -itd centos7_jdk8 'java -jar /usr/local/app/service-test.jar >> /usr/local/service-test.log'

docker run --detach \
    --hostname ipipipipipipipipi \
    --publish 10443:443 --publish 10080:80 --publish 10022:22 \
    --name gitlab \
    --restart always \
    --volume /srv/gitlab/config:/etc/gitlab \
    --volume /srv/gitlab/logs:/var/log/gitlab \
    --volume /srv/gitlab/data:/var/opt/gitlab \
    gitlab/gitlab-ce:latest

Docker Compose
pip install docker-compose

docker-compose.yml
wordpress:
  image: wordpress
  links:
    - db
  ports:
    - 8080:80
db:
  image: mariadb
  environment:
    MYSQL_ROOT_PASSWORD: example

docker-compose up
docker-compose start
docker-compose stop
docker-compose down