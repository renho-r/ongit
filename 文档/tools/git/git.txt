1.创建版本库
	1.1创建空目录
		$cd e:
		$cd renho
		$cd workspace
		$mkdir testongit
	1.2把目录变成git可管理的仓库
		$pwd
			--/e/renho/workspace/testongit
		$git init
			--Initialized empty Git repository in e:/renho/workspace/testongit/.git/
2.把文件添加到版本库
	例.readme.txt文件
	2.1把文件添加到仓库
		$git add readme.txt
	2.2把文件提交到仓库
		$git commit -m "commit注释"
3.查看版本库
	例.readme.txt文件修改后
	3.1查看版本库当前状态
		$git status
	3.2查看文件不同
		$git diff readme.txt
		$git diff HEAD -- readme.txt
	3.3查看日志,可查看版本号
		$git log
		$git log --pretty=oneline
	3.4查看命令记录
		$git reflog
	3.5再次提交
		$git add readme.txt
		$git commit -m "再次提交"
4.版本回退
	例.readme.txt
	4.1回退到上一版本
		$git reset --hard HEAD^
		--HEAD代表当前版本,上一版本HEAD^,上上版本HEAD^^,往上100个版本写成HEAD~100
	4.2到下一版本
		$git reset --hard 3628164
		--3628164为版本号前几位
5.撤销修改
	例.readme.txt
	5.1丢弃工作区修改
		$git checkout -- readme.txt
		--一种是readme.txt自修改后还没有被放到暂存区,现在,撤销修改就回到和版本库一模一样的状态.
		--一种是readme.txt已经添加到暂存区后,又作了修改,现在,撤销修改就回到添加到暂存区后的状态.
		--总之,就是让这个文件回到最近一次git commit或git add时的状态.
		--git checkout其实是用版本库里的版本替换工作区的版本
	5.2丢弃暂存区
		$git reset HEAD readme.txt
6.删除文件
	例.test.txt
	6.1文件系统中删除
		$rm test.txt
	6.2git中删除后提交
		$git rm test.txt
		$git commit -m "remove test.txt"
	6.3误删的文件恢复到最新版本
		$git checkout -- test.txt
7.远程仓库
	7.1创建SSH Key
		$pwd
			--/c/Users/renho
		$ssh-keygen -t rsa -C "youremail@example.com"
			--$ssh-keygen -t rsa -C "rho_i_xx@163.com"
8.在GitHub新建完仓库,把本地仓库推送到GitHub并同步
		8.1关联版本库
			$git remote add originongit git@github.com:renho-r/ongit.git
			--远程库的名字originongit\
		8.2本地库的所有内容推送到远程库上
			$git push -u originongit master
			--实际上是把当前分支master推送到远程
			-- -u参数,Git不但会把本地的master分支内容推送的远程新的master分支,
			--还会把本地的master分支和远程的master分支关联起来,在以后的推送或者拉取时就可以简化命令
			--从现在起，只要本地作了提交，就可以通过命令：git push originongit master
9.从远程库克隆
		9.1GitHub新建库ongitnew
		9.2从远程库克隆
			$git clone git@github.com:renho-r/ongitnew.git
10.创建与合并分支
	10.1创建dev分支,然后切换到dev分支
		$git checkout -b dev
			-- -b参数表示创建并切换
			--相当于
			--$git branch dev
			--$git checkout dev
	10.2命令查看当前分支
		$git branch
	10.3切换回master分支
		$git checkout master
	10.4把dev分支的工作成果合并到master分支上,master分支下
		$git merge dev
		--合并某分支到当前分支
		--git merge <name>
	10.5删除dev分支
		$git branch -d dev
11.解决分支冲突
	例.分支fearure1、readme.txt
	11.1合并分支
		$git merge feature1
		--提示冲突
	11.2查看readme.txt
		--Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容
	11.3手动修改再次提交
		$git commit -m "merge & fix readme.txt"
	11.4分支的合并情况
		$git log --graph --pretty=oneline --abbrev-commit
12.分支管理策略
	12.1合并dev分支，请注意--no-ff参数，表示禁用Fast forward
		$git merge --no-ff -m "merge with no-ff" dev
	12.2分支策略
		--master分支应该是非常稳定的,也就是仅用来发布新版本,平时不能在上面干活
		--干活都在dev分支上,也就是说,dev分支是不稳定的
		--每个人都有自己的分支,往dev分支上合并
13.bug分支,工作只进行到一半,没法提交时修改bug
	13.1Git还提供了一个stash功能,可以把当前工作现场“储藏”起来,等以后恢复现场后继续工作
		$git stash
	13.2从需要修改的分支上创建临时分支
		$git checkout master
	13.3合并分支
	13.4回到dev分支
		$git checkout dev
	13.5查看之前保存的工作现场
		$git stash list
	13.6恢复
		$git stash pop
		--一是用git stash apply恢复,但是恢复后,stash内容并不删除,你需要用git stash drop来删除
14.多人协作
	例.是从远程库克隆
	14.1查看远程库的信息
		$git remote或$git remote -v
	14.2推送分支
		$git push ongitnew master
			--如果要推送其他分支,比如dev,就改成：git push ongitnew dev
	14.3从远程库克隆
		$git clone git@github.com:renho-r/ongitnew.git
	14.4创建远程ongitnew的dev分支到本地
		$git checkout -b dev ongitnew/dev
		多人协作的工作模式通常是这样：
		首先，可以试图用git push ongitnew branch-name推送自己的修改；
		如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
		如果合并有冲突，则解决冲突，并在本地提交；
		没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
		如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name ongitnew/branch-name。
		这就是多人协作的工作模式，一旦熟悉了，就非常简单。
15.忽略特殊文件
	15.1Git工作区的根目录下创建一个特殊的.gitignore文件,然后把要忽略的文件名填进去,Git就会自动忽略这些文件
			所有配置文件可以直接在线浏览：https://github.com/github/gitignore
16.标签
	16.1打一个新标签
		$git tag <name>
	16.2查看所有标签
		$git tag
		$git show v0.9
	16.3打一个新标签在commit id上
		$git log --pretty=oneline --abbrev-commit
		$git tag v0.9 <commit id>
	16.4删除标签
		$git tag -d v0.1
	16.5推送某个标签到远程
		$git push ongitnew <tagname>
		--推送所有$git push origin --tags
	16.6删除远程标签
		16.6.1先删除本地
			$git tag -d v0.9
		16.6.2删除远程
			$git push ongitnew :refs/tags/v0.9