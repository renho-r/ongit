<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="keywords" content="脚本百事通,web开发,电脑,编程,IT,程序员,网页设计,技术,计算机,数据库">
<meta name="description" content="脚本百事通关注IT行业发展和IT开发技术，为大家提供vbscript,正则表达式,jquery,dos,bat,批处理,javascript,Photoshop,HTML,div+css,ASP,PHP,ASP.NET,java,mysql,程序设计,服务器,linux等等">
<title>Spring：源码解读Spring IOC原理</title>
<link href="Spring%EF%BC%9A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BBSpring%20IOC%E5%8E%9F%E7%90%86_files/mb.css" rel="stylesheet">
<script charset="utf-8" src="Spring%EF%BC%9A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BBSpring%20IOC%E5%8E%9F%E7%90%86_files/js"></script><style type="text/css" id="bdcsfff">#bdcs-rec{display:none;}.bdcs-container .bdcs-main,.bdcs-container .bdcs-main *{box-sizing:content-box;margin:0;padding:0;float:none;clear:none;overflow:hidden;white-space:nowrap;word-wrap:normal;border:0;background:0 0;width:auto;height:auto;max-width:none;min-width:none;max-height:none;min-height:none;border-radius:0;box-shadow:none;transition:none;text-align:left}.bdcs-container .bdcs-clearfix:after{content:'';display:block;clear:both;height:0}.bdcs-container .bdcs-clearfix{zoom:1}.bdcs-container .bdcs-main{overflow:visible}.bdcs-container .bdcs-search{display:block;overflow:visible;position:relative;border-style:solid}.bdcs-container .bdcs-search-form-input-wrap{display:inline-block}.bdcs-container .bdcs-search-form-input{border-width:1px;border-style:solid;display:inline-block;vertical-align:top;text-indent:5px;background-color:#fff;float:left}.bdcs-container .bdcs-search-form-input:focus{border-width:1px;border-style:solid;outline:0}.bdcs-container .bdcs-search-form-submit-wrap{display:inline-block}.bdcs-container .bdcs-search-form-submit{display:inline-block;cursor:pointer;border-width:1px;border-style:solid;vertical-align:top;text-align:center;width:50px;//_overflow:hidden}.bdcs-container .bdcs-search-form-submit-magnifier{width:45px;padding:0;text-indent:-999em;overflow:hidden;background:url(http://znsv.baidu.com/static/customer-search/component/search/magnifier-icon.png) no-repeat center center;_background:url(http://znsv.baidu.com/static/customer-search/component/search/magnifier-icon_ie6.png) no-repeat center center}.bdcs-container .bdcs-search-form-input-wrap{}.bdcs-container .bdcs-search-form-input-notspan{margin-left:0px;font-family:Arial,SimSun,sans-serif;color:#a6a6a6;font-size:14px;}.bdcs-container .bdcs-search-form-input .icon-nofocus{left:;right:;top:;height:;width:;}.bdcs-container .bdcs-search{width:auto;height:40px;overflow:visible;border-color:#ffffff;border-radius:0px;border-width:0px;box-shadow:none;background-color:none;}.bdcs-container .bdcs-search-form-input{border-color:#a6a6a6;margin-right:10px;width:408px;height:38px;line-height:38px;font-family:Arial,SimSun,sans-serif;color:#a6a6a6;font-size:14px;border-radius:0px;background-color:#FFFFFF;}.bdcs-container .bdcs-search-form-input:focus{border-color:#f79646;}.bdcs-container .bdcs-search-form-submit-wrap{}.bdcs-container .bdcs-search-form-submit{border-color:#a6a6a6;height:38px;width:50px;background-color:#f5f5f5;color:#000000;font-family:Arial,SimSun,sans-serif;font-size:14px;border-radius:0px;}.bdcs-container .bdcs-search-sug-list{width:250px;}.bdcs-container .bdcs-search-sug-list-item{height:20px;line-height:20px;font-family:Arial,SimSun,sans-serif;font-size:14px;}.bdcs-container .bdcs-search-sug-list-item-value{color:#000000;}.bdcs-container .bdcs-hot{width:300px;height:30px;line-height:30px;}.bdcs-container .bdcs-hot-item{color:#000000;font-family:Arial,SimSun,sans-serif;font-size:14px;}.bdcs-container .bdcs-search-form-submit{*height:40px;*margin-top:1px;}.bdcs-container .bdcs-search-form-submit{height:40px;}.bdcs-container .bdcs-search-form-submit{line-height:38px;}.bdcs-container .bdcs-clearfix:after{content:'';display:block;clear:both;height:0}.bdcs-container .bdcs-clearfix{zoom:1}.bdcs-container .bdcs-search{overflow:visible;position:relative}.bdcs-container .bdcs-search-sug,.bdcs-container .bdcs-search-sug *{box-sizing:content-box;margin:0;padding:0;float:none;clear:none;overflow:hidden;white-space:nowrap;word-wrap:normal;border:0;background:0 0;width:auto;height:auto;max-width:none;min-width:none;max-height:none;min-height:none;border-radius:0;box-shadow:none;transition:none;text-align:left}.bdcs-container .bdcs-search-sug{display:none;position:absolute;z-index:2147483647}.bdcs-container .bdcs-search-sug-list{list-style:none;border:1px solid #DDD;background-color:#FFF}.bdcs-container .bdcs-search-sug-list{}.bdcs-container .bdcs-search-sug-list-item{display:block;list-style:none;cursor:pointer;padding:0 5px;white-space:nowrap;text-overflow:ellipsis;overflow:hidden}.bdcs-container .bdcs-search-sug-list-item-current{background-color:#EBEBEB}.bdcs-container .bdcs-search-sug-list-item-author-novel,.bdcs-container .bdcs-search-sug-list-item-author-music,.bdcs-container .bdcs-search-sug-list-item-type-movie{color:#BABABA}.bdcs-container .bdcs-search-sug-list-item-author-novel,.bdcs-container .bdcs-search-sug-list-item-author-music{margin-left:5px}.bdcs-container .bdcs-search-sug-list-item-music{overflow:hidden;*zoom:1}.bdcs-container .bdcs-search-sug-list-item-value-movie{float:left}.bdcs-container .bdcs-search-sug-list-item-type-movie{float:right}.bdcs-container .bdcs-search-sug-skin{display:none;width:85px;height:85px;position:absolute;right:1px;bottom:1px}.bdcs-container .bdcs-search-sug-skin-img{width:85px;height:85px}.bdcs-container .bdcs-search-sug-i{color:#e64fa3;font-weight:700;margin-left:10px;font-family:simsun;font-style:normal}.bdcs-container .bdcs-search-sug-adv{width:105px;position:absolute;right:1px;top:1px;display:none}.bdcs-container .bdcs-search-sug-adv-img{position:absolute;top:0;right:0}.bdcs-container{overflow:visible;}.bdcs-container .bdcs-search-sug-list-item{height:20px;line-height:20px;font-family:Arial,SimSun,sans-serif;font-size:14px;}.bdcs-container .bdcs-search-sug-list-item-value{color:#000000;}.bdcs-container .bdcs-clearfix:after{content:'';display:block;clear:both;height:0}.bdcs-container .bdcs-clearfix{zoom:1}.bdcs-container .bdcs-hot,.bdcs-container .bdcs-hot *{box-sizing:content-box;margin:0;padding:0;float:none;clear:none;overflow:hidden;white-space:nowrap;word-wrap:normal;border:0;background:0 0;width:auto;height:auto;max-width:none;min-width:none;max-height:none;min-height:none;border-radius:0;box-shadow:none;transition:none;text-align:left}.bdcs-container .bdcs-hot{display:block;white-space:normal}.bdcs-container .bdcs-hot-item{margin-right:10px}.bdcs-container .bdcs-hot{width:300px;height:30px;line-height:30px;}.bdcs-container .bdcs-hot-item{color:#000000;font-family:Arial,SimSun,sans-serif;font-size:14px;}</style></head>
<body><div style="position: absolute; left: -1px; bottom: -1px; z-index: 0; width: 0px; height: 0px; overflow: hidden; visibility: hidden; display: none;" id="BAIDU_DUP_fp_wrapper"><iframe style="width: 0px; height: 0px; visibility: hidden; display: none;" src="Spring%EF%BC%9A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BBSpring%20IOC%E5%8E%9F%E7%90%86_files/o.html" id="BAIDU_DUP_fp_iframe"></iframe></div>

<div id="txt">

	
	<div id="txtleft">
    <p><a href="http://www.csdn123.com/" target="_blank"><img src="Spring%EF%BC%9A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BBSpring%20IOC%E5%8E%9F%E7%90%86_files/logo.jpg" height="60" width="250"></a></p>
    <p align="center"></p><h1>Spring：源码解读Spring IOC原理</h1><p></p>
    
    	<div class="txtDetail">
        	
            
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">Spring&nbsp;IOC设计原理解析&nbsp;</span></p>
<div class="note">
<p class="p0"><span style="font-family: courier new, courier; font-size: 14px;">一、&nbsp;什么是Ioc/DI？ </span></p>
<p class="p17"><span style="font-family: courier new, courier; font-size: 14px;">二、&nbsp;Spring&nbsp;IOC体系结构 </span></p>
<p class="p16"><span style="font-family: courier new, courier; font-size: 14px;">(1)&nbsp;BeanFactory </span></p>
<p class="p16"><span style="font-family: courier new, courier; font-size: 14px;">(2)&nbsp;BeanDefinition </span></p>
<p class="p17"><span style="font-family: courier new, courier; font-size: 14px;">三、&nbsp;IoC容器的初始化 </span></p>
<p class="p16"><span style="font-family: courier new, courier; font-size: 14px;">1、&nbsp;XmlBeanFactory(屌丝IOC)的整个流程 </span></p>
<p class="p16"><span style="font-family: courier new, courier; font-size: 14px;">2、&nbsp;FileSystemXmlApplicationContext&nbsp;的IOC容器流程 </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">1、高富帅IOC解剖 </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">2、&nbsp;设置资源加载器和资源定位 </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">3、AbstractApplicationContext的refresh函数载入Bean定义过程： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">4、AbstractApplicationContext子类的refreshBeanFactory()方法： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">5、AbstractRefreshableApplicationContext子类的loadBeanDefinitions方法： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">6、AbstractBeanDefinitionReader读取Bean定义资源： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">7、资源加载器获取要读入的资源： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">8、XmlBeanDefinitionReader加载Bean定义资源： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">9、DocumentLoader将Bean定义资源转换为Document对象： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">10、XmlBeanDefinitionReader解析载入的Bean定义资源文件： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">11、DefaultBeanDefinitionDocumentReader对Bean定义的Document对象解析： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">12、BeanDefinitionParserDelegate解析Bean定义资源文件中的&lt;Bean&gt;元素： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">13、BeanDefinitionParserDelegate解析&lt;property&gt;元素： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">14、解析&lt;property&gt;元素的子元素： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">15、解析&lt;list&gt;子元素： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">16、解析过后的BeanDefinition在IoC容器中的注册： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">17、DefaultListableBeanFactory向IoC容器注册解析后的BeanDefinition： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">总结： </span></p>
<p class="p17"><span style="font-family: courier new, courier; font-size: 14px;">四、IOC容器的依赖注入 </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">1、依赖注入发生的时间 </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">2、AbstractBeanFactory通过getBean向IoC容器获取被管理的Bean： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">3、AbstractAutowireCapableBeanFactory创建Bean实例对象： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">4、createBeanInstance方法创建Bean的java实例对象： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">5、SimpleInstantiationStrategy类使用默认的无参构造方法创建Bean实例化对象： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">6、populateBean方法对Bean属性的依赖注入： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">7、BeanDefinitionValueResolver解析属性值： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">8、BeanWrapperImpl对Bean属性的依赖注入： </span></p>
<p class="p17"><span style="font-family: courier new, courier; font-size: 14px;">五、IoC容器的高级特性 </span></p>
<p class="p16"><span style="font-family: courier new, courier; font-size: 14px;">1、介绍 </span></p>
<p class="p16"><span style="font-family: courier new, courier; font-size: 14px;">2、Spring&nbsp;IoC容器的lazy-init属性实现预实例化： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">(1)&nbsp;.refresh() </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">(2).finishBeanFactoryInitialization处理预实例化Bean： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">(3)&nbsp;.DefaultListableBeanFactory对配置lazy-init属性单态Bean的预实例化： </span></p>
<p class="p16"><span style="font-family: courier new, courier; font-size: 14px;">3、FactoryBean的实现： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">(1).FactoryBean的源码如下： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">(2).&nbsp;AbstractBeanFactory的getBean方法调用FactoryBean： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">(3)、AbstractBeanFactory生产Bean实例对象： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">(4).工厂Bean的实现类getObject方法创建Bean实例对象： </span></p>
<p class="p16"><span style="font-family: courier new, courier; font-size: 14px;">4.BeanPostProcessor后置处理器的实现： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">(1).BeanPostProcessor的源码如下： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">(2).AbstractAutowireCapableBeanFactory类对容器生成的Bean添加后置处理器： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">(3).initializeBean方法为容器产生的Bean实例对象添加BeanPostProcessor后置处理器： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">(4).AdvisorAdapterRegistrationManager在Bean对象初始化后注册通知适配器： </span></p>
<p class="p16"><span style="font-family: courier new, courier; font-size: 14px;">5.Spring&nbsp;IoC容器autowiring实现原理： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">(1).&nbsp;AbstractAutoWireCapableBeanFactory对Bean实例进行属性依赖注入： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">(2).Spring&nbsp;IoC容器根据Bean名称或者类型进行autowiring自动依赖注入： </span></p>
<p class="p15"><span style="font-family: courier new, courier; font-size: 14px;">(3).DefaultSingletonBeanRegistry的registerDependentBean方法对属性注入： </span></p>
</div>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<div id="tony_body">
<h2>
一、什么是Ioc/DI？</h2>
</div>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;&nbsp;&nbsp;&nbsp;IoC&nbsp;容器：最主要是完成了完成对象的创建和依赖的管理注入等等。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">先从我们自己设计这样一个视角来考虑：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">所谓控制反转，就是把原先我们代码里面需要实现的对象创建、依赖的代码，反转给容器来帮忙实现。那么必然的我们需要创建一个容器，同时需要一种描述来让容器知道需要创建的对象与对象的关系。这个描述最具体表现就是我们可配置的文件。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">对象和对象关系怎么表示？</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">可以用&nbsp;xml&nbsp;，&nbsp;properties&nbsp;文件等语义化配置文件表示。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">描述对象关系的文件存放在哪里？</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">可能是&nbsp;classpath&nbsp;，&nbsp;filesystem&nbsp;，或者是&nbsp;URL&nbsp;网络资源，&nbsp;servletContext&nbsp;等。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">回到正题，有了配置文件，还需要对配置文件解析。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">不同的配置文件对对象的描述不一样，如标准的，自定义声明式的，如何统一？&nbsp;在内部需要有一个统一的关于对象的定义，所有外部的描述都必须转化成统一的描述定义。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">如何对不同的配置文件进行解析？需要对不同的配置文件语法，采用不同的解析器</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<div id="tony_body">
<h2>
二、&nbsp;Spring&nbsp;IOC体系结构？</h2>
</div>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">(1)&nbsp;BeanFactory</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Spring&nbsp;Bean
的创建是典型的工厂模式，这一系列的Bean工厂，也即IOC容器为开发者管理对象间的依赖关系提供了很多便利和基础服务，在Spring中有许多的
IOC容器的实现供用户选择和使用，其相互关系如下：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;"><img src="Spring%EF%BC%9A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BBSpring%20IOC%E5%8E%9F%E7%90%86_files/172219470349285.png" alt=""></span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">其
中BeanFactory作为最顶层的一个接口类，它定义了IOC容器的基本功能规范，BeanFactory&nbsp;有三个子
类：ListableBeanFactory、HierarchicalBeanFactory&nbsp;和
AutowireCapableBeanFactory。但是从上图中我们可以发现最终的默认实现类
是&nbsp;DefaultListableBeanFactory，他实现了所有的接口。那为何要定义这么多层次的接口呢？查阅这些接口的源码和说明
发现，每个接口都有他使用的场合，它主要是为了区分在&nbsp;Spring&nbsp;内部在操作过程中对象的传递和转化过程中，对对象的数据访问所
做的限制。例如&nbsp;ListableBeanFactory&nbsp;接口表示这些&nbsp;Bean&nbsp;是可列表的，
而&nbsp;HierarchicalBeanFactory&nbsp;表示的是这些&nbsp;Bean&nbsp;是有继承关系的，也就是每个
Bean&nbsp;有可能有父&nbsp;Bean。AutowireCapableBeanFactory&nbsp;接口定
义&nbsp;Bean&nbsp;的自动装配规则。这四个接口共同定义了&nbsp;Bean&nbsp;的集合、Bean&nbsp;之间的关系、以
及&nbsp;Bean&nbsp;行为.</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">最基本的IOC容器接口BeanFactory</span></p>
<p class="p0">&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;">1 <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">interface</span><span style="color: #000000;"> BeanFactory {    
</span><span style="color: #800080;">2</span>      
<span style="color: #800080;">3</span>      <span style="color: #008000;">//</span><span style="color: #008000;">对FactoryBean的转义定义，因为如果使用bean的名字检索FactoryBean得到的对象是工厂生成的对象，    </span>
<span style="color: #800080;">4</span>      <span style="color: #008000;">//</span><span style="color: #008000;">如果需要得到工厂本身，需要转义           </span>
<span style="color: #800080;">5</span>      String FACTORY_BEAN_PREFIX = <span style="color: #800000;">"</span><span style="color: #800000;">&amp;</span><span style="color: #800000;">"</span><span style="color: #000000;">; 
</span><span style="color: #800080;">6</span>         
<span style="color: #800080;">7</span>      <span style="color: #008000;">//</span><span style="color: #008000;">根据bean的名字，获取在IOC容器中得到bean实例    </span>
<span style="color: #800080;">8</span><span style="color: #000000;">      Object getBean(String name) throws BeansException;    
</span><span style="color: #800080;">9</span>    
<span style="color: #800080;">10</span>     <span style="color: #008000;">//</span><span style="color: #008000;">根据bean的名字和Class类型来得到bean实例，增加了类型安全验证机制。    </span>
<span style="color: #800080;">11</span><span style="color: #000000;">      Object getBean(String name, Class requiredType) throws BeansException;    
</span><span style="color: #800080;">12</span>     
<span style="color: #800080;">13</span>     <span style="color: #008000;">//</span><span style="color: #008000;">提供对bean的检索，看看是否在IOC容器有这个名字的bean    </span>
<span style="color: #800080;">14</span><span style="color: #000000;">      boolean containsBean(String name);    
</span><span style="color: #800080;">15</span>     
<span style="color: #800080;">16</span>     <span style="color: #008000;">//</span><span style="color: #008000;">根据bean名字得到bean实例，并同时判断这个bean是不是单例    </span>
<span style="color: #800080;">17</span><span style="color: #000000;">     boolean isSingleton(String name) throws NoSuchBeanDefinitionException;    
</span><span style="color: #800080;">18</span>     
<span style="color: #800080;">19</span>     <span style="color: #008000;">//</span><span style="color: #008000;">得到bean实例的Class类型    </span>
<span style="color: #800080;">20</span><span style="color: #000000;">     Class getType(String name) throws NoSuchBeanDefinitionException;    
</span><span style="color: #800080;">21</span>     
<span style="color: #800080;">22</span>     <span style="color: #008000;">//</span><span style="color: #008000;">得到bean的别名，如果根据别名检索，那么其原名也会被检索出来    </span>
<span style="color: #800080;">23</span><span style="color: #000000;">    String[] getAliases(String name);    
</span><span style="color: #800080;">24</span><span style="color: #000000;">     
 }</span></span></pre>
</div>
<p class="p0">&nbsp;</p>
<p>&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">在BeanFactory里只对IOC容器的基本行为作了定义，根本不关心你的bean是如何定义怎样加载的。正如我们只关心工厂里得到什么的产品对象，至于工厂是怎么生产这些对象的，这个基本的接口不关心。</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
而要知道工厂是如何产生对象的，我们需要看具体的IOC容器实现，spring提供了许多IOC容器的实现。比如
XmlBeanFactory，ClasspathXmlApplicationContext等。其中XmlBeanFactory就是针对最基本的
ioc容器的实现，这个IOC容器可以读取XML文件定义的BeanDefinition（XML文件中对bean的描述）,如果说
XmlBeanFactory是容器中的屌丝，ApplicationContext应该算容器中的高帅富.</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ApplicationContext
是Spring提供的一个高级的IoC容器，它除了能够提供IoC容器的基本功能外，还为用户提供了以下的附加服务。</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">从ApplicationContext接口的实现，我们看出其特点：</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;支持信息源，可以实现国际化。（实现MessageSource接口）</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;访问资源。(实现ResourcePatternResolver接口，这个后面要讲)</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;支持应用事件。(实现ApplicationEventPublisher接口)</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">(2)&nbsp;BeanDefinition</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringIOC
容器管理了我们定义的各种Bean对象及其相互的关系，Bean对象在Spring实现中是以BeanDefinition来描述的，其继承体系如下：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;"><img src="Spring%EF%BC%9A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BBSpring%20IOC%E5%8E%9F%E7%90%86_files/172221137214635.png" alt=""></span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">Bean&nbsp;的解析过程非常复杂，功能被分的很细，因为这里需要被扩展的地方很多，必须保证有足够的灵活性，以应对可能的变化。Bean&nbsp;的解析主要就是对&nbsp;Spring&nbsp;配置文件的解析。这个解析过程主要通过下图中的类完成：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;"><img src="Spring%EF%BC%9A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BBSpring%20IOC%E5%8E%9F%E7%90%86_files/172221565186760.png" alt=""></span></p>
<div id="tony_body">
<h2>
三、IoC容器的初始化？</h2>
</div>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IoC
容器的初始化包括BeanDefinition的Resource定位、载入和注册这三个基本的过程。我们以ApplicationContext为例讲
解，ApplicationContext系列容器也许是我们最熟悉的，因为web项目中使用的XmlWebApplicationContext就属于
这个继承体系，还有ClasspathXmlApplicationContext等，其继承体系如下图所示：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;"><img src="Spring%EF%BC%9A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BBSpring%20IOC%E5%8E%9F%E7%90%86_files/172222438935854.png" alt=""></span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">ApplicationContext允许上下文嵌套，通过保持父上下文可以维持一个上下文体系。对于bean的查找可以在这个上下文体系中发生，首先检查当前上下文，其次是父上下文，逐级向上，这样为不同的Spring应用提供了一个共享的bean定义环境。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">下面我们分别简单地演示一下两种ioc容器的创建过程</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">1、XmlBeanFactory(屌丝IOC)的整个流程</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">通过XmlBeanFactory的源码，我们可以发现:</span></p>
<p class="p0">&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> XmlBeanFactory extends DefaultListableBeanFactory{
</span>
</span><br><span style="font-family: courier new, courier; font-size: 16px;">     <span style="color: #0000ff;">private</span><span style="color: #000000;"> final XmlBeanDefinitionReader reader; 
</span> 
</span><br><span style="font-family: courier new, courier; font-size: 16px;">     <span style="color: #0000ff;">public</span><span style="color: #000000;"> XmlBeanFactory(Resource resource)throws BeansException{
</span>         <span style="color: #0000ff;">this</span>(resource, <span style="color: #0000ff;">null</span><span style="color: #000000;">);
</span><span style="color: #000000;">     }
</span>     
</span><br><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #0000ff;">     public</span><span style="color: #000000;"> XmlBeanFactory(Resource resource, BeanFactory parentBeanFactory)
</span><span style="color: #000000;">          throws BeansException{
</span><span style="color: #000000;">         super(parentBeanFactory);
</span>         <span style="color: #0000ff;">this</span>.reader = <span style="color: #0000ff;">new</span> XmlBeanDefinitionReader(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span>         <span style="color: #0000ff;">this</span><span style="color: #000000;">.reader.loadBeanDefinitions(resource);
</span><span style="color: #000000;">    }
</span> }</span></pre>
</div>
<p class="p0">&nbsp;</p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #008000;">//</span><span style="color: #008000;">根据Xml配置文件创建Resource资源对象，该对象中包含了BeanDefinition的信息</span>
 ClassPathResource resource =<span style="color: #0000ff;">new</span> ClassPathResource(<span style="color: #800000;">"</span><span style="color: #800000;">application-context.xml</span><span style="color: #800000;">"</span><span style="color: #000000;">);
</span><span style="color: #008000;">//</span><span style="color: #008000;">创建DefaultListableBeanFactory</span>
 DefaultListableBeanFactory factory =<span style="color: #0000ff;">new</span><span style="color: #000000;"> DefaultListableBeanFactory();
</span><span style="color: #008000;">//</span><span style="color: #008000;">创建XmlBeanDefinitionReader读取器，用于载入BeanDefinition。之所以需要BeanFactory作为参数，是因为会将读取的信息回调配置给factory</span>
 XmlBeanDefinitionReader reader =<span style="color: #0000ff;">new</span><span style="color: #000000;"> XmlBeanDefinitionReader(factory);
</span><span style="color: #008000;">//</span><span style="color: #008000;">XmlBeanDefinitionReader执行载入BeanDefinition的方法，最后会完成Bean的载入和注册。完成后Bean就成功的放置到IOC容器当中，以后我们就可以从中取得Bean来使用</span>
 reader.loadBeanDefinitions(resource);</span></pre>
</div>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">通过前面的源码，this.reader&nbsp;=&nbsp;new&nbsp;XmlBeanDefinitionReader(this);&nbsp;中其中this&nbsp;传的是factory对象</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">2、FileSystemXmlApplicationContext&nbsp;的IOC容器流程</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">1、高富帅IOC解剖</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">1&nbsp;&nbsp;&nbsp;ApplicationContext&nbsp;=new&nbsp;FileSystemXmlApplicationContext(xmlPath);</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">先看其构造函数：</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;&nbsp;&nbsp;调用构造函数：</span></p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #008000;">/*</span><span style="color: #008000;">*
* Create a new FileSystemXmlApplicationContext, loading the definitions
* from the given XML files and automatically refreshing the context.
* @param configLocations array of file paths
* @throws BeansException if context creation failed
 </span><span style="color: #008000;">*/</span><span style="color: #0000ff;">public</span><span style="color: #000000;"> FileSystemXmlApplicationContext(String... configLocations) throws BeansException {
</span>        <span style="color: #0000ff;">this</span>(configLocations, <span style="color: #0000ff;">true</span>, <span style="color: #0000ff;">null</span><span style="color: #000000;">);
</span>    }</span></pre>
</div>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">实际调用</span></p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #0000ff;">public</span><span style="color: #000000;"> FileSystemXmlApplicationContext(String[] configLocations, boolean refresh, ApplicationContext parent)  
            throws BeansException {    
        super(parent);  
        setConfigLocations(configLocations);  
        </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (refresh) {  
            refresh();  
        }  
    } </span></span></pre>
</div>
<p>&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">2、设置资源加载器和资源定位</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">通过分析FileSystemXmlApplicationContext的源代码可以知道，在创建FileSystemXmlApplicationContext容器时，构造方法做以下两项重要工作：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">首先，调用父类容器的构造方法(super(parent)方法)为容器设置好Bean资源加载器。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">然后，再调用父类AbstractRefreshableConfigApplicationContext的setConfigLocations(configLocations)方法设置Bean定义资源文件的定位路径。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">通过追踪FileSystemXmlApplicationContext的继承体系，发现其父类的父类AbstractApplicationContext中初始化IoC容器所做的主要源码如下：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">abstract</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> AbstractApplicationContext extends DefaultResourceLoader  
        implements ConfigurableApplicationContext, DisposableBean {  
</span><span style="color: #008000;">    //</span><span style="color: #008000;">静态初始化块，在整个容器创建过程中只执行一次  </span>
<span style="color: #0000ff;">    static</span><span style="color: #000000;"> {  
        </span><span style="color: #008000;">//</span><span style="color: #008000;">为了避免应用程序在Weblogic8.1关闭时出现类加载异常加载问题，加载IoC容  
</span><span style="color: #008000;">       //</span><span style="color: #008000;">器关闭事件(ContextClosedEvent)类  </span>
        ContextClosedEvent.<span style="color: #0000ff;">class</span><span style="color: #000000;">.getName();  
    }  
    </span><span style="color: #008000;">//</span><span style="color: #008000;">FileSystemXmlApplicationContext调用父类构造方法调用的就是该方法  </span>
    <span style="color: #0000ff;">public</span><span style="color: #000000;"> AbstractApplicationContext(ApplicationContext parent) {  
        </span><span style="color: #0000ff;">this</span>.parent =<span style="color: #000000;"> parent;  
        </span><span style="color: #0000ff;">this</span>.resourcePatternResolver =<span style="color: #000000;"> getResourcePatternResolver();  
    }  
</span><span style="color: #008000;">    //</span><span style="color: #008000;">获取一个Spring Source的加载器用于读入Spring Bean定义资源文件  </span>
<span style="color: #0000ff;">    protected</span><span style="color: #000000;"> ResourcePatternResolver getResourcePatternResolver() {  
        </span><span style="color: #008000;">//</span><span style="color: #008000;"> AbstractApplicationContext继承DefaultResourceLoader，也是一个S  
        </span><span style="color: #008000;">//</span><span style="color: #008000;">Spring资源加载器，其getResource(String location)方法用于载入资源  </span>
        <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">new</span> PathMatchingResourcePatternResolver(<span style="color: #0000ff;">this</span><span style="color: #000000;">);  
    }   
……  
} </span></span></pre>
</div>
<p>&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">AbstractApplicationContext构造方法中调用PathMatchingResourcePatternResolver的构造方法创建Spring资源加载器：</span></p>
<p class="p0">&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #0000ff;">public</span><span style="color: #000000;"> PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {  
        Assert.notNull(resourceLoader, </span><span style="color: #800000;">"</span><span style="color: #800000;">ResourceLoader must not be null</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
        </span><span style="color: #008000;">//</span><span style="color: #008000;">设置Spring的资源加载器  </span>
        <span style="color: #0000ff;">this</span>.resourceLoader =<span style="color: #000000;"> resourceLoader;  
} </span></span></pre>
</div>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">在
设置容器的资源加载器之后，接下来FileSystemXmlApplicationContet执行setConfigLocations方法通过调用
其父类AbstractRefreshableConfigApplicationContext的方法进行对Bean定义资源文件的定位，该方法的源码
如下：</span></p>
<p class="p0">&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #008000;">    //</span><span style="color: #008000;">处理单个资源文件路径为一个字符串的情况  </span>
<span style="color: #0000ff;">    public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setConfigLocation(String location) {  
</span><span style="color: #008000;">       //</span><span style="color: #008000;">String CONFIG_LOCATION_DELIMITERS = ",; /t/n";  
</span><span style="color: #008000;">       //</span><span style="color: #008000;">即多个资源文件路径之间用” ,; /t/n”分隔，解析成数组形式  </span>
<span style="color: #000000;">        setConfigLocations(StringUtils.tokenizeToStringArray(location, CONFIG_LOCATION_DELIMITERS));  
    }  <br></span><span style="color: #008000;">//</span><span style="color: #008000;">解析Bean定义资源文件的路径，处理多个资源文件字符串数组  </span>
     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setConfigLocations(String[] locations) {  
        </span><span style="color: #0000ff;">if</span> (locations != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
            Assert.noNullElements(locations, </span><span style="color: #800000;">"</span><span style="color: #800000;">Config locations must not be null</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
            </span><span style="color: #0000ff;">this</span>.configLocations = <span style="color: #0000ff;">new</span><span style="color: #000000;"> String[locations.length];  
            </span><span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> i = <span style="color: #800080;">0</span>; i &lt; locations.length; i++<span style="color: #000000;">) {  
                </span><span style="color: #008000;">//</span><span style="color: #008000;"> resolvePath为同一个类中将字符串解析为路径的方法  </span>
                <span style="color: #0000ff;">this</span>.configLocations[i] =<span style="color: #000000;"> resolvePath(locations[i]).trim();  
            }  
        }  
        </span><span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
            </span><span style="color: #0000ff;">this</span>.configLocations = <span style="color: #0000ff;">null</span><span style="color: #000000;">;  
        }  
    } </span></span></pre>
</div>
<p class="p0">&nbsp;</p>
<p>&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">通过这两个方法的源码我们可以看出，我们既可以使用一个字符串来配置多个Spring&nbsp;Bean定义资源文件，也可以使用字符串数组，即下面两种方式都是可以的：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">a.&nbsp;&nbsp;&nbsp;&nbsp;ClasspathResource&nbsp;res&nbsp;=&nbsp;new&nbsp;ClasspathResource(“a.xml,b.xml,……”);</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">多个资源文件路径之间可以是用”&nbsp;,;&nbsp;/t/n”等分隔。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">b.&nbsp;&nbsp;&nbsp;&nbsp;ClasspathResource&nbsp;res&nbsp;=&nbsp;new&nbsp;ClasspathResource(newString[]{“a.xml”,”b.xml”,……});</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">至此，Spring&nbsp;IoC容器在初始化时将配置的Bean定义资源文件定位为Spring封装的Resource。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">3、AbstractApplicationContext的refresh函数载入Bean定义过程：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">Spring&nbsp;IoC
容器对Bean定义资源的载入是从refresh()函数开始的，refresh()是一个模板方法，refresh()方法的作用是：在创建IoC容器
前，如果已经有容器存在，则需要把已有的容器销毁和关闭，以保证在refresh之后使用的是新建立起来的IoC容器。refresh的作用类似于对
IoC容器的重启，在新建立好的容器中对容器进行初始化，对Bean定义资源进行载入</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">FileSystemXmlApplicationContext通过调用其父类AbstractApplicationContext的refresh()函数启动整个IoC容器对Bean定义的载入过程：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #800080;">1</span>      <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> refresh() throws BeansException, IllegalStateException {  
</span><span style="color: #800080;">2</span>        synchronized (<span style="color: #0000ff;">this</span><span style="color: #000000;">.startupShutdownMonitor) {  
</span><span style="color: #800080;">3</span>            <span style="color: #008000;">//</span><span style="color: #008000;">调用容器准备刷新的方法，获取容器的当时时间，同时给容器设置同步标识  </span>
<span style="color: #800080;">4</span><span style="color: #000000;">            prepareRefresh();  
</span><span style="color: #800080;">5</span>            <span style="color: #008000;">//</span><span style="color: #008000;">告诉子类启动refreshBeanFactory()方法，Bean定义资源文件的载入从  </span>
<span style="color: #800080;">6</span>           <span style="color: #008000;">//</span><span style="color: #008000;">子类的refreshBeanFactory()方法启动  </span>
<span style="color: #800080;">7</span>            ConfigurableListableBeanFactory beanFactory =<span style="color: #000000;"> obtainFreshBeanFactory();  
</span><span style="color: #800080;">8</span>            <span style="color: #008000;">//</span><span style="color: #008000;">为BeanFactory配置容器特性，例如类加载器、事件处理器等  </span>
<span style="color: #800080;">9</span><span style="color: #000000;">            prepareBeanFactory(beanFactory);  
</span><span style="color: #800080;">10</span>            <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">11</span>                <span style="color: #008000;">//</span><span style="color: #008000;">为容器的某些子类指定特殊的BeanPost事件处理器  </span>
<span style="color: #800080;">12</span><span style="color: #000000;">                postProcessBeanFactory(beanFactory);  
</span><span style="color: #800080;">13</span>                <span style="color: #008000;">//</span><span style="color: #008000;">调用所有注册的BeanFactoryPostProcessor的Bean  </span>
<span style="color: #800080;">14</span><span style="color: #000000;">                invokeBeanFactoryPostProcessors(beanFactory);  
</span><span style="color: #800080;">15</span>                <span style="color: #008000;">//</span><span style="color: #008000;">为BeanFactory注册BeanPost事件处理器.  </span>
<span style="color: #800080;">16</span>                <span style="color: #008000;">//</span><span style="color: #008000;">BeanPostProcessor是Bean后置处理器，用于监听容器触发的事件  </span>
<span style="color: #800080;">17</span><span style="color: #000000;">                registerBeanPostProcessors(beanFactory);  
</span><span style="color: #800080;">18</span>                <span style="color: #008000;">//</span><span style="color: #008000;">初始化信息源，和国际化相关.  </span>
<span style="color: #800080;">19</span><span style="color: #000000;">                initMessageSource();  
</span><span style="color: #800080;">20</span>                <span style="color: #008000;">//</span><span style="color: #008000;">初始化容器事件传播器.  </span>
<span style="color: #800080;">21</span><span style="color: #000000;">                initApplicationEventMulticaster();  
</span><span style="color: #800080;">22</span>                <span style="color: #008000;">//</span><span style="color: #008000;">调用子类的某些特殊Bean初始化方法  </span>
<span style="color: #800080;">23</span><span style="color: #000000;">                onRefresh();  
</span><span style="color: #800080;">24</span>                <span style="color: #008000;">//</span><span style="color: #008000;">为事件传播器注册事件监听器.  </span>
<span style="color: #800080;">25</span><span style="color: #000000;">                registerListeners();  
</span><span style="color: #800080;">26</span>                <span style="color: #008000;">//</span><span style="color: #008000;">初始化所有剩余的单态Bean.  </span>
<span style="color: #800080;">27</span><span style="color: #000000;">                finishBeanFactoryInitialization(beanFactory);  
</span><span style="color: #800080;">28</span>                <span style="color: #008000;">//</span><span style="color: #008000;">初始化容器的生命周期事件处理器，并发布容器的生命周期事件  </span>
<span style="color: #800080;">29</span><span style="color: #000000;">                finishRefresh();  
</span><span style="color: #800080;">30</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">31</span>            <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (BeansException ex) {  
</span><span style="color: #800080;">32</span>                <span style="color: #008000;">//</span><span style="color: #008000;">销毁以创建的单态Bean  </span>
<span style="color: #800080;">33</span><span style="color: #000000;">                destroyBeans();  
</span><span style="color: #800080;">34</span>                <span style="color: #008000;">//</span><span style="color: #008000;">取消refresh操作，重置容器的同步标识.  </span>
<span style="color: #800080;">35</span><span style="color: #000000;">                cancelRefresh(ex);  
</span><span style="color: #800080;">36</span>                <span style="color: #0000ff;">throw</span><span style="color: #000000;"> ex;  
</span><span style="color: #800080;">37</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">38</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">39</span>    }</span></pre>
</div>
<p>&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">refresh()
方法主要为IoC容器Bean的生命周期管理提供条件，Spring&nbsp;IoC容器载入Bean定义资源文件从其子类容器的
refreshBeanFactory()方法启动，所以整个refresh()中
“ConfigurableListableBeanFactory&nbsp;beanFactory&nbsp;=obtainFreshBeanFactory();”
这句以后代码的都是注册容器的信息源和生命周期事件，载入过程就是从这句代码启动。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;refresh()
方法的作用是：在创建IoC容器前，如果已经有容器存在，则需要把已有的容器销毁和关闭，以保证在refresh之后使用的是新建立起来的IoC容器。
refresh的作用类似于对IoC容器的重启，在新建立好的容器中对容器进行初始化，对Bean定义资源进行载入</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">AbstractApplicationContext的obtainFreshBeanFactory()方法调用子类容器的refreshBeanFactory()方法，启动容器载入Bean定义资源文件的过程，代码如下：</span></p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #0000ff;">    protected</span><span style="color: #000000;"> ConfigurableListableBeanFactory obtainFreshBeanFactory() {  
        </span><span style="color: #008000;">//</span><span style="color: #008000;">这里使用了委派设计模式，父类定义了抽象的refreshBeanFactory()方法，具体实现调用子类容器的refreshBeanFactory()方法</span>
<span style="color: #000000;">         refreshBeanFactory();  
        ConfigurableListableBeanFactory beanFactory </span>=<span style="color: #000000;"> getBeanFactory();  
        </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (logger.isDebugEnabled()) {  
            logger.debug(</span><span style="color: #800000;">"</span><span style="color: #800000;">Bean factory for </span><span style="color: #800000;">"</span> + getDisplayName() + <span style="color: #800000;">"</span><span style="color: #800000;">: </span><span style="color: #800000;">"</span> +<span style="color: #000000;"> beanFactory);  
        }  
        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> beanFactory;  
    } </span></span></pre>
</div>
<p>&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">AbstractApplicationContext子类的refreshBeanFactory()方法：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;&nbsp;&nbsp;AbstractApplicationContext
类中只抽象定义了refreshBeanFactory()方法，容器真正调用的是其子类
AbstractRefreshableApplicationContext实现
的&nbsp;&nbsp;&nbsp;&nbsp;refreshBeanFactory()方法，方法的源码如下：</span></p>
<p class="p0">&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;">1    <span style="color: #0000ff;">protected</span> final <span style="color: #0000ff;">void</span><span style="color: #000000;"> refreshBeanFactory() throws BeansException {  
</span><span style="color: #800080;">2</span>        <span style="color: #0000ff;">if</span> (hasBeanFactory()) {<span style="color: #008000;">//</span><span style="color: #008000;">如果已经有容器，销毁容器中的bean，关闭容器  </span>
<span style="color: #800080;">3</span><span style="color: #000000;">            destroyBeans();  
</span><span style="color: #800080;">4</span><span style="color: #000000;">            closeBeanFactory();  
</span><span style="color: #800080;">5</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">6</span>        <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">7</span>             <span style="color: #008000;">//</span><span style="color: #008000;">创建IoC容器  </span>
<span style="color: #800080;">8</span>             DefaultListableBeanFactory beanFactory =<span style="color: #000000;"> createBeanFactory();  
</span><span style="color: #800080;">9</span><span style="color: #000000;">             beanFactory.setSerializationId(getId());  
</span><span style="color: #800080;">10            </span><span style="color: #008000;">//</span><span style="color: #008000;">对IoC容器进行定制化，如设置启动参数，开启注解的自动装配等  </span>
<span style="color: #800080;">11</span><span style="color: #000000;">            customizeBeanFactory(beanFactory);  
</span><span style="color: #800080;">12            </span><span style="color: #008000;">//</span><span style="color: #008000;">调用载入Bean定义的方法，主要这里又使用了一个委派模式，在当前类中只定义了抽象的loadBeanDefinitions方法，具体的实现调用子类容器  </span>
<span style="color: #800080;">13</span><span style="color: #000000;">            loadBeanDefinitions(beanFactory);  
</span><span style="color: #800080;">14</span>            synchronized (<span style="color: #0000ff;">this</span><span style="color: #000000;">.beanFactoryMonitor) {  
</span><span style="color: #800080;">15</span>                <span style="color: #0000ff;">this</span>.beanFactory =<span style="color: #000000;"> beanFactory;  
</span><span style="color: #800080;">16</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">17</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">18</span>        <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IOException ex) {  
</span><span style="color: #800080;">19</span>            <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span> ApplicationContextException(<span style="color: #800000;">"</span><span style="color: #800000;">I/O error parsing bean definition source for </span><span style="color: #800000;">"</span> +<span style="color: #000000;"> getDisplayName(), ex);  
</span><span style="color: #800080;">20</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">21</span>    }</span></pre>
</div>
<p class="p0">&nbsp;</p>
<p>&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">在这个方法中，先判断BeanFactory是否存在，如果存在则先销毁beans并关闭beanFactory，接着创建DefaultListableBeanFactory，并调用loadBeanDefinitions(beanFactory)装载bean</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">定义。</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">5、AbstractRefreshableApplicationContext子类的loadBeanDefinitions方法：</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">AbstractRefreshableApplicationContext
中只定义了抽象的loadBeanDefinitions方法，容器真正调用的是其子类AbstractXmlApplicationContext对该
方法的实现，AbstractXmlApplicationContext的主要源码如下：</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">loadBeanDefinitions方法同样是抽象方法，是由其子类实现的，也即在AbstractXmlApplicationContext中。</span></p>
<p class="p0">&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;">1  <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">abstract</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> AbstractXmlApplicationContext extends AbstractRefreshableConfigApplicationContext {  
</span><span style="color: #800080;">2     </span><span style="color: #000000;">……  
</span><span style="color: #800080;">3     </span><span style="color: #008000;">//</span><span style="color: #008000;">实现父类抽象的载入Bean定义方法  </span>
<span style="color: #800080;">4</span><span style="color: #000000;">     @Override  
</span><span style="color: #800080;">5</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> loadBeanDefinitions(DefaultListableBeanFactory beanFactory) throws BeansException, IOException {  
</span><span style="color: #800080;">6</span>         <span style="color: #008000;">//</span><span style="color: #008000;">创建XmlBeanDefinitionReader，即创建Bean读取器，并通过回调设置到容器中去，容  器使用该读取器读取Bean定义资源  </span>
<span style="color: #800080;">7</span>         XmlBeanDefinitionReader beanDefinitionReader = <span style="color: #0000ff;">new</span><span style="color: #000000;"> XmlBeanDefinitionReader(beanFactory);  
</span><span style="color: #800080;">8         </span><span style="color: #008000;">//</span><span style="color: #008000;">为Bean读取器设置Spring资源加载器，AbstractXmlApplicationContext的  </span>
<span style="color: #800080;">9         </span><span style="color: #008000;">//</span><span style="color: #008000;">祖先父类AbstractApplicationContext继承DefaultResourceLoader，因此，容器本身也是一个资源加载器  </span>
<span style="color: #800080;">10</span>        beanDefinitionReader.setResourceLoader(<span style="color: #0000ff;">this</span><span style="color: #000000;">);  
</span><span style="color: #800080;">11</span>        <span style="color: #008000;">//</span><span style="color: #008000;">为Bean读取器设置SAX xml解析器  </span>
<span style="color: #800080;">12</span>        beanDefinitionReader.setEntityResolver(<span style="color: #0000ff;">new</span> ResourceEntityResolver(<span style="color: #0000ff;">this</span><span style="color: #000000;">));  
</span><span style="color: #800080;">13</span>        <span style="color: #008000;">//</span><span style="color: #008000;">当Bean读取器读取Bean定义的Xml资源文件时，启用Xml的校验机制  </span>
<span style="color: #800080;">14</span><span style="color: #000000;">        initBeanDefinitionReader(beanDefinitionReader);  
</span><span style="color: #800080;">15</span>        <span style="color: #008000;">//</span><span style="color: #008000;">Bean读取器真正实现加载的方法  </span>
<span style="color: #800080;">16</span><span style="color: #000000;">        loadBeanDefinitions(beanDefinitionReader);  
</span><span style="color: #800080;">17</span><span style="color: #000000;">    }  
</span><span style="color: #800080;">18</span>    <span style="color: #008000;">//</span><span style="color: #008000;">Xml Bean读取器加载Bean定义资源  </span>
<span style="color: #800080;">19</span>    <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> loadBeanDefinitions(XmlBeanDefinitionReader reader) throws BeansException, IOException {  
</span><span style="color: #800080;">20</span>        <span style="color: #008000;">//</span><span style="color: #008000;">获取Bean定义资源的定位  </span>
<span style="color: #800080;">21</span>        Resource[] configResources =<span style="color: #000000;"> getConfigResources();  
</span><span style="color: #800080;">22</span>        <span style="color: #0000ff;">if</span> (configResources != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">23</span>            <span style="color: #008000;">//</span><span style="color: #008000;">Xml Bean读取器调用其父类AbstractBeanDefinitionReader读取定位  </span>
<span style="color: #800080;">24            </span><span style="color: #008000;">//</span><span style="color: #008000;">的Bean定义资源  </span>
<span style="color: #800080;">25</span><span style="color: #000000;">            reader.loadBeanDefinitions(configResources);  
</span><span style="color: #800080;">26</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">27        </span><span style="color: #008000;">//</span><span style="color: #008000;">如果子类中获取的Bean定义资源定位为空，则获取FileSystemXmlApplicationContext构造方法中setConfigLocations方法设置的资源  </span>
<span style="color: #800080;">28</span>        String[] configLocations =<span style="color: #000000;"> getConfigLocations();  
</span><span style="color: #800080;">29</span>        <span style="color: #0000ff;">if</span> (configLocations != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">30</span>            <span style="color: #008000;">//</span><span style="color: #008000;">Xml Bean读取器调用其父类AbstractBeanDefinitionReader读取定位  </span>
<span style="color: #800080;">31            </span><span style="color: #008000;">//</span><span style="color: #008000;">的Bean定义资源  </span>
<span style="color: #800080;">32</span><span style="color: #000000;">            reader.loadBeanDefinitions(configLocations);  
</span><span style="color: #800080;">33</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">34</span><span style="color: #000000;">    }  
</span><span style="color: #800080;">35</span>    <span style="color: #008000;">//</span><span style="color: #008000;">这里又使用了一个委托模式，调用子类的获取Bean定义资源定位的方法  </span>
<span style="color: #800080;">36</span>    <span style="color: #008000;">//</span><span style="color: #008000;">该方法在ClassPathXmlApplicationContext中进行实现，对于我们  </span>
<span style="color: #800080;">37</span>    <span style="color: #008000;">//</span><span style="color: #008000;">举例分析源码的FileSystemXmlApplicationContext没有使用该方法  </span>
38    <span style="color: #0000ff;">protected</span><span style="color: #000000;"> Resource[] getConfigResources() {  
</span><span style="color: #800080;">39</span>        <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">;  
</span><span style="color: #800080;">40</span><span style="color: #000000;">    }   ……  
</span><span style="color: #800080;">41</span>}</span></pre>
</div>
<p class="p0">&nbsp;</p>
<p>&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">Xml&nbsp;Bean读取器(XmlBeanDefinitionReader)调用其父类AbstractBeanDefinitionReader的&nbsp;reader.loadBeanDefinitions方法读取Bean定义资源。</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">由于我们使用FileSystemXmlApplicationContext作为例子分析，因此getConfigResources的返回值为null，因此程序执行reader.loadBeanDefinitions(configLocations)分支。</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">6、AbstractBeanDefinitionReader读取Bean定义资源：</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">AbstractBeanDefinitionReader的loadBeanDefinitions方法源码如下：</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;可以到org.springframework.beans.factory.support看一下BeanDefinitionReader的结构</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;"><img src="Spring%EF%BC%9A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BBSpring%20IOC%E5%8E%9F%E7%90%86_files/172239426289723.png" alt=""></span></p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">在其抽象父类AbstractBeanDefinitionReader中定义了载入过程</span></p>
<p class="p0">&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #800080;">1    </span><span style="color: #008000;">//</span><span style="color: #008000;">重载方法，调用下面的loadBeanDefinitions(String, Set&lt;Resource&gt;);方法  </span>
<span style="color: #800080;">2</span>    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> loadBeanDefinitions(String location) throws BeanDefinitionStoreException {  
</span><span style="color: #800080;">3</span>        <span style="color: #0000ff;">return</span> loadBeanDefinitions(location, <span style="color: #0000ff;">null</span><span style="color: #000000;">);  
</span><span style="color: #800080;">4</span><span style="color: #000000;">    }  
5    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span> loadBeanDefinitions(String location, Set&lt;Resource&gt;<span style="color: #000000;"> actualResources) throws BeanDefinitionStoreException {  
</span><span style="color: #800080;">6</span>        <span style="color: #008000;">//</span><span style="color: #008000;">获取在IoC容器初始化过程中设置的资源加载器  </span>
<span style="color: #800080;">7</span>        ResourceLoader resourceLoader =<span style="color: #000000;"> getResourceLoader();  
</span><span style="color: #800080;">8</span>        <span style="color: #0000ff;">if</span> (resourceLoader == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">9</span>            <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> BeanDefinitionStoreException(  
</span><span style="color: #800080;">10</span>                    <span style="color: #800000;">"</span><span style="color: #800000;">Cannot import bean definitions from location [</span><span style="color: #800000;">"</span> + location + <span style="color: #800000;">"</span><span style="color: #800000;">]: no ResourceLoader available</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">11</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">12</span>        <span style="color: #0000ff;">if</span><span style="color: #000000;"> (resourceLoader instanceof ResourcePatternResolver) {  
</span><span style="color: #800080;">13</span>            <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">14</span>                <span style="color: #008000;">//</span><span style="color: #008000;">将指定位置的Bean定义资源文件解析为Spring IoC容器封装的资源  </span>
<span style="color: #800080;">15</span>                <span style="color: #008000;">//</span><span style="color: #008000;">加载多个指定位置的Bean定义资源文件  </span>
<span style="color: #800080;">16</span>                Resource[] resources =<span style="color: #000000;"> ((ResourcePatternResolver) resourceLoader).getResources(location);  
</span><span style="color: #800080;">17</span>                <span style="color: #008000;">//</span><span style="color: #008000;">委派调用其子类XmlBeanDefinitionReader的方法，实现加载功能  </span>
<span style="color: #800080;">18</span>                <span style="color: #0000ff;">int</span> loadCount =<span style="color: #000000;"> loadBeanDefinitions(resources);  
</span><span style="color: #800080;">19</span>                <span style="color: #0000ff;">if</span> (actualResources != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">20</span>                    <span style="color: #0000ff;">for</span><span style="color: #000000;"> (Resource resource : resources) {  
</span><span style="color: #800080;">21</span><span style="color: #000000;">                        actualResources.add(resource);  
</span><span style="color: #800080;">22</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">23</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">24</span>                <span style="color: #0000ff;">if</span><span style="color: #000000;"> (logger.isDebugEnabled()) {  
</span><span style="color: #800080;">25</span>                    logger.debug(<span style="color: #800000;">"</span><span style="color: #800000;">Loaded </span><span style="color: #800000;">"</span> + loadCount + <span style="color: #800000;">"</span><span style="color: #800000;"> bean definitions from location pattern [</span><span style="color: #800000;">"</span> + location + <span style="color: #800000;">"</span><span style="color: #800000;">]</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">26</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">27</span>                <span style="color: #0000ff;">return</span><span style="color: #000000;"> loadCount;  
</span><span style="color: #800080;">28</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">29</span>            <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IOException ex) {  
</span><span style="color: #800080;">30</span>                <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> BeanDefinitionStoreException(  
</span><span style="color: #800080;">31</span>                        <span style="color: #800000;">"</span><span style="color: #800000;">Could not resolve bean definition resource pattern [</span><span style="color: #800000;">"</span> + location + <span style="color: #800000;">"</span><span style="color: #800000;">]</span><span style="color: #800000;">"</span><span style="color: #000000;">, ex);  
</span><span style="color: #800080;">32</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">33</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">34</span>        <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">35</span>            <span style="color: #008000;">//</span><span style="color: #008000;">将指定位置的Bean定义资源文件解析为Spring IoC容器封装的资源  </span>
<span style="color: #800080;">36</span>            <span style="color: #008000;">//</span><span style="color: #008000;">加载单个指定位置的Bean定义资源文件  </span>
<span style="color: #800080;">37</span>            Resource resource =<span style="color: #000000;"> resourceLoader.getResource(location);  
</span><span style="color: #800080;">38</span>            <span style="color: #008000;">//</span><span style="color: #008000;">委派调用其子类XmlBeanDefinitionReader的方法，实现加载功能  </span>
<span style="color: #800080;">39</span>            <span style="color: #0000ff;">int</span> loadCount =<span style="color: #000000;"> loadBeanDefinitions(resource);  
</span><span style="color: #800080;">40</span>            <span style="color: #0000ff;">if</span> (actualResources != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">41</span><span style="color: #000000;">                actualResources.add(resource);  
</span><span style="color: #800080;">42</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">43</span>            <span style="color: #0000ff;">if</span><span style="color: #000000;"> (logger.isDebugEnabled()) {  
</span><span style="color: #800080;">44</span>                logger.debug(<span style="color: #800000;">"</span><span style="color: #800000;">Loaded </span><span style="color: #800000;">"</span> + loadCount + <span style="color: #800000;">"</span><span style="color: #800000;"> bean definitions from location [</span><span style="color: #800000;">"</span> + location + <span style="color: #800000;">"</span><span style="color: #800000;">]</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">45</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">46</span>            <span style="color: #0000ff;">return</span><span style="color: #000000;"> loadCount;  
</span><span style="color: #800080;">47</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">48</span><span style="color: #000000;">    }  
</span><span style="color: #800080;">49</span>    <span style="color: #008000;">//</span><span style="color: #008000;">重载方法，调用loadBeanDefinitions(String);  </span>
<span style="color: #800080;">50</span>    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> loadBeanDefinitions(String... locations) throws BeanDefinitionStoreException {  
</span><span style="color: #800080;">51</span>        Assert.notNull(locations, <span style="color: #800000;">"</span><span style="color: #800000;">Location array must not be null</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">52</span>        <span style="color: #0000ff;">int</span> counter = <span style="color: #800080;">0</span><span style="color: #000000;">;  
</span><span style="color: #800080;">53</span>        <span style="color: #0000ff;">for</span><span style="color: #000000;"> (String location : locations) {  
</span><span style="color: #800080;">54</span>            counter +=<span style="color: #000000;"> loadBeanDefinitions(location);  
</span><span style="color: #800080;">55</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">56</span>        <span style="color: #0000ff;">return</span><span style="color: #000000;"> counter;  
    } </span></span></pre>
</div>
<p class="p0">&nbsp;</p>
<p>&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">loadBeanDefinitions(Resource...resources)方法和上面分析的3个方法类似，同样也是调用XmlBeanDefinitionReader的loadBeanDefinitions方法。</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">从对AbstractBeanDefinitionReader的loadBeanDefinitions方法源码分析可以看出该方法做了以下两件事：</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">首先，调用资源加载器的获取资源方法resourceLoader.getResource(location)，获取到要加载的资源。</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">其次，真正执行加载功能是其子类XmlBeanDefinitionReader的loadBeanDefinitions方法。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;"><img src="Spring%EF%BC%9A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BBSpring%20IOC%E5%8E%9F%E7%90%86_files/172241209099766.png" alt="">&nbsp;<img src="Spring%EF%BC%9A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BBSpring%20IOC%E5%8E%9F%E7%90%86_files/172241310182544.png" alt=""></span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">看
到第8、16行，结合上面的ResourceLoader与ApplicationContext的继承关系图，可以知道此时调用的是
DefaultResourceLoader中的getSource()方法定位Resource，因为
FileSystemXmlApplicationContext本身就是DefaultResourceLoader的实现类，所以此时又回到了
FileSystemXmlApplicationContext中来。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">7、资源加载器获取要读入的资源：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">XmlBeanDefinitionReader通过调用其父类DefaultResourceLoader的getResource方法获取要加载的资源，其源码如下</span></p>
<p class="p0">&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #800080;">1    </span><span style="color: #008000;">//</span><span style="color: #008000;">获取Resource的具体实现方法  </span>
2    <span style="color: #0000ff;">public</span><span style="color: #000000;"> Resource getResource(String location) {  
</span><span style="color: #800080;">3</span>        Assert.notNull(location, <span style="color: #800000;">"</span><span style="color: #800000;">Location must not be null</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">4</span>        <span style="color: #008000;">//</span><span style="color: #008000;">如果是类路径的方式，那需要使用ClassPathResource 来得到bean 文件的资源对象  </span>
<span style="color: #800080;">5</span>        <span style="color: #0000ff;">if</span><span style="color: #000000;"> (location.startsWith(CLASSPATH_URL_PREFIX)) {  
</span><span style="color: #800080;">6</span>            <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> ClassPathResource(location.substring(CLASSPATH_URL_PREFIX.length()), getClassLoader());  
</span><span style="color: #800080;">7</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">8</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">9</span>              <span style="color: #008000;">//</span><span style="color: #008000;"> 如果是URL 方式，使用UrlResource 作为bean 文件的资源对象  </span>
<span style="color: #800080;">10</span>             URL url = <span style="color: #0000ff;">new</span><span style="color: #000000;"> URL(location);  
</span><span style="color: #800080;">11</span>             <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> UrlResource(url);  
</span><span style="color: #800080;">12</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">13</span>            <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (MalformedURLException ex) { 
</span><span style="color: #800080;">14</span><span style="color: #000000;">            } 
</span><span style="color: #800080;">15</span>            <span style="color: #008000;">//</span><span style="color: #008000;">如果既不是classpath标识，又不是URL标识的Resource定位，则调用  </span>
<span style="color: #800080;">16</span>            <span style="color: #008000;">//</span><span style="color: #008000;">容器本身的getResourceByPath方法获取Resource  </span>
<span style="color: #800080;">17</span>            <span style="color: #0000ff;">return</span><span style="color: #000000;"> getResourceByPath(location);  
</span><span style="color: #800080;">18</span>            
<span style="color: #800080;">19</span>    }</span></pre>
</div>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">FileSystemXmlApplicationContext容器提供了getResourceByPath方法的实现，就是为了处理既不是classpath标识，又不是URL标识的Resource定位这种情况。</span></p>
<p class="p0">&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #0000ff;">protected</span><span style="color: #000000;"> Resource getResourceByPath(String path) {    
</span>   <span style="color: #0000ff;">if</span> (path != <span style="color: #0000ff;">null</span> &amp;&amp; path.startsWith(<span style="color: #800000;">"</span><span style="color: #800000;">/</span><span style="color: #800000;">"</span><span style="color: #000000;">)) {    
</span>        path = path.substring(<span style="color: #800080;">1</span><span style="color: #000000;">);    
</span><span style="color: #000000;">    }  
</span>    <span style="color: #008000;">//</span><span style="color: #008000;">这里使用文件系统资源对象来定义bean 文件</span>
    <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> FileSystemResource(path);  
}</span></span></pre>
</div>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">这样代码就回到了&nbsp;FileSystemXmlApplicationContext&nbsp;中来，他提供了FileSystemResource&nbsp;来完成从文件系统得到配置文件的资源定义。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">这
样，就可以从文件系统路径上对IOC&nbsp;配置文件进行加载&nbsp;-&nbsp;当然我们可以按照这个逻辑从任何地方加载，在
Spring&nbsp;中我们看到它提供&nbsp;的各种资源抽象，比如
ClassPathResource,&nbsp;URLResource,FileSystemResource&nbsp;等来供我们使用。上面我们
看到的是定位Resource&nbsp;的一个过程，而这只是加载过程的一部分.</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">8、XmlBeanDefinitionReader加载Bean定义资源：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bean定义的Resource得到了</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;继续回到XmlBeanDefinitionReader的loadBeanDefinitions(Resource&nbsp;…)方法看到代表bean文件的资源定义以后的载入过程。</span></p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #800080;">1    </span><span style="color: #008000;">//</span><span style="color: #008000;">XmlBeanDefinitionReader加载资源的入口方法  </span>
2    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException {  
</span><span style="color: #800080;">3</span>        <span style="color: #008000;">//</span><span style="color: #008000;">将读入的XML资源进行特殊编码处理  </span>
<span style="color: #800080;">4</span>        <span style="color: #0000ff;">return</span> loadBeanDefinitions(<span style="color: #0000ff;">new</span><span style="color: #000000;"> EncodedResource(resource));  
</span><span style="color: #800080;">5    </span><span style="color: #000000;">} 
     </span><span style="color: #008000;">//</span><span style="color: #008000;">这里是载入XML形式Bean定义资源文件方法</span>
6    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {    
</span><span style="color: #800080;">7</span><span style="color: #000000;">    .......    
</span><span style="color: #800080;">8</span>    <span style="color: #0000ff;">try</span><span style="color: #000000;"> {    
</span><span style="color: #800080;">9</span>         <span style="color: #008000;">//</span><span style="color: #008000;">将资源文件转为InputStream的IO流 </span>
<span style="color: #800080;">10</span>        InputStream inputStream =<span style="color: #000000;"> encodedResource.getResource().getInputStream();    
</span><span style="color: #800080;">11</span>        <span style="color: #0000ff;">try</span><span style="color: #000000;"> {    
</span><span style="color: #800080;">12</span>           <span style="color: #008000;">//</span><span style="color: #008000;">从InputStream中得到XML的解析源    </span>
<span style="color: #800080;">13</span>            InputSource inputSource = <span style="color: #0000ff;">new</span><span style="color: #000000;"> InputSource(inputStream);    
</span><span style="color: #800080;">14</span>            <span style="color: #0000ff;">if</span> (encodedResource.getEncoding() != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {    
</span><span style="color: #800080;">15</span><span style="color: #000000;">                inputSource.setEncoding(encodedResource.getEncoding());    
</span><span style="color: #800080;">16</span><span style="color: #000000;">            }    
</span><span style="color: #800080;">17</span>            <span style="color: #008000;">//</span><span style="color: #008000;">这里是具体的读取过程    </span>
<span style="color: #800080;">18</span>            <span style="color: #0000ff;">return</span><span style="color: #000000;"> doLoadBeanDefinitions(inputSource, encodedResource.getResource());    
</span><span style="color: #800080;">19</span><span style="color: #000000;">        }    
</span><span style="color: #800080;">20</span>        <span style="color: #0000ff;">finally</span><span style="color: #000000;"> {    
</span><span style="color: #800080;">21</span>            <span style="color: #008000;">//</span><span style="color: #008000;">关闭从Resource中得到的IO流    </span>
<span style="color: #800080;">22</span><span style="color: #000000;">            inputStream.close();    
</span><span style="color: #800080;">23</span><span style="color: #000000;">        }    
</span><span style="color: #800080;">24</span><span style="color: #000000;">    }    
</span><span style="color: #800080;">25</span><span style="color: #000000;">       .........    
</span><span style="color: #800080;">26</span><span style="color: #000000;">}    
</span><span style="color: #800080;">27</span>    <span style="color: #008000;">//</span><span style="color: #008000;">从特定XML文件中实际载入Bean定义资源的方法 </span>
28    <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> doLoadBeanDefinitions(InputSource inputSource, Resource resource)    
</span><span style="color: #800080;">29</span><span style="color: #000000;">        throws BeanDefinitionStoreException {    
</span><span style="color: #800080;">30</span>    <span style="color: #0000ff;">try</span><span style="color: #000000;"> {    
</span><span style="color: #800080;">31</span>        <span style="color: #0000ff;">int</span> validationMode =<span style="color: #000000;"> getValidationModeForResource(resource);    
</span><span style="color: #800080;">32</span>        <span style="color: #008000;">//</span><span style="color: #008000;">将XML文件转换为DOM对象，解析过程由documentLoader实现    </span>
<span style="color: #800080;">33</span>        Document doc = <span style="color: #0000ff;">this</span><span style="color: #000000;">.documentLoader.loadDocument(    
</span><span style="color: #800080;">34</span>                inputSource, <span style="color: #0000ff;">this</span>.entityResolver, <span style="color: #0000ff;">this</span>.errorHandler, validationMode, <span style="color: #0000ff;">this</span><span style="color: #000000;">.namespaceAware);    
</span><span style="color: #800080;">35</span>        <span style="color: #008000;">//</span><span style="color: #008000;">这里是启动对Bean定义解析的详细过程，该解析过程会用到Spring的Bean配置规则</span>
<span style="color: #800080;">36</span>        <span style="color: #0000ff;">return</span><span style="color: #000000;"> registerBeanDefinitions(doc, resource);    
</span><span style="color: #800080;">37</span><span style="color: #000000;">      }    
</span><span style="color: #800080;">38      </span><span style="color: #000000;">.......    
     } </span></span></pre>
</div>
<p>&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">通过源码分析，载入Bean定义资源文件的最后一步是将Bean定义资源转换为Document对象，该过程由documentLoader实现</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;&nbsp;&nbsp;&nbsp;</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">9、DocumentLoader将Bean定义资源转换为Document对象：</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">DocumentLoader将Bean定义资源转换成Document对象的源码如下：</span></p>
<p class="p0">&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #800080;">1    </span><span style="color: #008000;">//</span><span style="color: #008000;">使用标准的JAXP将载入的Bean定义资源转换成document对象  </span>
2    <span style="color: #0000ff;">public</span><span style="color: #000000;"> Document loadDocument(InputSource inputSource, EntityResolver entityResolver,  
</span><span style="color: #800080;">3</span>            ErrorHandler errorHandler, <span style="color: #0000ff;">int</span><span style="color: #000000;"> validationMode, boolean namespaceAware) throws Exception {  
</span><span style="color: #800080;">4</span>        <span style="color: #008000;">//</span><span style="color: #008000;">创建文件解析器工厂  </span>
<span style="color: #800080;">5</span>        DocumentBuilderFactory factory =<span style="color: #000000;"> createDocumentBuilderFactory(validationMode, namespaceAware);  
</span><span style="color: #800080;">6</span>        <span style="color: #0000ff;">if</span><span style="color: #000000;"> (logger.isDebugEnabled()) {  
</span><span style="color: #800080;">7</span>            logger.debug(<span style="color: #800000;">"</span><span style="color: #800000;">Using JAXP provider [</span><span style="color: #800000;">"</span> + factory.getClass().getName() + <span style="color: #800000;">"</span><span style="color: #800000;">]</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">8</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">9</span>        <span style="color: #008000;">//</span><span style="color: #008000;">创建文档解析器  </span>
<span style="color: #800080;">10</span>        DocumentBuilder builder =<span style="color: #000000;"> createDocumentBuilder(factory, entityResolver, errorHandler);  
</span><span style="color: #800080;">11</span>        <span style="color: #008000;">//</span><span style="color: #008000;">解析Spring的Bean定义资源  </span>
<span style="color: #800080;">12</span>        <span style="color: #0000ff;">return</span><span style="color: #000000;"> builder.parse(inputSource);  
</span><span style="color: #800080;">13</span><span style="color: #000000;">    }  
14    </span><span style="color: #0000ff;">protected</span> DocumentBuilderFactory createDocumentBuilderFactory(<span style="color: #0000ff;">int</span><span style="color: #000000;"> validationMode, boolean namespaceAware)  
</span><span style="color: #800080;">15</span><span style="color: #000000;">            throws ParserConfigurationException {  
</span><span style="color: #800080;">16</span>        <span style="color: #008000;">//</span><span style="color: #008000;">创建文档解析工厂  </span>
<span style="color: #800080;">17</span>        DocumentBuilderFactory factory =<span style="color: #000000;"> DocumentBuilderFactory.newInstance();  
</span><span style="color: #800080;">18</span><span style="color: #000000;">        factory.setNamespaceAware(namespaceAware);  
</span><span style="color: #800080;">19</span>        <span style="color: #008000;">//</span><span style="color: #008000;">设置解析XML的校验  </span>
<span style="color: #800080;">20</span>        <span style="color: #0000ff;">if</span> (validationMode !=<span style="color: #000000;"> XmlValidationModeDetector.VALIDATION_NONE) {  
</span><span style="color: #800080;">21</span>            factory.setValidating(<span style="color: #0000ff;">true</span><span style="color: #000000;">);  
</span><span style="color: #800080;">22</span>            <span style="color: #0000ff;">if</span> (validationMode ==<span style="color: #000000;"> XmlValidationModeDetector.VALIDATION_XSD) {  
</span><span style="color: #800080;">23</span>                factory.setNamespaceAware(<span style="color: #0000ff;">true</span><span style="color: #000000;">);  
</span><span style="color: #800080;">24</span>                <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">25</span><span style="color: #000000;">                    factory.setAttribute(SCHEMA_LANGUAGE_ATTRIBUTE, XSD_SCHEMA_LANGUAGE);  
</span><span style="color: #800080;">26</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">27</span>                <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IllegalArgumentException ex) {  
</span><span style="color: #800080;">28</span>                    ParserConfigurationException pcex = <span style="color: #0000ff;">new</span><span style="color: #000000;"> ParserConfigurationException(  
</span><span style="color: #800080;">29</span>                            <span style="color: #800000;">"</span><span style="color: #800000;">Unable to validate using XSD: Your JAXP provider [</span><span style="color: #800000;">"</span> + factory +  
<span style="color: #800080;">30</span>                            <span style="color: #800000;">"</span><span style="color: #800000;">] does not support XML Schema. Are you running on Java 1.4 with Apache Crimson? </span><span style="color: #800000;">"</span> +  
<span style="color: #800080;">31</span>                            <span style="color: #800000;">"</span><span style="color: #800000;">Upgrade to Apache Xerces (or Java 1.5) for full XSD support.</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">32</span><span style="color: #000000;">                    pcex.initCause(ex);  
</span><span style="color: #800080;">33</span>                    <span style="color: #0000ff;">throw</span><span style="color: #000000;"> pcex;  
</span><span style="color: #800080;">34</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">35</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">36</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">37</span>        <span style="color: #0000ff;">return</span><span style="color: #000000;"> factory;  
</span><span style="color: #800080;">38</span>    } </span></pre>
</div>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">该解析过程调用JavaEE标准的JAXP标准进行处理。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">至此Spring&nbsp;IoC容器根据定位的Bean定义资源文件，将其加载读入并转换成为Document对象过程完成。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">接下来我们要继续分析Spring&nbsp;IoC容器将载入的Bean定义资源文件转换为Document对象之后，是如何将其解析为Spring&nbsp;IoC管理的Bean对象并将其注册到容器中的。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">10、XmlBeanDefinitionReader解析载入的Bean定义资源文件：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;XmlBeanDefinitionReader
类中的doLoadBeanDefinitions方法是从特定XML文件中实际载入Bean定义资源的方法，该方法在载入Bean定义资源之后将其转换
为Document对象，接下来调用registerBeanDefinitions启动Spring&nbsp;IoC容器对Bean定义的解析过
程，registerBeanDefinitions方法源码如下：</span></p>
<p class="p0">&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #800080;">1    </span><span style="color: #008000;">//</span><span style="color: #008000;">按照Spring的Bean语义要求将Bean定义资源解析并转换为容器内部数据结构  </span>
2    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> registerBeanDefinitions(Document doc, Resource resource) throws BeanDefinitionStoreException {  
</span><span style="color: #800080;">3</span>        <span style="color: #008000;">//</span><span style="color: #008000;">得到BeanDefinitionDocumentReader来对xml格式的BeanDefinition解析  </span>
<span style="color: #800080;">4</span>        BeanDefinitionDocumentReader documentReader =<span style="color: #000000;"> createBeanDefinitionDocumentReader();  
</span><span style="color: #800080;">5</span>        <span style="color: #008000;">//</span><span style="color: #008000;">获得容器中注册的Bean数量  </span>
<span style="color: #800080;">6</span>        <span style="color: #0000ff;">int</span> countBefore =<span style="color: #000000;"> getRegistry().getBeanDefinitionCount();  
</span><span style="color: #800080;">7        </span><span style="color: #008000;">//</span><span style="color: #008000;">解析过程入口，这里使用了委派模式，BeanDefinitionDocumentReader只是个接口，</span><span style="color: #008000;">//</span><span style="color: #008000;">具体的解析实现过程有实现类DefaultBeanDefinitionDocumentReader完成  </span>
<span style="color: #800080;">8</span><span style="color: #000000;">        documentReader.registerBeanDefinitions(doc, createReaderContext(resource));  
</span><span style="color: #800080;">9</span>        <span style="color: #008000;">//</span><span style="color: #008000;">统计解析的Bean数量  </span>
<span style="color: #800080;">10</span>        <span style="color: #0000ff;">return</span> getRegistry().getBeanDefinitionCount() -<span style="color: #000000;"> countBefore;  
</span><span style="color: #800080;">11</span><span style="color: #000000;">    }  
</span><span style="color: #800080;">12    </span><span style="color: #008000;">//</span><span style="color: #008000;">创建BeanDefinitionDocumentReader对象，解析Document对象  </span>
13    <span style="color: #0000ff;">protected</span><span style="color: #000000;"> BeanDefinitionDocumentReader createBeanDefinitionDocumentReader() {  
</span><span style="color: #800080;">14</span>        <span style="color: #0000ff;">return</span> BeanDefinitionDocumentReader.<span style="color: #0000ff;">class</span>.cast(BeanUtils.instantiateClass(<span style="color: #0000ff;">this</span><span style="color: #000000;">.documentReaderClass));  
      } </span></span></pre>
</div>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">Bean定义资源的载入解析分为以下两个过程：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">首先，通过调用XML解析器将Bean定义资源文件转换得到Document对象，但是这些Document对象并没有按照Spring的Bean规则进行解析。这一步是载入的过程</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">其次，在完成通用的XML解析之后，按照Spring的Bean规则对Document对象进行解析。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">按照Spring的Bean规则对Document对象解析的过程是在接口BeanDefinitionDocumentReader的实现类DefaultBeanDefinitionDocumentReader中实现的。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">11、DefaultBeanDefinitionDocumentReader对Bean定义的Document对象解析：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">BeanDefinitionDocumentReader接口通过registerBeanDefinitions方法调用其实现类DefaultBeanDefinitionDocumentReader对Document对象进行解析，解析的代码如下：</span></p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #800080;">1     </span><span style="color: #008000;">//</span><span style="color: #008000;">根据Spring DTD对Bean的定义规则解析Bean定义Document对象  </span>
2     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> registerBeanDefinitions(Document doc, XmlReaderContext readerContext) {  
</span><span style="color: #800080;">3</span>         <span style="color: #008000;">//</span><span style="color: #008000;">获得XML描述符  </span>
<span style="color: #800080;">4</span>         <span style="color: #0000ff;">this</span>.readerContext =<span style="color: #000000;"> readerContext;  
</span><span style="color: #800080;">5</span>         logger.debug(<span style="color: #800000;">"</span><span style="color: #800000;">Loading bean definitions</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">6</span>         <span style="color: #008000;">//</span><span style="color: #008000;">获得Document的根元素  </span>
<span style="color: #800080;">7</span>         Element root =<span style="color: #000000;"> doc.getDocumentElement();  
</span><span style="color: #800080;">8</span>         <span style="color: #008000;">//</span><span style="color: #008000;">具体的解析过程由BeanDefinitionParserDelegate实现，  </span>
<span style="color: #800080;">9         </span><span style="color: #008000;">//</span><span style="color: #008000;">BeanDefinitionParserDelegate中定义了Spring Bean定义XML文件的各种元素  </span>
<span style="color: #800080;">10</span>        BeanDefinitionParserDelegate <span style="color: #0000ff;">delegate</span> =<span style="color: #000000;"> createHelper(readerContext, root);  
</span><span style="color: #800080;">11</span>        <span style="color: #008000;">//</span><span style="color: #008000;">在解析Bean定义之前，进行自定义的解析，增强解析过程的可扩展性  </span>
<span style="color: #800080;">12</span><span style="color: #000000;">        preProcessXml(root);  
</span><span style="color: #800080;">13</span>        <span style="color: #008000;">//</span><span style="color: #008000;">从Document的根元素开始进行Bean定义的Document对象  </span>
<span style="color: #800080;">14</span>        parseBeanDefinitions(root, <span style="color: #0000ff;">delegate</span><span style="color: #000000;">);  
</span><span style="color: #800080;">15</span>        <span style="color: #008000;">//</span><span style="color: #008000;">在解析Bean定义之后，进行自定义的解析，增加解析过程的可扩展性  </span>
<span style="color: #000000;">16        postProcessXml(root);  
</span><span style="color: #800080;">17</span><span style="color: #000000;">    }  
</span><span style="color: #800080;">18</span>    <span style="color: #008000;">//</span><span style="color: #008000;">创建BeanDefinitionParserDelegate，用于完成真正的解析过程  </span>
<span style="color: #800080;">19</span>    <span style="color: #0000ff;">protected</span><span style="color: #000000;"> BeanDefinitionParserDelegate createHelper(XmlReaderContext readerContext, Element root) {  
</span><span style="color: #800080;">20</span>        BeanDefinitionParserDelegate <span style="color: #0000ff;">delegate</span> = <span style="color: #0000ff;">new</span><span style="color: #000000;"> BeanDefinitionParserDelegate(readerContext);  
</span><span style="color: #800080;">21</span>        <span style="color: #008000;">//</span><span style="color: #008000;">BeanDefinitionParserDelegate初始化Document根元素  </span>
<span style="color: #800080;">22</span>        <span style="color: #0000ff;">delegate</span><span style="color: #000000;">.initDefaults(root);  
</span><span style="color: #800080;">23</span>        <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">delegate</span><span style="color: #000000;">;  
</span><span style="color: #800080;">24</span><span style="color: #000000;">    }  
</span><span style="color: #800080;">25</span>    <span style="color: #008000;">//</span><span style="color: #008000;">使用Spring的Bean规则从Document的根元素开始进行Bean定义的Document对象  </span>
<span style="color: #800080;">26</span>    <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span> parseBeanDefinitions(Element root, BeanDefinitionParserDelegate <span style="color: #0000ff;">delegate</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">27</span>        <span style="color: #008000;">//</span><span style="color: #008000;">Bean定义的Document对象使用了Spring默认的XML命名空间  </span>
<span style="color: #800080;">28</span>        <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">delegate</span><span style="color: #000000;">.isDefaultNamespace(root)) {  
</span><span style="color: #800080;">29</span>            <span style="color: #008000;">//</span><span style="color: #008000;">获取Bean定义的Document对象根元素的所有子节点  </span>
<span style="color: #800080;">30</span>            NodeList nl =<span style="color: #000000;"> root.getChildNodes();  
</span><span style="color: #800080;">31</span>            <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> i = <span style="color: #800080;">0</span>; i &lt; nl.getLength(); i++<span style="color: #000000;">) {  
</span><span style="color: #800080;">32</span>                Node node =<span style="color: #000000;"> nl.item(i);  
</span><span style="color: #800080;">33</span>                <span style="color: #008000;">//</span><span style="color: #008000;">获得Document节点是XML元素节点  </span>
<span style="color: #800080;">34</span>                <span style="color: #0000ff;">if</span><span style="color: #000000;"> (node instanceof Element) {  
</span><span style="color: #800080;">35</span>                    Element ele =<span style="color: #000000;"> (Element) node;  
</span><span style="color: #800080;">36</span>                <span style="color: #008000;">//</span><span style="color: #008000;">Bean定义的Document的元素节点使用的是Spring默认的XML命名空间  </span>
<span style="color: #800080;">37</span>                    <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">delegate</span><span style="color: #000000;">.isDefaultNamespace(ele)) {  
</span><span style="color: #800080;">38</span>                        <span style="color: #008000;">//</span><span style="color: #008000;">使用Spring的Bean规则解析元素节点  </span>
<span style="color: #800080;">39</span>                        parseDefaultElement(ele, <span style="color: #0000ff;">delegate</span><span style="color: #000000;">);  
</span><span style="color: #800080;">40</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">41</span>                    <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">42                        </span><span style="color: #008000;">//</span><span style="color: #008000;">没有使用Spring默认的XML命名空间，则使用用户自定义的解</span><span style="color: #008000;">//</span><span style="color: #008000;">析规则解析元素节点  </span>
<span style="color: #800080;">43</span>                        <span style="color: #0000ff;">delegate</span><span style="color: #000000;">.parseCustomElement(ele);  
</span><span style="color: #800080;">44</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">45</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">46</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">47</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">48</span>        <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">49</span>            <span style="color: #008000;">//</span><span style="color: #008000;">Document的根节点没有使用Spring默认的命名空间，则使用用户自定义的  </span>
<span style="color: #800080;">50</span>            <span style="color: #008000;">//</span><span style="color: #008000;">解析规则解析Document根节点  </span>
<span style="color: #800080;">51</span>            <span style="color: #0000ff;">delegate</span><span style="color: #000000;">.parseCustomElement(root);  
</span><span style="color: #800080;">52</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">53</span><span style="color: #000000;">    }  
</span><span style="color: #800080;">54</span>    <span style="color: #008000;">//</span><span style="color: #008000;">使用Spring的Bean规则解析Document元素节点  </span>
<span style="color: #800080;">55</span>    <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> parseDefaultElement(Element ele, BeanDefinitionParserDelegate <span style="color: #0000ff;">delegate</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">56</span>        <span style="color: #008000;">//</span><span style="color: #008000;">如果元素节点是&lt;Import&gt;导入元素，进行导入解析  </span>
57        <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">delegate</span><span style="color: #000000;">.nodeNameEquals(ele, IMPORT_ELEMENT)) {  
</span><span style="color: #800080;">58</span><span style="color: #000000;">            importBeanDefinitionResource(ele);  
</span><span style="color: #800080;">59</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">60</span>        <span style="color: #008000;">//</span><span style="color: #008000;">如果元素节点是&lt;Alias&gt;别名元素，进行别名解析  </span>
<span style="color: #800080;">61</span>        <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">delegate</span><span style="color: #000000;">.nodeNameEquals(ele, ALIAS_ELEMENT)) {  
</span><span style="color: #800080;">62</span><span style="color: #000000;">            processAliasRegistration(ele);  
</span><span style="color: #800080;">63</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">64</span>        <span style="color: #008000;">//</span><span style="color: #008000;">元素节点既不是导入元素，也不是别名元素，即普通的&lt;Bean&gt;元素，  </span>
<span style="color: #800080;">65        </span><span style="color: #008000;">//</span><span style="color: #008000;">按照Spring的Bean规则解析元素  </span>
<span style="color: #800080;">66</span>        <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">delegate</span><span style="color: #000000;">.nodeNameEquals(ele, BEAN_ELEMENT)) {  
</span><span style="color: #800080;">67</span>            processBeanDefinition(ele, <span style="color: #0000ff;">delegate</span><span style="color: #000000;">);  
</span><span style="color: #800080;">68</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">69</span><span style="color: #000000;">    }  
</span><span style="color: #800080;">70</span>    <span style="color: #008000;">//</span><span style="color: #008000;">解析&lt;Import&gt;导入元素，从给定的导入路径加载Bean定义资源到Spring IoC容器中  </span>
<span style="color: #800080;">71</span>    <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> importBeanDefinitionResource(Element ele) {  
</span><span style="color: #800080;">72</span>        <span style="color: #008000;">//</span><span style="color: #008000;">获取给定的导入元素的location属性  </span>
73        String location =<span style="color: #000000;"> ele.getAttribute(RESOURCE_ATTRIBUTE);  
</span><span style="color: #800080;">74</span>        <span style="color: #008000;">//</span><span style="color: #008000;">如果导入元素的location属性值为空，则没有导入任何资源，直接返回  </span>
75        <span style="color: #0000ff;">if</span> (!<span style="color: #000000;">StringUtils.hasText(location)) {  
</span><span style="color: #800080;">76</span>            getReaderContext().error(<span style="color: #800000;">"</span><span style="color: #800000;">Resource location must not be empty</span><span style="color: #800000;">"</span><span style="color: #000000;">, ele);  
</span><span style="color: #800080;">77</span>            <span style="color: #0000ff;">return</span><span style="color: #000000;">;  
</span><span style="color: #800080;">78</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">79</span>        <span style="color: #008000;">//</span><span style="color: #008000;">使用系统变量值解析location属性值  </span>
<span style="color: #800080;">80</span>        location =<span style="color: #000000;"> SystemPropertyUtils.resolvePlaceholders(location);  
</span><span style="color: #800080;">81</span>        Set&lt;Resource&gt; actualResources = <span style="color: #0000ff;">new</span> LinkedHashSet&lt;Resource&gt;(<span style="color: #800080;">4</span><span style="color: #000000;">);  
</span><span style="color: #800080;">82        </span><span style="color: #008000;">//</span><span style="color: #008000;">标识给定的导入元素的location是否是绝对路径  </span>
<span style="color: #800080;">83</span>        boolean absoluteLocation = <span style="color: #0000ff;">false</span><span style="color: #000000;">;  
</span><span style="color: #800080;">84</span>        <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">85</span>            absoluteLocation = ResourcePatternUtils.isUrl(location) ||<span style="color: #000000;"> ResourceUtils.toURI(location).isAbsolute();  
</span><span style="color: #800080;">86</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">87</span>        <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (URISyntaxException ex) {  
</span><span style="color: #800080;">88</span>            <span style="color: #008000;">//</span><span style="color: #008000;">给定的导入元素的location不是绝对路径  </span>
<span style="color: #800080;">89</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">90</span>        <span style="color: #008000;">//</span><span style="color: #008000;">给定的导入元素的location是绝对路径  </span>
<span style="color: #800080;">91</span>        <span style="color: #0000ff;">if</span><span style="color: #000000;"> (absoluteLocation) {  
</span><span style="color: #800080;">92</span>            <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">93</span>                <span style="color: #008000;">//</span><span style="color: #008000;">使用资源读入器加载给定路径的Bean定义资源  </span>
<span style="color: #800080;">94</span>                <span style="color: #0000ff;">int</span> importCount =<span style="color: #000000;"> getReaderContext().getReader().loadBeanDefinitions(location, actualResources);  
</span><span style="color: #800080;">95</span>                <span style="color: #0000ff;">if</span><span style="color: #000000;"> (logger.isDebugEnabled()) {  
</span><span style="color: #800080;">96</span>                    logger.debug(<span style="color: #800000;">"</span><span style="color: #800000;">Imported </span><span style="color: #800000;">"</span> + importCount + <span style="color: #800000;">"</span><span style="color: #800000;"> bean definitions from URL location [</span><span style="color: #800000;">"</span> + location + <span style="color: #800000;">"</span><span style="color: #800000;">]</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">97</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">98</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">99</span>            <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (BeanDefinitionStoreException ex) {  
</span><span style="color: #800080;">100</span><span style="color: #000000;">                getReaderContext().error(  
</span><span style="color: #800080;">101</span>                        <span style="color: #800000;">"</span><span style="color: #800000;">Failed to import bean definitions from URL location [</span><span style="color: #800000;">"</span> + location + <span style="color: #800000;">"</span><span style="color: #800000;">]</span><span style="color: #800000;">"</span><span style="color: #000000;">, ele, ex);  
</span><span style="color: #800080;">102</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">103</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">104</span>        <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">105</span>            <span style="color: #008000;">//</span><span style="color: #008000;">给定的导入元素的location是相对路径  </span>
<span style="color: #800080;">106</span>            <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">107</span>                <span style="color: #0000ff;">int</span><span style="color: #000000;"> importCount;  
</span><span style="color: #800080;">108</span>                <span style="color: #008000;">//</span><span style="color: #008000;">将给定导入元素的location封装为相对路径资源  </span>
<span style="color: #800080;">109</span>                Resource relativeResource =<span style="color: #000000;"> getReaderContext().getResource().createRelative(location);  
</span><span style="color: #800080;">110</span>                <span style="color: #008000;">//</span><span style="color: #008000;">封装的相对路径资源存在  </span>
<span style="color: #800080;">111</span>                <span style="color: #0000ff;">if</span><span style="color: #000000;"> (relativeResource.exists()) {  
</span><span style="color: #800080;">112</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">使用资源读入器加载Bean定义资源  </span>
<span style="color: #800080;">113</span>                    importCount =<span style="color: #000000;"> getReaderContext().getReader().loadBeanDefinitions(relativeResource);  
</span><span style="color: #800080;">114</span><span style="color: #000000;">                    actualResources.add(relativeResource);  
</span><span style="color: #800080;">115</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">116</span>                <span style="color: #008000;">//</span><span style="color: #008000;">封装的相对路径资源不存在  </span>
<span style="color: #800080;">117</span>                <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">118</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">获取Spring IoC容器资源读入器的基本路径  </span>
<span style="color: #800080;">119</span>                    String baseLocation =<span style="color: #000000;"> getReaderContext().getResource().getURL().toString();  
</span><span style="color: #800080;">120</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">根据Spring IoC容器资源读入器的基本路径加载给定导入  </span>
<span style="color: #800080;">121</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">路径的资源  </span>
<span style="color: #800080;">122</span>                    importCount =<span style="color: #000000;"> getReaderContext().getReader().loadBeanDefinitions(  
</span><span style="color: #800080;">123</span><span style="color: #000000;">                            StringUtils.applyRelativePath(baseLocation, location), actualResources);  
</span><span style="color: #800080;">124</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">125</span>                <span style="color: #0000ff;">if</span><span style="color: #000000;"> (logger.isDebugEnabled()) {  
</span><span style="color: #800080;">126</span>                    logger.debug(<span style="color: #800000;">"</span><span style="color: #800000;">Imported </span><span style="color: #800000;">"</span> + importCount + <span style="color: #800000;">"</span><span style="color: #800000;"> bean definitions from relative location [</span><span style="color: #800000;">"</span> + location + <span style="color: #800000;">"</span><span style="color: #800000;">]</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">127</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">128</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">129</span>            <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IOException ex) {  
</span><span style="color: #800080;">130</span>                getReaderContext().error(<span style="color: #800000;">"</span><span style="color: #800000;">Failed to resolve current resource location</span><span style="color: #800000;">"</span><span style="color: #000000;">, ele, ex);  
</span><span style="color: #800080;">131</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">132</span>            <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (BeanDefinitionStoreException ex) {  
</span><span style="color: #800080;">133</span>                getReaderContext().error(<span style="color: #800000;">"</span><span style="color: #800000;">Failed to import bean definitions from relative location [</span><span style="color: #800000;">"</span> + location + <span style="color: #800000;">"</span><span style="color: #800000;">]</span><span style="color: #800000;">"</span><span style="color: #000000;">,  
</span><span style="color: #800080;">134</span><span style="color: #000000;">                        ele, ex);  
</span><span style="color: #800080;">135</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">136</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">137</span>        Resource[] actResArray = actualResources.toArray(<span style="color: #0000ff;">new</span><span style="color: #000000;"> Resource[actualResources.size()]);  
</span><span style="color: #800080;">138</span>        <span style="color: #008000;">//</span><span style="color: #008000;">在解析完&lt;Import&gt;元素之后，发送容器导入其他资源处理完成事件  </span>
<span style="color: #800080;">139</span><span style="color: #000000;">        getReaderContext().fireImportProcessed(location, actResArray, extractSource(ele));  
</span><span style="color: #800080;">140</span><span style="color: #000000;">    }  
</span><span style="color: #800080;">141</span>    <span style="color: #008000;">//</span><span style="color: #008000;">解析&lt;Alias&gt;别名元素，为Bean向Spring IoC容器注册别名  </span>
<span style="color: #800080;">142</span>    <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> processAliasRegistration(Element ele) {  
</span><span style="color: #800080;">143</span>        <span style="color: #008000;">//</span><span style="color: #008000;">获取&lt;Alias&gt;别名元素中name的属性值  </span>
144        String name =<span style="color: #000000;"> ele.getAttribute(NAME_ATTRIBUTE);  
</span><span style="color: #800080;">145        </span><span style="color: #008000;">//</span><span style="color: #008000;">获取&lt;Alias&gt;别名元素中alias的属性值  </span>
<span style="color: #800080;">146</span>        String alias =<span style="color: #000000;"> ele.getAttribute(ALIAS_ATTRIBUTE);  
</span><span style="color: #800080;">147</span>        boolean valid = <span style="color: #0000ff;">true</span><span style="color: #000000;">;  
</span><span style="color: #800080;">148</span>        <span style="color: #008000;">//</span><span style="color: #008000;">&lt;alias&gt;别名元素的name属性值为空  </span>
149        <span style="color: #0000ff;">if</span> (!<span style="color: #000000;">StringUtils.hasText(name)) {  
</span><span style="color: #800080;">150</span>            getReaderContext().error(<span style="color: #800000;">"</span><span style="color: #800000;">Name must not be empty</span><span style="color: #800000;">"</span><span style="color: #000000;">, ele);  
</span><span style="color: #800080;">151</span>            valid = <span style="color: #0000ff;">false</span><span style="color: #000000;">;  
</span><span style="color: #800080;">152</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">153</span>        <span style="color: #008000;">//</span><span style="color: #008000;">&lt;alias&gt;别名元素的alias属性值为空  </span>
<span style="color: #800080;">154</span>        <span style="color: #0000ff;">if</span> (!<span style="color: #000000;">StringUtils.hasText(alias)) {  
</span><span style="color: #800080;">155</span>            getReaderContext().error(<span style="color: #800000;">"</span><span style="color: #800000;">Alias must not be empty</span><span style="color: #800000;">"</span><span style="color: #000000;">, ele);  
</span><span style="color: #800080;">156</span>            valid = <span style="color: #0000ff;">false</span><span style="color: #000000;">;  
</span><span style="color: #800080;">157</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">158</span>        <span style="color: #0000ff;">if</span><span style="color: #000000;"> (valid) {  
</span><span style="color: #800080;">159</span>            <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">160</span>                <span style="color: #008000;">//</span><span style="color: #008000;">向容器的资源读入器注册别名  </span>
<span style="color: #800080;">161</span><span style="color: #000000;">                getReaderContext().getRegistry().registerAlias(name, alias);  
</span><span style="color: #800080;">162</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">163</span>            <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception ex) {  
</span><span style="color: #800080;">164</span>                getReaderContext().error(<span style="color: #800000;">"</span><span style="color: #800000;">Failed to register alias '</span><span style="color: #800000;">"</span> + alias +  
<span style="color: #800080;">165</span>                        <span style="color: #800000;">"</span><span style="color: #800000;">' for bean with name '</span><span style="color: #800000;">"</span> + name + <span style="color: #800000;">"</span><span style="color: #800000;">'</span><span style="color: #800000;">"</span><span style="color: #000000;">, ele, ex);  
</span><span style="color: #800080;">166</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">167</span>            <span style="color: #008000;">//</span><span style="color: #008000;">在解析完&lt;Alias&gt;元素之后，发送容器别名处理完成事件  </span>
<span style="color: #800080;">168</span><span style="color: #000000;">            getReaderContext().fireAliasRegistered(name, alias, extractSource(ele));  
</span><span style="color: #800080;">169</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">170</span><span style="color: #000000;">    }  
</span><span style="color: #800080;">171</span>    <span style="color: #008000;">//</span><span style="color: #008000;">解析Bean定义资源Document对象的普通元素  </span>
<span style="color: #800080;">172</span>    <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span> processBeanDefinition(Element ele, BeanDefinitionParserDelegate <span style="color: #0000ff;">delegate</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">173</span>        <span style="color: #008000;">//</span><span style="color: #008000;"> BeanDefinitionHolder是对BeanDefinition的封装，即Bean定义的封装类  </span>
<span style="color: #800080;">174        </span><span style="color: #008000;">//</span><span style="color: #008000;">对Document对象中&lt;Bean&gt;元素的解析由BeanDefinitionParserDelegate实现  BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);  </span>
<span style="color: #800080;">175</span>        <span style="color: #0000ff;">if</span> (bdHolder != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">176</span>            bdHolder = <span style="color: #0000ff;">delegate</span><span style="color: #000000;">.decorateBeanDefinitionIfRequired(ele, bdHolder);  
</span><span style="color: #800080;">177</span>            <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">178</span>               <span style="color: #008000;">//</span><span style="color: #008000;">向Spring IoC容器注册解析得到的Bean定义，这是Bean定义向IoC容器注册的入口            <br><span style="color: #000000;">BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());</span>  </span>
<span style="color: #800080;">179</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">180</span>            <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (BeanDefinitionStoreException ex) {  
</span><span style="color: #800080;">181</span>                getReaderContext().error(<span style="color: #800000;">"</span><span style="color: #800000;">Failed to register bean definition with name '</span><span style="color: #800000;">"</span> +  
<span style="color: #800080;">182</span>                        bdHolder.getBeanName() + <span style="color: #800000;">"</span><span style="color: #800000;">'</span><span style="color: #800000;">"</span><span style="color: #000000;">, ele, ex);  
</span><span style="color: #800080;">183</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">184</span>            <span style="color: #008000;">//</span><span style="color: #008000;">在完成向Spring IoC容器注册解析得到的Bean定义之后，发送注册事件  </span>
<span style="color: #800080;">185</span>            getReaderContext().fireComponentRegistered(<span style="color: #0000ff;">new</span><span style="color: #000000;"> BeanComponentDefinition(bdHolder));  
</span><span style="color: #800080;">186</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">187</span>    } </span></pre>
</div>
<p class="p0">&nbsp;</p>
<p>&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">通
过上述Spring&nbsp;IoC容器对载入的Bean定义Document解析可以看出，我们使用Spring时，在Spring配置文件中可以使
用&lt;Import&gt;元素来导入IoC容器所需要的其他资源，Spring&nbsp;IoC容器在解析时会首先将指定导入的资源加载进容器
中。使用&lt;Ailas&gt;别名时，Spring&nbsp;IoC容器首先将别名元素所定义的别名注册到容器中。</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">对
于既不是&lt;Import&gt;元素，又不是&lt;Alias&gt;元素的元素，即Spring配置文件中普通的&lt;Bean&gt;元素
的解析由BeanDefinitionParserDelegate类的parseBeanDefinitionElement方法来实现。</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">12、BeanDefinitionParserDelegate解析Bean定义资源文件中的&lt;Bean&gt;元素：</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">Bean
定义资源文件中的&lt;Import&gt;和&lt;Alias&gt;元素解析在
DefaultBeanDefinitionDocumentReader中已经完成，对Bean定义资源文件中使用最多的&lt;Bean&gt;元素
交由BeanDefinitionParserDelegate来解析，其解析实现的源码如下：</span></p>
<p class="p0">&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #800080;">1    </span><span style="color: #008000;">//</span><span style="color: #008000;">解析&lt;Bean&gt;元素的入口  </span>
2    <span style="color: #0000ff;">public</span><span style="color: #000000;"> BeanDefinitionHolder parseBeanDefinitionElement(Element ele) {  
</span><span style="color: #800080;">3</span>        <span style="color: #0000ff;">return</span> parseBeanDefinitionElement(ele, <span style="color: #0000ff;">null</span><span style="color: #000000;">);  
</span><span style="color: #800080;">4</span><span style="color: #000000;">    }  
</span><span style="color: #800080;">5    </span><span style="color: #008000;">//</span><span style="color: #008000;">解析Bean定义资源文件中的&lt;Bean&gt;元素，这个方法中主要处理&lt;Bean&gt;元素的id，name  </span>
<span style="color: #800080;">6    </span><span style="color: #008000;">//</span><span style="color: #008000;">和别名属性  </span>
<span style="color: #800080;">7</span>    <span style="color: #0000ff;">public</span><span style="color: #000000;"> BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) {  
</span><span style="color: #800080;">8</span>        <span style="color: #008000;">//</span><span style="color: #008000;">获取&lt;Bean&gt;元素中的id属性值  </span>
<span style="color: #800080;">9</span>        String id =<span style="color: #000000;"> ele.getAttribute(ID_ATTRIBUTE);  
</span><span style="color: #800080;">10</span>        <span style="color: #008000;">//</span><span style="color: #008000;">获取&lt;Bean&gt;元素中的name属性值  </span>
<span style="color: #800080;">11</span>        String nameAttr =<span style="color: #000000;"> ele.getAttribute(NAME_ATTRIBUTE);  
</span><span style="color: #800080;">12</span>        <span style="color: #808080;">///</span><span style="color: #008000;">/获取</span><span style="color: #808080;">&lt;Bean&gt;</span><span style="color: #008000;">元素中的alias属性值  </span>
<span style="color: #800080;">13</span>        List&lt;String&gt; aliases = <span style="color: #0000ff;">new</span> ArrayList&lt;String&gt;<span style="color: #000000;">();  
</span><span style="color: #800080;">14</span>        <span style="color: #008000;">//</span><span style="color: #008000;">将&lt;Bean&gt;元素中的所有name属性值存放到别名中  </span>
15        <span style="color: #0000ff;">if</span><span style="color: #000000;"> (StringUtils.hasLength(nameAttr)) {  
</span><span style="color: #800080;">16</span>            String[] nameArr =<span style="color: #000000;"> StringUtils.tokenizeToStringArray(nameAttr, BEAN_NAME_DELIMITERS);  
</span><span style="color: #800080;">17</span><span style="color: #000000;">            aliases.addAll(Arrays.asList(nameArr));  
</span><span style="color: #800080;">18</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">19</span>        String beanName =<span style="color: #000000;"> id;  
</span><span style="color: #800080;">20</span>        <span style="color: #008000;">//</span><span style="color: #008000;">如果&lt;Bean&gt;元素中没有配置id属性时，将别名中的第一个值赋值给beanName  </span>
<span style="color: #800080;">21</span>        <span style="color: #0000ff;">if</span> (!StringUtils.hasText(beanName) &amp;&amp; !<span style="color: #000000;">aliases.isEmpty()) {  
</span><span style="color: #800080;">22</span>            beanName = aliases.remove(<span style="color: #800080;">0</span><span style="color: #000000;">);  
</span><span style="color: #800080;">23</span>            <span style="color: #0000ff;">if</span><span style="color: #000000;"> (logger.isDebugEnabled()) {  
</span><span style="color: #800080;">24</span>                logger.debug(<span style="color: #800000;">"</span><span style="color: #800000;">No XML 'id' specified - using '</span><span style="color: #800000;">"</span> + beanName +  
<span style="color: #800080;">25</span>                        <span style="color: #800000;">"</span><span style="color: #800000;">' as bean name and </span><span style="color: #800000;">"</span> + aliases + <span style="color: #800000;">"</span><span style="color: #800000;"> as aliases</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">26</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">27</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">28</span>        <span style="color: #008000;">//</span><span style="color: #008000;">检查&lt;Bean&gt;元素所配置的id或者name的唯一性，containingBean标识&lt;Bean&gt;  </span>
<span style="color: #800080;">29</span>        <span style="color: #008000;">//</span><span style="color: #008000;">元素中是否包含子&lt;Bean&gt;元素  </span>
<span style="color: #800080;">30</span>        <span style="color: #0000ff;">if</span> (containingBean == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">31</span>            <span style="color: #008000;">//</span><span style="color: #008000;">检查&lt;Bean&gt;元素所配置的id、name或者别名是否重复  </span>
<span style="color: #800080;">32</span><span style="color: #000000;">            checkNameUniqueness(beanName, aliases, ele);  
</span><span style="color: #800080;">33</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">34</span>        <span style="color: #008000;">//</span><span style="color: #008000;">详细对&lt;Bean&gt;元素中配置的Bean定义进行解析的地方  </span>
<span style="color: #800080;">35</span>        AbstractBeanDefinition beanDefinition =<span style="color: #000000;"> parseBeanDefinitionElement(ele, beanName, containingBean);  
</span><span style="color: #800080;">36</span>        <span style="color: #0000ff;">if</span> (beanDefinition != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">37</span>            <span style="color: #0000ff;">if</span> (!<span style="color: #000000;">StringUtils.hasText(beanName)) {  
</span><span style="color: #800080;">38</span>                <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">39</span>                    <span style="color: #0000ff;">if</span> (containingBean != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">40                        </span><span style="color: #008000;">//</span><span style="color: #008000;">如果&lt;Bean&gt;元素中没有配置id、别名或者name，且没有包含子</span><span style="color: #008000;">//</span><span style="color: #008000;">&lt;Bean&gt;元素，为解析的Bean生成一个唯一beanName并注册  </span>
<span style="color: #800080;">41</span>                        beanName =<span style="color: #000000;"> BeanDefinitionReaderUtils.generateBeanName(  
</span><span style="color: #800080;">42</span>                                beanDefinition, <span style="color: #0000ff;">this</span>.readerContext.getRegistry(), <span style="color: #0000ff;">true</span><span style="color: #000000;">);  
</span><span style="color: #800080;">43</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">44</span>                    <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">45                        </span><span style="color: #008000;">//</span><span style="color: #008000;">如果&lt;Bean&gt;元素中没有配置id、别名或者name，且包含了子</span><span style="color: #008000;">//</span><span style="color: #008000;">&lt;Bean&gt;元素，为解析的Bean使用别名向IoC容器注册  </span>
<span style="color: #800080;">46</span>                        beanName = <span style="color: #0000ff;">this</span><span style="color: #000000;">.readerContext.generateBeanName(beanDefinition);  
</span><span style="color: #800080;">47</span>                        <span style="color: #008000;">//</span><span style="color: #008000;">为解析的Bean使用别名注册时，为了向后兼容                                    </span><span style="color: #008000;">//</span><span style="color: #008000;">Spring1.2/2.0，给别名添加类名后缀  </span>
<span style="color: #800080;">48</span>                        String beanClassName =<span style="color: #000000;"> beanDefinition.getBeanClassName();  
</span><span style="color: #800080;">49</span>                        <span style="color: #0000ff;">if</span> (beanClassName != <span style="color: #0000ff;">null</span> &amp;&amp;  
<span style="color: #800080;">50</span>                                beanName.startsWith(beanClassName) &amp;&amp; beanName.length() &gt; beanClassName.length() &amp;&amp;  
<span style="color: #800080;">51</span>                                !<span style="color: #0000ff;">this</span><span style="color: #000000;">.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {  
</span><span style="color: #800080;">52</span><span style="color: #000000;">                            aliases.add(beanClassName);  
</span><span style="color: #800080;">53</span><span style="color: #000000;">                        }  
</span><span style="color: #800080;">54</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">55</span>                    <span style="color: #0000ff;">if</span><span style="color: #000000;"> (logger.isDebugEnabled()) {  
</span><span style="color: #800080;">56</span>                        logger.debug(<span style="color: #800000;">"</span><span style="color: #800000;">Neither XML 'id' nor 'name' specified - </span><span style="color: #800000;">"</span> +  
<span style="color: #800080;">57</span>                                <span style="color: #800000;">"</span><span style="color: #800000;">using generated bean name [</span><span style="color: #800000;">"</span> + beanName + <span style="color: #800000;">"</span><span style="color: #800000;">]</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">58</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">59</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">60</span>                <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception ex) {  
</span><span style="color: #800080;">61</span><span style="color: #000000;">                    error(ex.getMessage(), ele);  
</span><span style="color: #800080;">62</span>                    <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">;  
</span><span style="color: #800080;">63</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">64</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">65</span>            String[] aliasesArray =<span style="color: #000000;"> StringUtils.toStringArray(aliases);  
</span><span style="color: #800080;">66</span>            <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> BeanDefinitionHolder(beanDefinition, beanName, aliasesArray);  
</span><span style="color: #800080;">67</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">68</span>        <span style="color: #008000;">//</span><span style="color: #008000;">当解析出错时，返回null  </span>
<span style="color: #800080;">69</span>        <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">;  
</span><span style="color: #800080;">70</span><span style="color: #000000;">    }  
</span><span style="color: #800080;">71    </span><span style="color: #008000;">//</span><span style="color: #008000;">详细对&lt;Bean&gt;元素中配置的Bean定义其他属性进行解析，由于上面的方法中已经对</span><span style="color: #008000;">//</span><span style="color: #008000;">Bean的id、name和别名等属性进行了处理，该方法中主要处理除这三个以外的其他属性数据  </span>
72    <span style="color: #0000ff;">public</span><span style="color: #000000;"> AbstractBeanDefinition parseBeanDefinitionElement(  
</span><span style="color: #800080;">73</span><span style="color: #000000;">            Element ele, String beanName, BeanDefinition containingBean) {  
</span><span style="color: #800080;">74</span>        <span style="color: #008000;">//</span><span style="color: #008000;">记录解析的&lt;Bean&gt;  </span>
<span style="color: #800080;">75</span>        <span style="color: #0000ff;">this</span>.parseState.push(<span style="color: #0000ff;">new</span><span style="color: #000000;"> BeanEntry(beanName));  
</span><span style="color: #800080;">76        </span><span style="color: #008000;">//</span><span style="color: #008000;">这里只读取&lt;Bean&gt;元素中配置的class名字，然后载入到BeanDefinition中去  </span>
<span style="color: #800080;">77</span>        <span style="color: #008000;">//</span><span style="color: #008000;">只是记录配置的class名字，不做实例化，对象的实例化在依赖注入时完成  </span>
<span style="color: #800080;">78</span>        String className = <span style="color: #0000ff;">null</span><span style="color: #000000;">;  
</span><span style="color: #800080;">79</span>        <span style="color: #0000ff;">if</span><span style="color: #000000;"> (ele.hasAttribute(CLASS_ATTRIBUTE)) {  
</span><span style="color: #800080;">80</span>            className =<span style="color: #000000;"> ele.getAttribute(CLASS_ATTRIBUTE).trim();  
</span><span style="color: #800080;">81</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">82</span>        <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">83</span>            String parent = <span style="color: #0000ff;">null</span><span style="color: #000000;">;  
</span><span style="color: #800080;">84</span>            <span style="color: #008000;">//</span><span style="color: #008000;">如果&lt;Bean&gt;元素中配置了parent属性，则获取parent属性的值  </span>
<span style="color: #800080;">85</span>            <span style="color: #0000ff;">if</span><span style="color: #000000;"> (ele.hasAttribute(PARENT_ATTRIBUTE)) {  
</span><span style="color: #800080;">86</span>                parent =<span style="color: #000000;"> ele.getAttribute(PARENT_ATTRIBUTE);  
</span><span style="color: #800080;">87</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">88</span>            <span style="color: #008000;">//</span><span style="color: #008000;">根据&lt;Bean&gt;元素配置的class名称和parent属性值创建BeanDefinition  </span>
<span style="color: #800080;">89</span>            <span style="color: #008000;">//</span><span style="color: #008000;">为载入Bean定义信息做准备  </span>
<span style="color: #800080;">90</span>            AbstractBeanDefinition bd =<span style="color: #000000;"> createBeanDefinition(className, parent);  
</span><span style="color: #800080;">91            </span><span style="color: #008000;">//</span><span style="color: #008000;">对当前的&lt;Bean&gt;元素中配置的一些属性进行解析和设置，如配置的单态(singleton)属性等  </span>
<span style="color: #800080;">92</span><span style="color: #000000;">            parseBeanDefinitionAttributes(ele, beanName, containingBean, bd);  
</span><span style="color: #800080;">93</span>            <span style="color: #008000;">//</span><span style="color: #008000;">为&lt;Bean&gt;元素解析的Bean设置description信息 bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT));  </span>
<span style="color: #800080;">94</span>            <span style="color: #008000;">//</span><span style="color: #008000;">对&lt;Bean&gt;元素的meta(元信息)属性解析  </span>
<span style="color: #800080;">95</span><span style="color: #000000;">            parseMetaElements(ele, bd);  
</span><span style="color: #800080;">96</span>            <span style="color: #008000;">//</span><span style="color: #008000;">对&lt;Bean&gt;元素的lookup-method属性解析  </span>
<span style="color: #800080;">97</span><span style="color: #000000;">            parseLookupOverrideSubElements(ele, bd.getMethodOverrides());  
</span><span style="color: #800080;">98</span>            <span style="color: #008000;">//</span><span style="color: #008000;">对&lt;Bean&gt;元素的replaced-method属性解析  </span>
<span style="color: #800080;">99</span><span style="color: #000000;">            parseReplacedMethodSubElements(ele, bd.getMethodOverrides());  
</span><span style="color: #800080;">100</span>            <span style="color: #008000;">//</span><span style="color: #008000;">解析&lt;Bean&gt;元素的构造方法设置  </span>
<span style="color: #800080;">101</span><span style="color: #000000;">            parseConstructorArgElements(ele, bd);  
</span><span style="color: #800080;">102</span>            <span style="color: #008000;">//</span><span style="color: #008000;">解析&lt;Bean&gt;元素的&lt;property&gt;设置  </span>
<span style="color: #800080;">103</span><span style="color: #000000;">            parsePropertyElements(ele, bd);  
</span><span style="color: #800080;">104</span>            <span style="color: #008000;">//</span><span style="color: #008000;">解析&lt;Bean&gt;元素的qualifier属性  </span>
<span style="color: #800080;">105</span><span style="color: #000000;">            parseQualifierElements(ele, bd);  
</span><span style="color: #800080;">106</span>            <span style="color: #008000;">//</span><span style="color: #008000;">为当前解析的Bean设置所需的资源和依赖对象  </span>
<span style="color: #800080;">107</span>            bd.setResource(<span style="color: #0000ff;">this</span><span style="color: #000000;">.readerContext.getResource());  
</span><span style="color: #800080;">108</span><span style="color: #000000;">            bd.setSource(extractSource(ele));  
</span><span style="color: #800080;">109</span>            <span style="color: #0000ff;">return</span><span style="color: #000000;"> bd;  
</span><span style="color: #800080;">110</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">111</span>        <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (ClassNotFoundException ex) {  
</span><span style="color: #800080;">112</span>            error(<span style="color: #800000;">"</span><span style="color: #800000;">Bean class [</span><span style="color: #800000;">"</span> + className + <span style="color: #800000;">"</span><span style="color: #800000;">] not found</span><span style="color: #800000;">"</span><span style="color: #000000;">, ele, ex);  
</span><span style="color: #800080;">113</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">114</span>        <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (NoClassDefFoundError err) {  
</span><span style="color: #800080;">115</span>            error(<span style="color: #800000;">"</span><span style="color: #800000;">Class that bean class [</span><span style="color: #800000;">"</span> + className + <span style="color: #800000;">"</span><span style="color: #800000;">] depends on not found</span><span style="color: #800000;">"</span><span style="color: #000000;">, ele, err);  
</span><span style="color: #800080;">116</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">117</span>        <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Throwable ex) {  
</span><span style="color: #800080;">118</span>            error(<span style="color: #800000;">"</span><span style="color: #800000;">Unexpected failure during bean definition parsing</span><span style="color: #800000;">"</span><span style="color: #000000;">, ele, ex);  
</span><span style="color: #800080;">119</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">120</span>        <span style="color: #0000ff;">finally</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">121</span>            <span style="color: #0000ff;">this</span><span style="color: #000000;">.parseState.pop();  
</span><span style="color: #800080;">122</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">123</span>        <span style="color: #008000;">//</span><span style="color: #008000;">解析&lt;Bean&gt;元素出错时，返回null  </span>
<span style="color: #800080;">124</span>        <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">;  
</span><span style="color: #800080;">125</span>    } </span></pre>
</div>
<p class="p0">&nbsp;</p>
<p>&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">只要使用过Spring，对Spring配置文件比较熟悉的人，通过对上述源码的分析，就会明白我们在Spring配置文件中&lt;Bean&gt;元素的中配置的属性就是通过该方法解析和设置到Bean中去的。</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">注
意：在解析&lt;Bean&gt;元素过程中没有创建和实例化Bean对象，只是创建了Bean对象的定义类BeanDefinition，
将&lt;Bean&gt;元素中的配置信息设置到BeanDefinition中作为记录，当依赖注入时才使用这些记录信息创建和实例化具体的Bean
对象。</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">上
面方法中一些对一些配置如元信息(meta)、qualifier等的解析，我们在Spring中配置时使用的也不多，我们在使用Spring
的&lt;Bean&gt;元素时，配置最多的是&lt;property&gt;属性，因此我们下面继续分析源码，了解Bean的属性在解析时是如何设
置的。</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">13、BeanDefinitionParserDelegate解析&lt;property&gt;元素：</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">BeanDefinitionParserDelegate在解析&lt;Bean&gt;调用parsePropertyElements方法解析&lt;Bean&gt;元素中的&lt;property&gt;属性子元素，解析源码如下：</span></p>
<p class="p0">&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #800080;">1    </span><span style="color: #008000;">//</span><span style="color: #008000;">解析&lt;Bean&gt;元素中的&lt;property&gt;子元素  </span>
2    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> parsePropertyElements(Element beanEle, BeanDefinition bd) {  
</span><span style="color: #800080;">3</span>        <span style="color: #008000;">//</span><span style="color: #008000;">获取&lt;Bean&gt;元素中所有的子元素  </span>
4        NodeList nl =<span style="color: #000000;"> beanEle.getChildNodes();  
</span><span style="color: #800080;">5</span>        <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> i = <span style="color: #800080;">0</span>; i &lt; nl.getLength(); i++<span style="color: #000000;">) {  
</span><span style="color: #800080;">6</span>            Node node =<span style="color: #000000;"> nl.item(i);  
</span><span style="color: #800080;">7</span>            <span style="color: #008000;">//</span><span style="color: #008000;">如果子元素是&lt;property&gt;子元素，则调用解析&lt;property&gt;子元素方法解析  </span>
<span style="color: #800080;">8</span>            <span style="color: #0000ff;">if</span> (isCandidateElement(node) &amp;&amp;<span style="color: #000000;"> nodeNameEquals(node, PROPERTY_ELEMENT)) {  
</span><span style="color: #800080;">9</span><span style="color: #000000;">                parsePropertyElement((Element) node, bd);  
</span><span style="color: #800080;">10</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">11</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">12</span><span style="color: #000000;">    }  
</span><span style="color: #800080;">13    </span><span style="color: #008000;">//</span><span style="color: #008000;">解析&lt;property&gt;元素  </span>
14    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> parsePropertyElement(Element ele, BeanDefinition bd) {  
</span><span style="color: #800080;">15</span>        <span style="color: #008000;">//</span><span style="color: #008000;">获取&lt;property&gt;元素的名字   </span>
<span style="color: #800080;">16</span>        String propertyName =<span style="color: #000000;"> ele.getAttribute(NAME_ATTRIBUTE);  
</span><span style="color: #800080;">17</span>        <span style="color: #0000ff;">if</span> (!<span style="color: #000000;">StringUtils.hasLength(propertyName)) {  
</span><span style="color: #800080;">18</span>            error(<span style="color: #800000;">"</span><span style="color: #800000;">Tag 'property' must have a 'name' attribute</span><span style="color: #800000;">"</span><span style="color: #000000;">, ele);  
</span><span style="color: #800080;">19</span>            <span style="color: #0000ff;">return</span><span style="color: #000000;">;  
</span><span style="color: #800080;">20</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">21</span>        <span style="color: #0000ff;">this</span>.parseState.push(<span style="color: #0000ff;">new</span><span style="color: #000000;"> PropertyEntry(propertyName));  
</span><span style="color: #800080;">22</span>        <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">23</span>            <span style="color: #008000;">//</span><span style="color: #008000;">如果一个Bean中已经有同名的property存在，则不进行解析，直接返回。  </span>
<span style="color: #800080;">24</span>            <span style="color: #008000;">//</span><span style="color: #008000;">即如果在同一个Bean中配置同名的property，则只有第一个起作用  </span>
<span style="color: #800080;">25</span>            <span style="color: #0000ff;">if</span><span style="color: #000000;"> (bd.getPropertyValues().contains(propertyName)) {  
</span><span style="color: #800080;">26</span>                error(<span style="color: #800000;">"</span><span style="color: #800000;">Multiple 'property' definitions for property '</span><span style="color: #800000;">"</span> + propertyName + <span style="color: #800000;">"</span><span style="color: #800000;">'</span><span style="color: #800000;">"</span><span style="color: #000000;">, ele);  
</span><span style="color: #800080;">27</span>                <span style="color: #0000ff;">return</span><span style="color: #000000;">;  
</span><span style="color: #800080;">28</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">29</span>            <span style="color: #008000;">//</span><span style="color: #008000;">解析获取property的值  </span>
<span style="color: #800080;">30</span>            Object val =<span style="color: #000000;"> parsePropertyValue(ele, bd, propertyName);  
</span><span style="color: #800080;">31</span>            <span style="color: #008000;">//</span><span style="color: #008000;">根据property的名字和值创建property实例  </span>
<span style="color: #800080;">32</span>            PropertyValue pv = <span style="color: #0000ff;">new</span><span style="color: #000000;"> PropertyValue(propertyName, val);  
</span><span style="color: #800080;">33</span>            <span style="color: #008000;">//</span><span style="color: #008000;">解析&lt;property&gt;元素中的属性  </span>
<span style="color: #800080;">34</span><span style="color: #000000;">            parseMetaElements(ele, pv);  
</span><span style="color: #800080;">35</span><span style="color: #000000;">            pv.setSource(extractSource(ele));  
</span><span style="color: #800080;">36</span><span style="color: #000000;">            bd.getPropertyValues().addPropertyValue(pv);  
</span><span style="color: #800080;">37</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">38</span>        <span style="color: #0000ff;">finally</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">39</span>            <span style="color: #0000ff;">this</span><span style="color: #000000;">.parseState.pop();  
</span><span style="color: #800080;">40</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">41</span><span style="color: #000000;">    }  
</span><span style="color: #800080;">42    </span><span style="color: #008000;">//</span><span style="color: #008000;">解析获取property值  </span>
43    <span style="color: #0000ff;">public</span><span style="color: #000000;"> Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName) {  
</span><span style="color: #800080;">44</span>        String elementName = (propertyName != <span style="color: #0000ff;">null</span>) ?  
<span style="color: #800080;">45</span>                        <span style="color: #800000;">"</span><span style="color: #800000;">&lt;property&gt; element for property '</span><span style="color: #800000;">"</span> + propertyName + <span style="color: #800000;">"</span><span style="color: #800000;">'</span><span style="color: #800000;">"</span><span style="color: #000000;"> :  
</span><span style="color: #800080;">46</span>                        <span style="color: #800000;">"</span><span style="color: #800000;">&lt;constructor-arg&gt; element</span><span style="color: #800000;">"</span><span style="color: #000000;">;  
</span><span style="color: #800080;">47</span>        <span style="color: #008000;">//</span><span style="color: #008000;">获取&lt;property&gt;的所有子元素，只能是其中一种类型:ref,value,list等  </span>
<span style="color: #800080;">48</span>        NodeList nl =<span style="color: #000000;"> ele.getChildNodes();  
</span><span style="color: #800080;">49</span>        Element subElement = <span style="color: #0000ff;">null</span><span style="color: #000000;">;  
</span><span style="color: #800080;">50</span>        <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> i = <span style="color: #800080;">0</span>; i &lt; nl.getLength(); i++<span style="color: #000000;">) {  
</span><span style="color: #800080;">51</span>            Node node =<span style="color: #000000;"> nl.item(i);  
</span><span style="color: #800080;">52</span>            <span style="color: #008000;">//</span><span style="color: #008000;">子元素不是description和meta属性  </span>
<span style="color: #800080;">53</span>            <span style="color: #0000ff;">if</span> (node instanceof Element &amp;&amp; !nodeNameEquals(node, DESCRIPTION_ELEMENT) &amp;&amp;  
<span style="color: #800080;">54</span>                    !<span style="color: #000000;">nodeNameEquals(node, META_ELEMENT)) {  
</span><span style="color: #800080;">55</span>                <span style="color: #0000ff;">if</span> (subElement != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">56</span>                    error(elementName + <span style="color: #800000;">"</span><span style="color: #800000;"> must not contain more than one sub-element</span><span style="color: #800000;">"</span><span style="color: #000000;">, ele);  
</span><span style="color: #800080;">57</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">58</span>                <span style="color: #0000ff;">else</span> {<span style="color: #008000;">//</span><span style="color: #008000;">当前&lt;property&gt;元素包含有子元素  </span>
<span style="color: #800080;">59</span>                    subElement =<span style="color: #000000;"> (Element) node;  
</span><span style="color: #800080;">60</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">61</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">62</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">63</span>        <span style="color: #008000;">//</span><span style="color: #008000;">判断property的属性值是ref还是value，不允许既是ref又是value  </span>
<span style="color: #800080;">64</span>        boolean hasRefAttribute =<span style="color: #000000;"> ele.hasAttribute(REF_ATTRIBUTE);  
</span><span style="color: #800080;">65</span>        boolean hasValueAttribute =<span style="color: #000000;"> ele.hasAttribute(VALUE_ATTRIBUTE);  
</span><span style="color: #800080;">66</span>        <span style="color: #0000ff;">if</span> ((hasRefAttribute &amp;&amp; hasValueAttribute) ||  
<span style="color: #800080;">67</span>                ((hasRefAttribute || hasValueAttribute) &amp;&amp; subElement != <span style="color: #0000ff;">null</span><span style="color: #000000;">)) {  
</span><span style="color: #800080;">68</span>            error(elementName +  
<span style="color: #800080;">69</span>                    <span style="color: #800000;">"</span><span style="color: #800000;"> is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element</span><span style="color: #800000;">"</span><span style="color: #000000;">, ele);  
</span><span style="color: #800080;">70</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">71</span>        <span style="color: #008000;">//</span><span style="color: #008000;">如果属性是ref，创建一个ref的数据对象RuntimeBeanReference，这个对象  </span>
<span style="color: #800080;">72        </span><span style="color: #008000;">//</span><span style="color: #008000;">封装了ref信息  </span>
<span style="color: #800080;">73</span>        <span style="color: #0000ff;">if</span><span style="color: #000000;"> (hasRefAttribute) {  
</span><span style="color: #800080;">74</span>            String refName =<span style="color: #000000;"> ele.getAttribute(REF_ATTRIBUTE);  
</span><span style="color: #800080;">75</span>            <span style="color: #0000ff;">if</span> (!<span style="color: #000000;">StringUtils.hasText(refName)) {  
</span><span style="color: #800080;">76</span>                error(elementName + <span style="color: #800000;">"</span><span style="color: #800000;"> contains empty 'ref' attribute</span><span style="color: #800000;">"</span><span style="color: #000000;">, ele);  
</span><span style="color: #800080;">77</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">78</span>            <span style="color: #008000;">//</span><span style="color: #008000;">一个指向运行时所依赖对象的引用  </span>
<span style="color: #800080;">79</span>            RuntimeBeanReference <span style="color: #0000ff;">ref</span> = <span style="color: #0000ff;">new</span><span style="color: #000000;"> RuntimeBeanReference(refName);  
</span><span style="color: #800080;">80            </span><span style="color: #008000;">//</span><span style="color: #008000;">设置这个ref的数据对象是被当前的property对象所引用  </span>
<span style="color: #800080;">81</span>            <span style="color: #0000ff;">ref</span><span style="color: #000000;">.setSource(extractSource(ele));  
</span><span style="color: #800080;">82</span>            <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">ref</span><span style="color: #000000;">;  
</span><span style="color: #800080;">83</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">84         </span><span style="color: #008000;">//</span><span style="color: #008000;">如果属性是value，创建一个value的数据对象TypedStringValue，这个对象  </span>
<span style="color: #800080;">85        </span><span style="color: #008000;">//</span><span style="color: #008000;">封装了value信息  </span>
<span style="color: #800080;">86</span>        <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span><span style="color: #000000;"> (hasValueAttribute) {  
</span><span style="color: #800080;">87</span>            <span style="color: #008000;">//</span><span style="color: #008000;">一个持有String类型值的对象  </span>
<span style="color: #800080;">88</span>            TypedStringValue valueHolder = <span style="color: #0000ff;">new</span><span style="color: #000000;"> TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE));  
</span><span style="color: #800080;">89            </span><span style="color: #008000;">//</span><span style="color: #008000;">设置这个value数据对象是被当前的property对象所引用  </span>
<span style="color: #800080;">90</span><span style="color: #000000;">            valueHolder.setSource(extractSource(ele));  
</span><span style="color: #800080;">91</span>            <span style="color: #0000ff;">return</span><span style="color: #000000;"> valueHolder;  
</span><span style="color: #800080;">92</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">93</span>        <span style="color: #008000;">//</span><span style="color: #008000;">如果当前&lt;property&gt;元素还有子元素  </span>
<span style="color: #800080;">94</span>        <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> (subElement != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">95</span>            <span style="color: #008000;">//</span><span style="color: #008000;">解析&lt;property&gt;的子元素  </span>
<span style="color: #800080;">96</span>            <span style="color: #0000ff;">return</span><span style="color: #000000;"> parsePropertySubElement(subElement, bd);  
</span><span style="color: #800080;">97</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">98</span>        <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">99</span>            <span style="color: #008000;">//</span><span style="color: #008000;">propery属性中既不是ref，也不是value属性，解析出错返回null        error(elementName + " must specify a ref or value", ele);  </span>
<span style="color: #800080;">100</span>            <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">;  
</span><span style="color: #800080;">101</span><span style="color: #000000;">        }  
    } </span></span></pre>
</div>
<p class="p0">&nbsp;</p>
<p>&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">通过对上述源码的分析，我们可以了解在Spring配置文件中，&lt;Bean&gt;元素中&lt;property&gt;元素的相关配置是如何处理的：</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">a.&nbsp;ref被封装为指向依赖对象一个引用。</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">b.value配置都会封装成一个字符串类型的对象。</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">c.ref和value都通过“解析的数据类型属性值.setSource(extractSource(ele));”方法将属性值/引用与所引用的属性关联起来。</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">在方法的最后对于&lt;property&gt;元素的子元素通过parsePropertySubElement&nbsp;方法解析，我们继续分析该方法的源码，了解其解析过程。</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">14、解析&lt;property&gt;元素的子元素：</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">在BeanDefinitionParserDelegate类中的parsePropertySubElement方法对&lt;property&gt;中的子元素解析，源码如下：</span></p>
<p class="p0">&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #800080;">1    </span><span style="color: #008000;">//</span><span style="color: #008000;">解析&lt;property&gt;元素中ref,value或者集合等子元素  </span>
2    <span style="color: #0000ff;">public</span><span style="color: #000000;"> Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType) {  
</span><span style="color: #800080;">3        </span><span style="color: #008000;">//</span><span style="color: #008000;">如果&lt;property&gt;没有使用Spring默认的命名空间，则使用用户自定义的规则解析</span><span style="color: #008000;">//</span><span style="color: #008000;">内嵌元素  </span>
<span style="color: #800080;">4</span>        <span style="color: #0000ff;">if</span> (!<span style="color: #000000;">isDefaultNamespace(ele)) {  
</span><span style="color: #800080;">5</span>            <span style="color: #0000ff;">return</span><span style="color: #000000;"> parseNestedCustomElement(ele, bd);  
</span><span style="color: #800080;">6</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">7</span>        <span style="color: #008000;">//</span><span style="color: #008000;">如果子元素是bean，则使用解析&lt;Bean&gt;元素的方法解析  </span>
<span style="color: #800080;">8</span>        <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span><span style="color: #000000;"> (nodeNameEquals(ele, BEAN_ELEMENT)) {  
</span><span style="color: #800080;">9</span>            BeanDefinitionHolder nestedBd =<span style="color: #000000;"> parseBeanDefinitionElement(ele, bd);  
</span><span style="color: #800080;">10</span>            <span style="color: #0000ff;">if</span> (nestedBd != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">11</span>                nestedBd =<span style="color: #000000;"> decorateBeanDefinitionIfRequired(ele, nestedBd, bd);  
</span><span style="color: #800080;">12</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">13</span>            <span style="color: #0000ff;">return</span><span style="color: #000000;"> nestedBd;  
</span><span style="color: #800080;">14</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">15</span>        <span style="color: #008000;">//</span><span style="color: #008000;">如果子元素是ref，ref中只能有以下3个属性：bean、local、parent  </span>
<span style="color: #800080;">16</span>        <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span><span style="color: #000000;"> (nodeNameEquals(ele, REF_ELEMENT)) {  
</span><span style="color: #800080;">17</span>            <span style="color: #008000;">//</span><span style="color: #008000;">获取&lt;property&gt;元素中的bean属性值，引用其他解析的Bean的名称  </span>
<span style="color: #800080;">18</span>            <span style="color: #008000;">//</span><span style="color: #008000;">可以不再同一个Spring配置文件中，具体请参考Spring对ref的配置规则  </span>
<span style="color: #800080;">19</span>            String refName =<span style="color: #000000;"> ele.getAttribute(BEAN_REF_ATTRIBUTE);  
</span><span style="color: #800080;">20</span>            boolean toParent = <span style="color: #0000ff;">false</span><span style="color: #000000;">;  
</span><span style="color: #800080;">21</span>            <span style="color: #0000ff;">if</span> (!<span style="color: #000000;">StringUtils.hasLength(refName)) {  
</span><span style="color: #800080;">22                 </span><span style="color: #008000;">//</span><span style="color: #008000;">获取&lt;property&gt;元素中的local属性值，引用同一个Xml文件中配置  </span>
<span style="color: #800080;">23                 </span><span style="color: #008000;">//</span><span style="color: #008000;">的Bean的id，local和ref不同，local只能引用同一个配置文件中的Bean  </span>
<span style="color: #800080;">24</span>                refName =<span style="color: #000000;"> ele.getAttribute(LOCAL_REF_ATTRIBUTE);  
</span><span style="color: #800080;">25</span>                <span style="color: #0000ff;">if</span> (!<span style="color: #000000;">StringUtils.hasLength(refName)) {  
</span><span style="color: #800080;">26</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">获取&lt;property&gt;元素中parent属性值，引用父级容器中的Bean  </span>
<span style="color: #800080;">27</span>                    refName =<span style="color: #000000;"> ele.getAttribute(PARENT_REF_ATTRIBUTE);  
</span><span style="color: #800080;">28</span>                    toParent = <span style="color: #0000ff;">true</span><span style="color: #000000;">;  
</span><span style="color: #800080;">29</span>                    <span style="color: #0000ff;">if</span> (!<span style="color: #000000;">StringUtils.hasLength(refName)) {  
</span><span style="color: #800080;">30</span>                        error(<span style="color: #800000;">"</span><span style="color: #800000;">'bean', 'local' or 'parent' is required for &lt;ref&gt; element</span><span style="color: #800000;">"</span><span style="color: #000000;">, ele);  
</span><span style="color: #800080;">31</span>                        <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">;  
</span><span style="color: #800080;">32</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">33</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">34</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">35</span>            <span style="color: #008000;">//</span><span style="color: #008000;">没有配置ref的目标属性值  </span>
<span style="color: #800080;">36</span>            <span style="color: #0000ff;">if</span> (!<span style="color: #000000;">StringUtils.hasText(refName)) {  
</span><span style="color: #800080;">37</span>                error(<span style="color: #800000;">"</span><span style="color: #800000;">&lt;ref&gt; element contains empty target attribute</span><span style="color: #800000;">"</span><span style="color: #000000;">, ele);  
</span><span style="color: #800080;">38</span>                <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">;  
</span><span style="color: #800080;">39</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">40</span>            <span style="color: #008000;">//</span><span style="color: #008000;">创建ref类型数据，指向被引用的对象  </span>
<span style="color: #800080;">41</span>            RuntimeBeanReference <span style="color: #0000ff;">ref</span> = <span style="color: #0000ff;">new</span><span style="color: #000000;"> RuntimeBeanReference(refName, toParent);  
</span><span style="color: #800080;">42</span>            <span style="color: #008000;">//</span><span style="color: #008000;">设置引用类型值是被当前子元素所引用  </span>
<span style="color: #800080;">43</span>            <span style="color: #0000ff;">ref</span><span style="color: #000000;">.setSource(extractSource(ele));  
</span><span style="color: #800080;">44</span>            <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">ref</span><span style="color: #000000;">;  
</span><span style="color: #800080;">45</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">46</span>        <span style="color: #008000;">//</span><span style="color: #008000;">如果子元素是&lt;idref&gt;，使用解析ref元素的方法解析  </span>
<span style="color: #800080;">47</span>        <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span><span style="color: #000000;"> (nodeNameEquals(ele, IDREF_ELEMENT)) {  
</span><span style="color: #800080;">48</span>            <span style="color: #0000ff;">return</span><span style="color: #000000;"> parseIdRefElement(ele);  
</span><span style="color: #800080;">49</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">50</span>        <span style="color: #008000;">//</span><span style="color: #008000;">如果子元素是&lt;value&gt;，使用解析value元素的方法解析  </span>
<span style="color: #800080;">51</span>        <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span><span style="color: #000000;"> (nodeNameEquals(ele, VALUE_ELEMENT)) {  
</span><span style="color: #800080;">52</span>            <span style="color: #0000ff;">return</span><span style="color: #000000;"> parseValueElement(ele, defaultValueType);  
</span><span style="color: #800080;">53</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">54</span>        <span style="color: #008000;">//</span><span style="color: #008000;">如果子元素是null，为&lt;property&gt;设置一个封装null值的字符串数据  </span>
<span style="color: #800080;">55</span>        <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span><span style="color: #000000;"> (nodeNameEquals(ele, NULL_ELEMENT)) {  
</span><span style="color: #800080;">56</span>            TypedStringValue nullHolder = <span style="color: #0000ff;">new</span> TypedStringValue(<span style="color: #0000ff;">null</span><span style="color: #000000;">);  
</span><span style="color: #800080;">57</span><span style="color: #000000;">            nullHolder.setSource(extractSource(ele));  
</span><span style="color: #800080;">58</span>            <span style="color: #0000ff;">return</span><span style="color: #000000;"> nullHolder;  
</span><span style="color: #800080;">59</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">60</span>        <span style="color: #008000;">//</span><span style="color: #008000;">如果子元素是&lt;array&gt;，使用解析array集合子元素的方法解析  </span>
<span style="color: #800080;">61</span>        <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span><span style="color: #000000;"> (nodeNameEquals(ele, ARRAY_ELEMENT)) {  
</span><span style="color: #800080;">62</span>            <span style="color: #0000ff;">return</span><span style="color: #000000;"> parseArrayElement(ele, bd);  
</span><span style="color: #800080;">63</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">64</span>        <span style="color: #008000;">//</span><span style="color: #008000;">如果子元素是&lt;list&gt;，使用解析list集合子元素的方法解析  </span>
<span style="color: #800080;">65</span>        <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span><span style="color: #000000;"> (nodeNameEquals(ele, LIST_ELEMENT)) {  
</span><span style="color: #800080;">66</span>            <span style="color: #0000ff;">return</span><span style="color: #000000;"> parseListElement(ele, bd);  
</span><span style="color: #800080;">67</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">68</span>        <span style="color: #008000;">//</span><span style="color: #008000;">如果子元素是&lt;set&gt;，使用解析set集合子元素的方法解析  </span>
<span style="color: #800080;">69</span>        <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span><span style="color: #000000;"> (nodeNameEquals(ele, SET_ELEMENT)) {  
</span><span style="color: #800080;">70</span>            <span style="color: #0000ff;">return</span><span style="color: #000000;"> parseSetElement(ele, bd);  
</span><span style="color: #800080;">71</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">72</span>        <span style="color: #008000;">//</span><span style="color: #008000;">如果子元素是&lt;map&gt;，使用解析map集合子元素的方法解析  </span>
<span style="color: #800080;">73</span>        <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span><span style="color: #000000;"> (nodeNameEquals(ele, MAP_ELEMENT)) {  
</span><span style="color: #800080;">74</span>            <span style="color: #0000ff;">return</span><span style="color: #000000;"> parseMapElement(ele, bd);  
</span><span style="color: #800080;">75</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">76</span>        <span style="color: #008000;">//</span><span style="color: #008000;">如果子元素是&lt;props&gt;，使用解析props集合子元素的方法解析  </span>
<span style="color: #800080;">77</span>        <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span><span style="color: #000000;"> (nodeNameEquals(ele, PROPS_ELEMENT)) {  
</span><span style="color: #800080;">78</span>            <span style="color: #0000ff;">return</span><span style="color: #000000;"> parsePropsElement(ele);  
</span><span style="color: #800080;">79</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">80</span>        <span style="color: #008000;">//</span><span style="color: #008000;">既不是ref，又不是value，也不是集合，则子元素配置错误，返回null  </span>
<span style="color: #800080;">81</span>        <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">82</span>            error(<span style="color: #800000;">"</span><span style="color: #800000;">Unknown property sub-element: [</span><span style="color: #800000;">"</span> + ele.getNodeName() + <span style="color: #800000;">"</span><span style="color: #800000;">]</span><span style="color: #800000;">"</span><span style="color: #000000;">, ele);  
</span><span style="color: #800080;">83</span>            <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">;  
</span><span style="color: #800080;">84</span><span style="color: #000000;">        }  
    }  </span></span></pre>
</div>
<p class="p0">&nbsp;</p>
<p>&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">通
过上述源码分析，我们明白了在Spring配置文件中，对&lt;property&gt;元素中配置的Array、List、Set、Map、Prop
等各种集合子元素的都通过上述方法解析，生成对应的数据对象，比如ManagedList、ManagedArray、ManagedSet等，这些
Managed类是Spring对象BeanDefiniton的数据封装，对集合数据类型的具体解析有各自的解析方法实现，解析方法的命名非常规范，一
目了然，我们对&lt;list&gt;集合元素的解析方法进行源码分析，了解其实现过程。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">15、解析&lt;list&gt;子元素：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">在BeanDefinitionParserDelegate类中的parseListElement方法就是具体实现解析&lt;property&gt;元素中的&lt;list&gt;集合子元素，源码如下：</span></p>
<p class="p0">&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #800080;">1    </span><span style="color: #008000;">//</span><span style="color: #008000;">解析&lt;list&gt;集合子元素  </span>
2    <span style="color: #0000ff;">public</span><span style="color: #000000;"> List parseListElement(Element collectionEle, BeanDefinition bd) {  
</span><span style="color: #800080;">3</span>        <span style="color: #008000;">//</span><span style="color: #008000;">获取&lt;list&gt;元素中的value-type属性，即获取集合元素的数据类型  </span>
<span style="color: #800080;">4</span>        String defaultElementType =<span style="color: #000000;"> collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE);  
</span><span style="color: #800080;">5</span>        <span style="color: #008000;">//</span><span style="color: #008000;">获取&lt;list&gt;集合元素中的所有子节点  </span>
<span style="color: #800080;">6</span>        NodeList nl =<span style="color: #000000;"> collectionEle.getChildNodes();  
</span><span style="color: #800080;">7</span>        <span style="color: #008000;">//</span><span style="color: #008000;">Spring中将List封装为ManagedList  </span>
<span style="color: #800080;">8</span>        ManagedList&lt;Object&gt; target = <span style="color: #0000ff;">new</span> ManagedList&lt;Object&gt;<span style="color: #000000;">(nl.getLength());  
</span><span style="color: #800080;">9</span><span style="color: #000000;">        target.setSource(extractSource(collectionEle));  
</span><span style="color: #800080;">10</span>        <span style="color: #008000;">//</span><span style="color: #008000;">设置集合目标数据类型  </span>
<span style="color: #800080;">11</span><span style="color: #000000;">        target.setElementTypeName(defaultElementType);  
</span><span style="color: #800080;">12</span><span style="color: #000000;">        target.setMergeEnabled(parseMergeAttribute(collectionEle));  
</span><span style="color: #800080;">13</span>        <span style="color: #008000;">//</span><span style="color: #008000;">具体的&lt;list&gt;元素解析  </span>
<span style="color: #800080;">14</span><span style="color: #000000;">        parseCollectionElements(nl, target, bd, defaultElementType);  
</span><span style="color: #800080;">15</span>        <span style="color: #0000ff;">return</span><span style="color: #000000;"> target;  
</span><span style="color: #800080;">16</span><span style="color: #000000;">    }   
</span><span style="color: #800080;">17    </span><span style="color: #008000;">//</span><span style="color: #008000;">具体解析&lt;list&gt;集合元素，&lt;array&gt;、&lt;list&gt;和&lt;set&gt;都使用该方法解析  </span>
18    <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> parseCollectionElements(  
</span><span style="color: #800080;">19</span>            NodeList elementNodes, Collection&lt;Object&gt;<span style="color: #000000;"> target, BeanDefinition bd, String defaultElementType) {  
</span><span style="color: #800080;">20</span>        <span style="color: #008000;">//</span><span style="color: #008000;">遍历集合所有节点  </span>
<span style="color: #800080;">21</span>        <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> i = <span style="color: #800080;">0</span>; i &lt; elementNodes.getLength(); i++<span style="color: #000000;">) {  
</span><span style="color: #800080;">22</span>            Node node =<span style="color: #000000;"> elementNodes.item(i);  
</span><span style="color: #800080;">23</span>            <span style="color: #008000;">//</span><span style="color: #008000;">节点不是description节点  </span>
<span style="color: #800080;">24</span>            <span style="color: #0000ff;">if</span> (node instanceof Element &amp;&amp; !<span style="color: #000000;">nodeNameEquals(node, DESCRIPTION_ELEMENT)) {  
</span><span style="color: #800080;">25</span>                <span style="color: #008000;">//</span><span style="color: #008000;">将解析的元素加入集合中，递归调用下一个子元素  </span>
<span style="color: #800080;">26</span><span style="color: #000000;">                target.add(parsePropertySubElement((Element) node, bd, defaultElementType));  
</span><span style="color: #800080;">27</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">28</span><span style="color: #000000;">        }  
    } </span></span></pre>
</div>
<p class="p0">&nbsp;</p>
<p>&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">经
过对Spring&nbsp;Bean定义资源文件转换的Document对象中的元素层层解析，Spring&nbsp;IoC现在已经将XML形式定
义的Bean定义资源文件转换为Spring&nbsp;IoC所识别的数据结构——BeanDefinition，它是Bean定义资源文件中配置的
POJO对象在Spring&nbsp;IoC容器中的映射，我们可以通过AbstractBeanDefinition为入口，荣IoC容器进行索引、
查询和操作。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">通
过Spring&nbsp;IoC容器对Bean定义资源的解析后，IoC容器大致完成了管理Bean对象的准备工作，即初始化过程，但是最为重要的依赖
注入还没有发生，现在在IoC容器中BeanDefinition存储的只是一些静态信息，接下来需要向容器注册Bean定义信息才能全部完成IoC容器
的初始化过程</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">16、解析过后的BeanDefinition在IoC容器中的注册：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">让
我们继续跟踪程序的执行顺序，接下来会到我们第3步中分析DefaultBeanDefinitionDocumentReader对Bean定义转换的
Document对象解析的流程中，在其parseDefaultElement方法中完成对Document对象的解析后得到封装
BeanDefinition的BeanDefinitionHold对象，然后调用BeanDefinitionReaderUtils的
registerBeanDefinition方法向IoC容器注册解析的Bean，BeanDefinitionReaderUtils的注册的源码如
下：</span></p>
<p class="p0">&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #008000;">//</span><span style="color: #008000;">将解析的BeanDefinitionHold注册到容器中 </span>
<span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> registerBeanDefinition(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)  
    throws BeanDefinitionStoreException {  
        </span><span style="color: #008000;">//</span><span style="color: #008000;">获取解析的BeanDefinition的名称</span>
         String beanName =<span style="color: #000000;"> definitionHolder.getBeanName();  
        </span><span style="color: #008000;">//</span><span style="color: #008000;">向IoC容器注册BeanDefinition </span>
<span style="color: #000000;">        registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());  
        </span><span style="color: #008000;">//</span><span style="color: #008000;">如果解析的BeanDefinition有别名，向容器为其注册别名  </span>
         String[] aliases =<span style="color: #000000;"> definitionHolder.getAliases();  
        </span><span style="color: #0000ff;">if</span> (aliases != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
            </span><span style="color: #0000ff;">for</span><span style="color: #000000;"> (String aliase : aliases) {  
                registry.registerAlias(beanName, aliase);  
            }  
        }  
}</span></span></pre>
</div>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">当调用BeanDefinitionReaderUtils向IoC容器注册解析的BeanDefinition时，真正完成注册功能的是DefaultListableBeanFactory。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">17、DefaultListableBeanFactory向IoC容器注册解析后的BeanDefinition：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">DefaultListableBeanFactory中使用一个HashMap的集合对象存放IoC容器中注册解析的BeanDefinition，向IoC容器注册的主要源码如下：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;"><img src="Spring%EF%BC%9A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BBSpring%20IOC%E5%8E%9F%E7%90%86_files/172308561595278.png" alt=""></span></p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #800080;">1    </span><span style="color: #008000;">//</span><span style="color: #008000;">存储注册的俄BeanDefinition  </span>
2    <span style="color: #0000ff;">private</span> final Map&lt;String, BeanDefinition&gt; beanDefinitionMap = <span style="color: #0000ff;">new</span> ConcurrentHashMap&lt;String, BeanDefinition&gt;<span style="color: #000000;">();  
</span><span style="color: #800080;">3    </span><span style="color: #008000;">//</span><span style="color: #008000;">向IoC容器注册解析的BeanDefiniton  </span>
4    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> registerBeanDefinition(String beanName, BeanDefinition beanDefinition)  
</span><span style="color: #800080;">5</span><span style="color: #000000;">            throws BeanDefinitionStoreException {  
</span><span style="color: #800080;">6</span>        Assert.hasText(beanName, <span style="color: #800000;">"</span><span style="color: #800000;">Bean name must not be empty</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">7</span>        Assert.notNull(beanDefinition, <span style="color: #800000;">"</span><span style="color: #800000;">BeanDefinition must not be null</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">8</span>        <span style="color: #008000;">//</span><span style="color: #008000;">校验解析的BeanDefiniton  </span>
<span style="color: #800080;">9</span>        <span style="color: #0000ff;">if</span><span style="color: #000000;"> (beanDefinition instanceof AbstractBeanDefinition) {  
</span><span style="color: #800080;">10</span>            <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">11</span><span style="color: #000000;">                ((AbstractBeanDefinition) beanDefinition).validate();  
</span><span style="color: #800080;">12</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">13</span>            <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (BeanDefinitionValidationException ex) {  
</span><span style="color: #800080;">14</span>                <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,  
</span><span style="color: #800080;">15</span>                        <span style="color: #800000;">"</span><span style="color: #800000;">Validation of bean definition failed</span><span style="color: #800000;">"</span><span style="color: #000000;">, ex);  
</span><span style="color: #800080;">16</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">17</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">18</span>        <span style="color: #008000;">//</span><span style="color: #008000;">注册的过程中需要线程同步，以保证数据的一致性  </span>
<span style="color: #800080;">19</span>        synchronized (<span style="color: #0000ff;">this</span><span style="color: #000000;">.beanDefinitionMap) {  
</span><span style="color: #800080;">20</span>            Object oldBeanDefinition = <span style="color: #0000ff;">this</span>.beanDefinitionMap.<span style="color: #0000ff;">get</span><span style="color: #000000;">(beanName);  
</span><span style="color: #800080;">21</span>            <span style="color: #008000;">//</span><span style="color: #008000;">检查是否有同名的BeanDefinition已经在IoC容器中注册，如果已经注册，  </span>
<span style="color: #800080;">22</span>            <span style="color: #008000;">//</span><span style="color: #008000;">并且不允许覆盖已注册的Bean，则抛出注册失败异常  </span>
<span style="color: #800080;">23</span>            <span style="color: #0000ff;">if</span> (oldBeanDefinition != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">24</span>                <span style="color: #0000ff;">if</span> (!<span style="color: #0000ff;">this</span><span style="color: #000000;">.allowBeanDefinitionOverriding) {  
</span><span style="color: #800080;">25</span>                    <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,  
</span><span style="color: #800080;">26</span>                            <span style="color: #800000;">"</span><span style="color: #800000;">Cannot register bean definition [</span><span style="color: #800000;">"</span> + beanDefinition + <span style="color: #800000;">"</span><span style="color: #800000;">] for bean '</span><span style="color: #800000;">"</span> + beanName +  
<span style="color: #800080;">27</span>                            <span style="color: #800000;">"</span><span style="color: #800000;">': There is already [</span><span style="color: #800000;">"</span> + oldBeanDefinition + <span style="color: #800000;">"</span><span style="color: #800000;">] bound.</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">28</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">29</span>                <span style="color: #0000ff;">else</span> {<span style="color: #008000;">//</span><span style="color: #008000;">如果允许覆盖，则同名的Bean，后注册的覆盖先注册的  </span>
<span style="color: #800080;">30</span>                    <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">this</span><span style="color: #000000;">.logger.isInfoEnabled()) {  
</span><span style="color: #800080;">31</span>                        <span style="color: #0000ff;">this</span>.logger.info(<span style="color: #800000;">"</span><span style="color: #800000;">Overriding bean definition for bean '</span><span style="color: #800000;">"</span> + beanName +  
<span style="color: #800080;">32</span>                                <span style="color: #800000;">"</span><span style="color: #800000;">': replacing [</span><span style="color: #800000;">"</span> + oldBeanDefinition + <span style="color: #800000;">"</span><span style="color: #800000;">] with [</span><span style="color: #800000;">"</span> + beanDefinition + <span style="color: #800000;">"</span><span style="color: #800000;">]</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">33</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">34</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">35</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">36</span>            <span style="color: #008000;">//</span><span style="color: #008000;">IoC容器中没有已经注册同名的Bean，按正常注册流程注册  </span>
<span style="color: #800080;">37</span>            <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">38</span>                <span style="color: #0000ff;">this</span><span style="color: #000000;">.beanDefinitionNames.add(beanName);  
</span><span style="color: #800080;">39</span>                <span style="color: #0000ff;">this</span>.frozenBeanDefinitionNames = <span style="color: #0000ff;">null</span><span style="color: #000000;">;  
</span><span style="color: #800080;">40</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">41</span>            <span style="color: #0000ff;">this</span><span style="color: #000000;">.beanDefinitionMap.put(beanName, beanDefinition);  
</span><span style="color: #800080;">42</span>            <span style="color: #008000;">//</span><span style="color: #008000;">重置所有已经注册过的BeanDefinition的缓存  </span>
<span style="color: #800080;">43</span><span style="color: #000000;">            resetBeanDefinition(beanName);  
</span><span style="color: #800080;">44</span><span style="color: #000000;">        }  
    } </span></span></pre>
</div>
<p>&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">至
此，Bean定义资源文件中配置的Bean被解析过后，已经注册到IoC容器中，被容器管理起来，真正完成了IoC容器初始化所做的全部工作。
现&nbsp;&nbsp;在IoC容器中已经建立了整个Bean的配置信息，这些BeanDefinition信息已经可以使用，并且可以被检
索，IoC容器的作用就是对这些注册的Bean定义信息进行处理和维护。这些的注册的Bean定义信息是IoC容器控制反转的基础，正是有了这些注册的数
据，容器才可以进行依赖注入。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">总结：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在通过上面的代码，总结一下IOC容器初始化的基本步骤：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">u&nbsp;初始化的入口在容器实现中的&nbsp;refresh()调用来完成</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">u&nbsp;
对&nbsp;bean&nbsp;定义载入&nbsp;IOC&nbsp;容器使用的方法是&nbsp;loadBeanDefinition,其中的
大致过程如下：通过&nbsp;ResourceLoader&nbsp;来完成资源文件位置的定
位，DefaultResourceLoader&nbsp;是默认的实现，同时上下文本身就给出
了&nbsp;ResourceLoader&nbsp;的实现，可以从类路径，文件系统,&nbsp;URL&nbsp;等方式来定为资源位置。如果
是&nbsp;XmlBeanFactory作为&nbsp;IOC&nbsp;容器，那么需要为它指定&nbsp;bean&nbsp;定义的资源，也
就是说&nbsp;bean&nbsp;定义文件时通过抽象成&nbsp;Resource&nbsp;来被&nbsp;IOC&nbsp;容器处理的，
容器通过&nbsp;BeanDefinitionReader来完成定义信息的解析和&nbsp;Bean&nbsp;信息的注册,往往使用的是
XmlBeanDefinitionReader&nbsp;来解析&nbsp;bean&nbsp;的&nbsp;xml&nbsp;定义文
件&nbsp;-&nbsp;实际的处理过程是委托给&nbsp;BeanDefinitionParserDelegate&nbsp;来完成的，从而
得到&nbsp;bean&nbsp;的定义信息，这些信息在&nbsp;Spring&nbsp;中使
用&nbsp;BeanDefinition&nbsp;对象来表示&nbsp;-&nbsp;这个名字可以让我们想到
loadBeanDefinition,RegisterBeanDefinition&nbsp;&nbsp;这些相关的方
法&nbsp;-&nbsp;他们都是为处理&nbsp;BeanDefinitin&nbsp;服务的，&nbsp;容器解析得
到&nbsp;BeanDefinitionIoC&nbsp;以后，需要把它在&nbsp;IOC&nbsp;容器中注册，这
由&nbsp;IOC&nbsp;实现&nbsp;BeanDefinitionRegistry&nbsp;接口来实现。注册过程就是
在&nbsp;IOC&nbsp;容器内部维护的一个HashMap&nbsp;来保存得到的&nbsp;BeanDefinition&nbsp;的过
程。这个&nbsp;HashMap&nbsp;是&nbsp;IoC&nbsp;容器持有&nbsp;bean&nbsp;信息的场所，以后
对&nbsp;bean&nbsp;的操作都是围绕这个HashMap&nbsp;来实现的.</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">u&nbsp;
然后我们就可以通过&nbsp;BeanFactory&nbsp;和&nbsp;ApplicationContext&nbsp;来享受
到&nbsp;Spring&nbsp;IOC&nbsp;的服务了,在使用&nbsp;IOC&nbsp;容器的时候，我们注意到除了少量粘合代码，绝
大多数以正确&nbsp;IoC&nbsp;风格编写的应用程序代码完全不用关心如何到达工厂，因为容器将把这些对象与容器管理的其他对象钩在一起。基本
的策略是把工厂放到已知的地方，最好是放在对预期使用的上下文有意义的地方，以及代码将实际需要访问工厂的地方。&nbsp;Spring&nbsp;本
身提供了对声明式载入&nbsp;web&nbsp;应用程序用法的应用程序上下文,并将其存储在ServletContext&nbsp;中的框架实
现。具体可以参见以后的文章&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">在使用&nbsp;Spring&nbsp;IOC&nbsp;容器的时候我们还需要区别两个概念:</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Beanfactory&nbsp;
和&nbsp;Factory&nbsp;bean，其中&nbsp;BeanFactory&nbsp;指的是&nbsp;IOC&nbsp;容器的编
程抽象，比如&nbsp;ApplicationContext，&nbsp;XmlBeanFactory&nbsp;等，这些都
是&nbsp;IOC&nbsp;容器的具体表现，需要使用什么样的容器由客户决定,但&nbsp;Spring&nbsp;为我们提供了丰富的选
择。&nbsp;FactoryBean&nbsp;只是一个可以在&nbsp;IOC而容器中被管理的一个&nbsp;bean,是对各种处理过程和资
源使用的抽象,Factory&nbsp;bean&nbsp;在需要时产生另一个对象，而不返回&nbsp;FactoryBean本身,我们可以把它
看成是一个抽象工厂，对它的调用返回的是工厂生产的产品。所有的&nbsp;Factory&nbsp;bean&nbsp;都实现特殊的
org.springframework.beans.factory.FactoryBean&nbsp;接口，当使用容器
中&nbsp;factory&nbsp;bean&nbsp;的时候，该容器不会返回&nbsp;factory&nbsp;bean&nbsp;本
身,而是返回其生成的对象。Spring&nbsp;包括了大部分的通用资源和服务访问抽象
的&nbsp;Factory&nbsp;bean&nbsp;的实现，其中包括:对&nbsp;JNDI&nbsp;查询的处理，对代理对象的处理，对
事务性代理的处理，对&nbsp;RMI&nbsp;代理的处理等，这些我们都可以看成是具体的工厂,看成是SPRING&nbsp;为我们建立好的工
厂。也就是说&nbsp;Spring&nbsp;通过使用抽象工厂模式为我们准备了一系列工厂来生产一些特定的对象,免除我们手工重复的工作，我们要使
用时只需要在&nbsp;IOC&nbsp;容器里配置好就能很方便的使用了</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p>
<p class="p0">&nbsp;</p>
<div id="tony_body">
<h2>
四、IOC容器的依赖注入</h2>
</div>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">1、依赖注入发生的时间</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">当Spring&nbsp;IoC容器完成了Bean定义资源的定位、载入和解析注册以后，IoC容器中已经管理类Bean定义的相关数据，但是此时IoC容器还没有对所管理的Bean进行依赖注入，依赖注入在以下两种情况发生：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">(1).用户第一次通过getBean方法向IoC容索要Bean时，IoC容器触发依赖注入。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">(2).当用户在Bean定义资源中为&lt;Bean&gt;元素配置了lazy-init属性，即让容器在解析注册Bean定义时进行预实例化，触发依赖注入。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">BeanFactory
接口定义了Spring&nbsp;IoC容器的基本功能规范，是Spring&nbsp;IoC容器所应遵守的最底层和最基本的编程规范。
BeanFactory接口中定义了几个getBean方法，就是用户向IoC容器索取管理的Bean的方法，我们通过分析其子类的具体实现，理解
Spring&nbsp;IoC容器在用户索取Bean时如何完成依赖注入。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;"><img src="Spring%EF%BC%9A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BBSpring%20IOC%E5%8E%9F%E7%90%86_files/172312283627249.png" alt=""></span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">在BeanFactory中我们看到getBean（String…）函数，它的具体实现在AbstractBeanFactory中</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">2、AbstractBeanFactory通过getBean向IoC容器获取被管理的Bean：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">AbstractBeanFactory的getBean相关方法的源码如下：</span></p>
<p class="p0">&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #800080;">1    </span><span style="color: #008000;">//</span><span style="color: #008000;">获取IoC容器中指定名称的Bean  </span>
2    <span style="color: #0000ff;">public</span><span style="color: #000000;"> Object getBean(String name) throws BeansException {  
</span><span style="color: #800080;">3</span>        <span style="color: #008000;">//</span><span style="color: #008000;">doGetBean才是真正向IoC容器获取被管理Bean的过程  </span>
<span style="color: #800080;">4</span>        <span style="color: #0000ff;">return</span> doGetBean(name, <span style="color: #0000ff;">null</span>, <span style="color: #0000ff;">null</span>, <span style="color: #0000ff;">false</span><span style="color: #000000;">);  
</span><span style="color: #800080;">5</span><span style="color: #000000;">    }  
</span><span style="color: #800080;">6</span>    <span style="color: #008000;">//</span><span style="color: #008000;">获取IoC容器中指定名称和类型的Bean  </span>
<span style="color: #800080;">7</span>    <span style="color: #0000ff;">public</span> &lt;T&gt; T getBean(String name, Class&lt;T&gt;<span style="color: #000000;"> requiredType) throws BeansException {  
</span><span style="color: #800080;">8</span>        <span style="color: #008000;">//</span><span style="color: #008000;">doGetBean才是真正向IoC容器获取被管理Bean的过程  </span>
<span style="color: #800080;">9</span>        <span style="color: #0000ff;">return</span> doGetBean(name, requiredType, <span style="color: #0000ff;">null</span>, <span style="color: #0000ff;">false</span><span style="color: #000000;">);  
</span><span style="color: #800080;">10</span><span style="color: #000000;">    }  
</span><span style="color: #800080;">11    </span><span style="color: #008000;">//</span><span style="color: #008000;">获取IoC容器中指定名称和参数的Bean  </span>
<span style="color: #800080;">12</span>    <span style="color: #0000ff;">public</span><span style="color: #000000;"> Object getBean(String name, Object... args) throws BeansException {  
</span><span style="color: #800080;">13</span>        <span style="color: #008000;">//</span><span style="color: #008000;">doGetBean才是真正向IoC容器获取被管理Bean的过程  </span>
<span style="color: #800080;">14</span>        <span style="color: #0000ff;">return</span> doGetBean(name, <span style="color: #0000ff;">null</span>, args, <span style="color: #0000ff;">false</span><span style="color: #000000;">);  
</span><span style="color: #800080;">15</span><span style="color: #000000;">    }  
</span><span style="color: #800080;">16    </span><span style="color: #008000;">//</span><span style="color: #008000;">获取IoC容器中指定名称、类型和参数的Bean  </span>
<span style="color: #800080;">17</span>    <span style="color: #0000ff;">public</span> &lt;T&gt; T getBean(String name, Class&lt;T&gt;<span style="color: #000000;"> requiredType, Object... args) throws BeansException {  
</span><span style="color: #800080;">18    </span><span style="color: #008000;">//</span><span style="color: #008000;">doGetBean才是真正向IoC容器获取被管理Bean的过程  </span>
<span style="color: #800080;">19</span>        <span style="color: #0000ff;">return</span> doGetBean(name, requiredType, args, <span style="color: #0000ff;">false</span><span style="color: #000000;">);  
</span><span style="color: #800080;">20</span><span style="color: #000000;">    }  
</span><span style="color: #800080;">21    </span><span style="color: #008000;">//</span><span style="color: #008000;">真正实现向IoC容器获取Bean的功能，也是触发依赖注入功能的地方  </span>
<span style="color: #800080;">22</span>    @SuppressWarnings(<span style="color: #800000;">"</span><span style="color: #800000;">unchecked</span><span style="color: #800000;">"</span><span style="color: #000000;">)  
</span><span style="color: #800080;">23</span>    <span style="color: #0000ff;">protected</span> &lt;T&gt;<span style="color: #000000;"> T doGetBean(  
</span><span style="color: #800080;">24</span>            final String name, final Class&lt;T&gt;<span style="color: #000000;"> requiredType, final Object[] args, boolean typeCheckOnly)  
</span><span style="color: #800080;">25</span><span style="color: #000000;">            throws BeansException {  
</span><span style="color: #800080;">26</span>        <span style="color: #008000;">//</span><span style="color: #008000;">根据指定的名称获取被管理Bean的名称，剥离指定名称中对容器的相关依赖  </span>
<span style="color: #800080;">27</span>        <span style="color: #008000;">//</span><span style="color: #008000;">如果指定的是别名，将别名转换为规范的Bean名称  </span>
<span style="color: #800080;">28</span>        final String beanName =<span style="color: #000000;"> transformedBeanName(name);  
</span><span style="color: #800080;">29</span><span style="color: #000000;">        Object bean;  
</span><span style="color: #800080;">30</span>        <span style="color: #008000;">//</span><span style="color: #008000;">先从缓存中取是否已经有被创建过的单态类型的Bean，对于单态模式的Bean整  </span>
<span style="color: #800080;">31        </span><span style="color: #008000;">//</span><span style="color: #008000;">个IoC容器中只创建一次，不需要重复创建  </span>
<span style="color: #800080;">32</span>        Object sharedInstance =<span style="color: #000000;"> getSingleton(beanName);  
</span><span style="color: #800080;">33</span>        <span style="color: #008000;">//</span><span style="color: #008000;">IoC容器创建单态模式Bean实例对象  </span>
<span style="color: #800080;">34</span>        <span style="color: #0000ff;">if</span> (sharedInstance != <span style="color: #0000ff;">null</span> &amp;&amp; args == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">35</span>            <span style="color: #0000ff;">if</span><span style="color: #000000;"> (logger.isDebugEnabled()) {  
</span><span style="color: #800080;">36</span>                <span style="color: #008000;">//</span><span style="color: #008000;">如果指定名称的Bean在容器中已有单态模式的Bean被创建，直接返回  </span>
<span style="color: #800080;">37                </span><span style="color: #008000;">//</span><span style="color: #008000;">已经创建的Bean  </span>
<span style="color: #800080;">38</span>                <span style="color: #0000ff;">if</span><span style="color: #000000;"> (isSingletonCurrentlyInCreation(beanName)) {  
</span><span style="color: #800080;">39</span>                    logger.debug(<span style="color: #800000;">"</span><span style="color: #800000;">Returning eagerly cached instance of singleton bean '</span><span style="color: #800000;">"</span> + beanName +  
<span style="color: #800080;">40</span>                            <span style="color: #800000;">"</span><span style="color: #800000;">' that is not fully initialized yet - a consequence of a circular reference</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">41</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">42</span>                <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">43</span>                    logger.debug(<span style="color: #800000;">"</span><span style="color: #800000;">Returning cached instance of singleton bean '</span><span style="color: #800000;">"</span> + beanName + <span style="color: #800000;">"</span><span style="color: #800000;">'</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">44</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">45</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">46</span>            <span style="color: #008000;">//</span><span style="color: #008000;">获取给定Bean的实例对象，主要是完成FactoryBean的相关处理  </span>
<span style="color: #800080;">47</span>            <span style="color: #008000;">//</span><span style="color: #008000;">注意：BeanFactory是管理容器中Bean的工厂，而FactoryBean是  </span>
<span style="color: #800080;">48</span>            <span style="color: #008000;">//</span><span style="color: #008000;">创建创建对象的工厂Bean，两者之间有区别  </span>
<span style="color: #800080;">49</span>            bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span style="color: #0000ff;">null</span><span style="color: #000000;">);  
</span><span style="color: #800080;">50</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">51</span>        <span style="color: #0000ff;">else</span> {<span style="color: #008000;">//</span><span style="color: #008000;">缓存没有正在创建的单态模式Bean  </span>
<span style="color: #800080;">52</span>            <span style="color: #008000;">//</span><span style="color: #008000;">缓存中已经有已经创建的原型模式Bean，但是由于循环引用的问题导致实  </span>
<span style="color: #800080;">53            </span><span style="color: #008000;">//</span><span style="color: #008000;">例化对象失败  </span>
<span style="color: #800080;">54</span>            <span style="color: #0000ff;">if</span><span style="color: #000000;"> (isPrototypeCurrentlyInCreation(beanName)) {  
</span><span style="color: #800080;">55</span>                <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> BeanCurrentlyInCreationException(beanName);  
</span><span style="color: #800080;">56</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">57</span>            <span style="color: #008000;">//</span><span style="color: #008000;">对IoC容器中是否存在指定名称的BeanDefinition进行检查，首先检查是否  </span>
<span style="color: #800080;">58</span>            <span style="color: #008000;">//</span><span style="color: #008000;">能在当前的BeanFactory中获取的所需要的Bean，如果不能则委托当前容器  </span>
<span style="color: #800080;">59</span>            <span style="color: #008000;">//</span><span style="color: #008000;">的父级容器去查找，如果还是找不到则沿着容器的继承体系向父级容器查找  </span>
<span style="color: #800080;">60</span>            BeanFactory parentBeanFactory =<span style="color: #000000;"> getParentBeanFactory();  
</span><span style="color: #800080;">61</span>            <span style="color: #008000;">//</span><span style="color: #008000;">当前容器的父级容器存在，且当前容器中不存在指定名称的Bean  </span>
<span style="color: #800080;">62</span>            <span style="color: #0000ff;">if</span> (parentBeanFactory != <span style="color: #0000ff;">null</span> &amp;&amp; !<span style="color: #000000;">containsBeanDefinition(beanName)) {  
</span><span style="color: #800080;">63</span>                <span style="color: #008000;">//</span><span style="color: #008000;">解析指定Bean名称的原始名称  </span>
<span style="color: #800080;">64</span>                String nameToLookup =<span style="color: #000000;"> originalBeanName(name);  
</span><span style="color: #800080;">65</span>                <span style="color: #0000ff;">if</span> (args != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">66</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">委派父级容器根据指定名称和显式的参数查找  </span>
<span style="color: #800080;">67</span>                    <span style="color: #0000ff;">return</span><span style="color: #000000;"> (T) parentBeanFactory.getBean(nameToLookup, args);  
</span><span style="color: #800080;">68</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">69</span>                <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">70</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">委派父级容器根据指定名称和类型查找  </span>
<span style="color: #800080;">71</span>                    <span style="color: #0000ff;">return</span><span style="color: #000000;"> parentBeanFactory.getBean(nameToLookup, requiredType);  
</span><span style="color: #800080;">72</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">73</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">74</span>            <span style="color: #008000;">//</span><span style="color: #008000;">创建的Bean是否需要进行类型验证，一般不需要  </span>
<span style="color: #800080;">75</span>            <span style="color: #0000ff;">if</span> (!<span style="color: #000000;">typeCheckOnly) {  
</span><span style="color: #800080;">76</span>                <span style="color: #008000;">//</span><span style="color: #008000;">向容器标记指定的Bean已经被创建  </span>
<span style="color: #800080;">77</span><span style="color: #000000;">                markBeanAsCreated(beanName);  
</span><span style="color: #800080;">78</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">79</span>             <span style="color: #008000;">//</span><span style="color: #008000;">根据指定Bean名称获取其父级的Bean定义，主要解决Bean继承时子类  </span>
<span style="color: #800080;">80            </span><span style="color: #008000;">//</span><span style="color: #008000;">合并父类公共属性问题  </span>
<span style="color: #800080;">81</span>            final RootBeanDefinition mbd =<span style="color: #000000;"> getMergedLocalBeanDefinition(beanName);  
</span><span style="color: #800080;">82</span><span style="color: #000000;">            checkMergedBeanDefinition(mbd, beanName, args);  
</span><span style="color: #800080;">83</span>            <span style="color: #008000;">//</span><span style="color: #008000;">获取当前Bean所有依赖Bean的名称  </span>
<span style="color: #800080;">84</span>            String[] dependsOn =<span style="color: #000000;"> mbd.getDependsOn();  
</span><span style="color: #800080;">85</span>            <span style="color: #008000;">//</span><span style="color: #008000;">如果当前Bean有依赖Bean  </span>
<span style="color: #800080;">86</span>            <span style="color: #0000ff;">if</span> (dependsOn != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">87</span>                <span style="color: #0000ff;">for</span><span style="color: #000000;"> (String dependsOnBean : dependsOn) {  
</span><span style="color: #800080;">88</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">递归调用getBean方法，获取当前Bean的依赖Bean  </span>
<span style="color: #800080;">89</span><span style="color: #000000;">                    getBean(dependsOnBean);  
</span><span style="color: #800080;">90</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">把被依赖Bean注册给当前依赖的Bean  </span>
<span style="color: #800080;">91</span><span style="color: #000000;">                    registerDependentBean(dependsOnBean, beanName);  
</span><span style="color: #800080;">92</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">93</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">94</span>            <span style="color: #008000;">//</span><span style="color: #008000;">创建单态模式Bean的实例对象  </span>
<span style="color: #800080;">95</span>            <span style="color: #0000ff;">if</span><span style="color: #000000;"> (mbd.isSingleton()) {  
</span><span style="color: #800080;">96</span>            <span style="color: #008000;">//</span><span style="color: #008000;">这里使用了一个匿名内部类，创建Bean实例对象，并且注册给所依赖的对象  </span>
<span style="color: #800080;">97</span>                sharedInstance = getSingleton(beanName, <span style="color: #0000ff;">new</span><span style="color: #000000;"> ObjectFactory() {  
</span><span style="color: #800080;">98</span>                    <span style="color: #0000ff;">public</span><span style="color: #000000;"> Object getObject() throws BeansException {  
</span><span style="color: #800080;">99</span>                        <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">100                            </span><span style="color: #008000;">//</span><span style="color: #008000;">创建一个指定Bean实例对象，如果有父级继承，则合并子</span><span style="color: #008000;">//</span><span style="color: #008000;">类和父类的定义  </span>
<span style="color: #800080;">101</span>                            <span style="color: #0000ff;">return</span><span style="color: #000000;"> createBean(beanName, mbd, args);  
</span><span style="color: #800080;">102</span><span style="color: #000000;">                        }  
</span><span style="color: #800080;">103</span>                        <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (BeansException ex) {  
</span><span style="color: #800080;">104</span>                            <span style="color: #008000;">//</span><span style="color: #008000;">显式地从容器单态模式Bean缓存中清除实例对象  </span>
<span style="color: #800080;">105</span><span style="color: #000000;">                            destroySingleton(beanName);  
</span><span style="color: #800080;">106</span>                            <span style="color: #0000ff;">throw</span><span style="color: #000000;"> ex;  
</span><span style="color: #800080;">107</span><span style="color: #000000;">                        }  
</span><span style="color: #800080;">108</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">109</span><span style="color: #000000;">                });  
</span><span style="color: #800080;">110</span>                <span style="color: #008000;">//</span><span style="color: #008000;">获取给定Bean的实例对象  </span>
<span style="color: #800080;">111</span>                bean =<span style="color: #000000;"> getObjectForBeanInstance(sharedInstance, name, beanName, mbd);  
</span><span style="color: #800080;">112</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">113</span>            <span style="color: #008000;">//</span><span style="color: #008000;">IoC容器创建原型模式Bean实例对象  </span>
<span style="color: #800080;">114</span>            <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span><span style="color: #000000;"> (mbd.isPrototype()) {  
</span><span style="color: #800080;">115</span>                <span style="color: #008000;">//</span><span style="color: #008000;">原型模式(Prototype)是每次都会创建一个新的对象  </span>
<span style="color: #800080;">116</span>                Object prototypeInstance = <span style="color: #0000ff;">null</span><span style="color: #000000;">;  
</span><span style="color: #800080;">117</span>                <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">118                    </span><span style="color: #008000;">//</span><span style="color: #008000;">回调beforePrototypeCreation方法，默认的功能是注册当前创</span><span style="color: #008000;">//</span><span style="color: #008000;">建的原型对象  </span>
<span style="color: #800080;">119</span><span style="color: #000000;">                    beforePrototypeCreation(beanName);  
</span><span style="color: #800080;">120</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">创建指定Bean对象实例  </span>
<span style="color: #800080;">121</span>                    prototypeInstance =<span style="color: #000000;"> createBean(beanName, mbd, args);  
</span><span style="color: #800080;">122</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">123</span>                <span style="color: #0000ff;">finally</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">124                    </span><span style="color: #008000;">//</span><span style="color: #008000;">回调afterPrototypeCreation方法，默认的功能告诉IoC容器指</span><span style="color: #008000;">//</span><span style="color: #008000;">定Bean的原型对象不再创建了  </span>
<span style="color: #800080;">125</span><span style="color: #000000;">                    afterPrototypeCreation(beanName);  
</span><span style="color: #800080;">126</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">127</span>                <span style="color: #008000;">//</span><span style="color: #008000;">获取给定Bean的实例对象  </span>
<span style="color: #800080;">128</span>                bean =<span style="color: #000000;"> getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);  
</span><span style="color: #800080;">129</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">130</span>            <span style="color: #008000;">//</span><span style="color: #008000;">要创建的Bean既不是单态模式，也不是原型模式，则根据Bean定义资源中  </span>
<span style="color: #800080;">131            </span><span style="color: #008000;">//</span><span style="color: #008000;">配置的生命周期范围，选择实例化Bean的合适方法，这种在Web应用程序中  </span>
<span style="color: #800080;">132            </span><span style="color: #008000;">//</span><span style="color: #008000;">比较常用，如：request、session、application等生命周期  </span>
<span style="color: #800080;">133</span>            <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">134</span>                String scopeName =<span style="color: #000000;"> mbd.getScope();  
</span><span style="color: #800080;">135</span>                final Scope scope = <span style="color: #0000ff;">this</span>.scopes.<span style="color: #0000ff;">get</span><span style="color: #000000;">(scopeName);  
</span><span style="color: #800080;">136</span>                <span style="color: #008000;">//</span><span style="color: #008000;">Bean定义资源中没有配置生命周期范围，则Bean定义不合法  </span>
<span style="color: #800080;">137</span>                <span style="color: #0000ff;">if</span> (scope == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">138</span>                    <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span> IllegalStateException(<span style="color: #800000;">"</span><span style="color: #800000;">No Scope registered for scope '</span><span style="color: #800000;">"</span> + scopeName + <span style="color: #800000;">"</span><span style="color: #800000;">'</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">139</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">140</span>                <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">141</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">这里又使用了一个匿名内部类，获取一个指定生命周期范围的实例  </span>
<span style="color: #800080;">142</span>                    Object scopedInstance = scope.<span style="color: #0000ff;">get</span>(beanName, <span style="color: #0000ff;">new</span><span style="color: #000000;"> ObjectFactory() {  
</span><span style="color: #800080;">143</span>                        <span style="color: #0000ff;">public</span><span style="color: #000000;"> Object getObject() throws BeansException {  
</span><span style="color: #800080;">144</span><span style="color: #000000;">                            beforePrototypeCreation(beanName);  
</span><span style="color: #800080;">145</span>                            <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">146</span>                                <span style="color: #0000ff;">return</span><span style="color: #000000;"> createBean(beanName, mbd, args);  
</span><span style="color: #800080;">147</span><span style="color: #000000;">                            }  
</span><span style="color: #800080;">148</span>                            <span style="color: #0000ff;">finally</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">149</span><span style="color: #000000;">                                afterPrototypeCreation(beanName);  
</span><span style="color: #800080;">150</span><span style="color: #000000;">                            }  
</span><span style="color: #800080;">151</span><span style="color: #000000;">                        }  
</span><span style="color: #800080;">152</span><span style="color: #000000;">                    });  
</span><span style="color: #800080;">153</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">获取给定Bean的实例对象  </span>
<span style="color: #800080;">154</span>                    bean =<span style="color: #000000;"> getObjectForBeanInstance(scopedInstance, name, beanName, mbd);  
</span><span style="color: #800080;">155</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">156</span>                <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IllegalStateException ex) {  
</span><span style="color: #800080;">157</span>                    <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> BeanCreationException(beanName,  
</span><span style="color: #800080;">158</span>                            <span style="color: #800000;">"</span><span style="color: #800000;">Scope '</span><span style="color: #800000;">"</span> + scopeName + <span style="color: #800000;">"</span><span style="color: #800000;">' is not active for the current thread; </span><span style="color: #800000;">"</span> +  
<span style="color: #800080;">159</span>                            <span style="color: #800000;">"</span><span style="color: #800000;">consider defining a scoped proxy for this bean if you intend to refer to it from a singleton</span><span style="color: #800000;">"</span><span style="color: #000000;">,  
</span><span style="color: #800080;">160</span><span style="color: #000000;">                            ex);  
</span><span style="color: #800080;">161</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">162</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">163</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">164</span>        <span style="color: #008000;">//</span><span style="color: #008000;">对创建的Bean实例对象进行类型检查  </span>
<span style="color: #800080;">165</span>        <span style="color: #0000ff;">if</span> (requiredType != <span style="color: #0000ff;">null</span> &amp;&amp; bean != <span style="color: #0000ff;">null</span> &amp;&amp; !<span style="color: #000000;">requiredType.isAssignableFrom(bean.getClass())) {  
</span><span style="color: #800080;">166</span>            <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());  
</span><span style="color: #800080;">167</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">168</span>        <span style="color: #0000ff;">return</span><span style="color: #000000;"> (T) bean;  
</span><span style="color: #800080;">169</span>    } </span></pre>
</div>
<p class="p0">&nbsp;</p>
<p>&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">通
过上面对向IoC容器获取Bean方法的分析，我们可以看到在Spring中，如果Bean定义的单态模式(Singleton)，则容器在创建之前先从
缓存中查找，以确保整个容器中只存在一个实例对象。如果Bean定义的是原型模式(Prototype)，则容器每次都会创建一个新的实例对象。除此之
外，Bean定义还可以扩展为指定其生命周期范围。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">上
面的源码只是定义了根据Bean定义的模式，采取的不同创建Bean实例对象的策略，具体的Bean实例对象的创建过程由实现了
ObejctFactory接口的匿名内部类的createBean方法完成，ObejctFactory使用委派模式，具体的Bean实例创建过程交由
其实现类AbstractAutowireCapableBeanFactory完成，我们继续分析
AbstractAutowireCapableBeanFactory的createBean方法的源码，理解其创建Bean实例的具体实现过程。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">3、AbstractAutowireCapableBeanFactory创建Bean实例对象：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">AbstractAutowireCapableBeanFactory类实现了ObejctFactory接口，创建容器指定的Bean实例对象，同时还对创建的Bean实例对象进行初始化处理。其创建Bean实例对象的方法源码如下：</span></p>
<p class="p0">&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #800080;">1    </span><span style="color: #008000;">//</span><span style="color: #008000;">创建Bean实例对象  </span>
2    <span style="color: #0000ff;">protected</span><span style="color: #000000;"> Object createBean(final String beanName, final RootBeanDefinition mbd, final Object[] args)  
</span><span style="color: #800080;">3</span><span style="color: #000000;">            throws BeanCreationException {  
</span><span style="color: #800080;">4</span>        <span style="color: #0000ff;">if</span><span style="color: #000000;"> (logger.isDebugEnabled()) {  
</span><span style="color: #800080;">5</span>            logger.debug(<span style="color: #800000;">"</span><span style="color: #800000;">Creating instance of bean '</span><span style="color: #800000;">"</span> + beanName + <span style="color: #800000;">"</span><span style="color: #800000;">'</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">6</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">7</span>        <span style="color: #008000;">//</span><span style="color: #008000;">判断需要创建的Bean是否可以实例化，即是否可以通过当前的类加载器加载  </span>
<span style="color: #800080;">8</span><span style="color: #000000;">        resolveBeanClass(mbd, beanName);  
</span><span style="color: #800080;">9</span>        <span style="color: #008000;">//</span><span style="color: #008000;">校验和准备Bean中的方法覆盖  </span>
<span style="color: #800080;">10</span>        <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">11</span><span style="color: #000000;">            mbd.prepareMethodOverrides();  
</span><span style="color: #800080;">12</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">13</span>        <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (BeanDefinitionValidationException ex) {  
</span><span style="color: #800080;">14</span>            <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> BeanDefinitionStoreException(mbd.getResourceDescription(),  
</span><span style="color: #800080;">15</span>                    beanName, <span style="color: #800000;">"</span><span style="color: #800000;">Validation of method overrides failed</span><span style="color: #800000;">"</span><span style="color: #000000;">, ex);  
</span><span style="color: #800080;">16</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">17</span>        <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">18            </span><span style="color: #008000;">//</span><span style="color: #008000;">如果Bean配置了初始化前和初始化后的处理器，则试图返回一个需要创建</span><span style="color: #008000;">//</span><span style="color: #008000;">Bean的代理对象  </span>
<span style="color: #800080;">19</span>            Object bean =<span style="color: #000000;"> resolveBeforeInstantiation(beanName, mbd);  
</span><span style="color: #800080;">20</span>            <span style="color: #0000ff;">if</span> (bean != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">21</span>                <span style="color: #0000ff;">return</span><span style="color: #000000;"> bean;  
</span><span style="color: #800080;">22</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">23</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">24</span>        <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Throwable ex) {  
</span><span style="color: #800080;">25</span>            <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> BeanCreationException(mbd.getResourceDescription(), beanName,  
</span><span style="color: #800080;">26</span>                    <span style="color: #800000;">"</span><span style="color: #800000;">BeanPostProcessor before instantiation of bean failed</span><span style="color: #800000;">"</span><span style="color: #000000;">, ex);  
</span><span style="color: #800080;">27</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">28</span>        <span style="color: #008000;">//</span><span style="color: #008000;">创建Bean的入口  </span>
<span style="color: #800080;">29</span>        Object beanInstance =<span style="color: #000000;"> doCreateBean(beanName, mbd, args);  
</span><span style="color: #800080;">30</span>        <span style="color: #0000ff;">if</span><span style="color: #000000;"> (logger.isDebugEnabled()) {  
</span><span style="color: #800080;">31</span>            logger.debug(<span style="color: #800000;">"</span><span style="color: #800000;">Finished creating instance of bean '</span><span style="color: #800000;">"</span> + beanName + <span style="color: #800000;">"</span><span style="color: #800000;">'</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">32</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">33</span>        <span style="color: #0000ff;">return</span><span style="color: #000000;"> beanInstance;  
</span><span style="color: #800080;">34</span><span style="color: #000000;">    }  
</span><span style="color: #800080;">35    </span><span style="color: #008000;">//</span><span style="color: #008000;">真正创建Bean的方法  </span>
36    <span style="color: #0000ff;">protected</span><span style="color: #000000;"> Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final Object[] args) {  
</span><span style="color: #800080;">37</span>        <span style="color: #008000;">//</span><span style="color: #008000;">封装被创建的Bean对象  </span>
<span style="color: #800080;">38</span>        BeanWrapper instanceWrapper = <span style="color: #0000ff;">null</span><span style="color: #000000;">;  
</span><span style="color: #800080;">39</span>        <span style="color: #0000ff;">if</span> (mbd.isSingleton()){<span style="color: #008000;">//</span><span style="color: #008000;">单态模式的Bean，先从容器中缓存中获取同名Bean  </span>
<span style="color: #800080;">40</span>            instanceWrapper = <span style="color: #0000ff;">this</span><span style="color: #000000;">.factoryBeanInstanceCache.remove(beanName);  
</span><span style="color: #800080;">41</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">42</span>        <span style="color: #0000ff;">if</span> (instanceWrapper == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">43</span>            <span style="color: #008000;">//</span><span style="color: #008000;">创建实例对象  </span>
<span style="color: #800080;">44</span>            instanceWrapper =<span style="color: #000000;"> createBeanInstance(beanName, mbd, args);  
</span><span style="color: #800080;">45</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">46</span>        final Object bean = (instanceWrapper != <span style="color: #0000ff;">null</span> ? instanceWrapper.getWrappedInstance() : <span style="color: #0000ff;">null</span><span style="color: #000000;">);  
</span><span style="color: #800080;">47</span>        <span style="color: #008000;">//</span><span style="color: #008000;">获取实例化对象的类型  </span>
<span style="color: #800080;">48</span>        Class beanType = (instanceWrapper != <span style="color: #0000ff;">null</span> ? instanceWrapper.getWrappedClass() : <span style="color: #0000ff;">null</span><span style="color: #000000;">);  
</span><span style="color: #800080;">49</span>        <span style="color: #008000;">//</span><span style="color: #008000;">调用PostProcessor后置处理器  </span>
<span style="color: #800080;">50</span><span style="color: #000000;">        synchronized (mbd.postProcessingLock) {  
</span><span style="color: #800080;">51</span>            <span style="color: #0000ff;">if</span> (!<span style="color: #000000;">mbd.postProcessed) {  
</span><span style="color: #800080;">52</span><span style="color: #000000;">                applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);  
</span><span style="color: #800080;">53</span>                mbd.postProcessed = <span style="color: #0000ff;">true</span><span style="color: #000000;">;  
</span><span style="color: #800080;">54</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">55</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">56</span>        <span style="color: #008000;">//</span><span style="color: #008000;"> Eagerly cache singletons to be able to resolve circular references  </span>
<span style="color: #800080;">57</span>        <span style="color: #008000;">//</span><span style="color: #008000;">向容器中缓存单态模式的Bean对象，以防循环引用  </span>
<span style="color: #800080;">58</span>        boolean earlySingletonExposure = (mbd.isSingleton() &amp;&amp; <span style="color: #0000ff;">this</span>.allowCircularReferences &amp;&amp;  
<span style="color: #800080;">59</span><span style="color: #000000;">                isSingletonCurrentlyInCreation(beanName));  
</span><span style="color: #800080;">60</span>        <span style="color: #0000ff;">if</span><span style="color: #000000;"> (earlySingletonExposure) {  
</span><span style="color: #800080;">61</span>            <span style="color: #0000ff;">if</span><span style="color: #000000;"> (logger.isDebugEnabled()) {  
</span><span style="color: #800080;">62</span>                logger.debug(<span style="color: #800000;">"</span><span style="color: #800000;">Eagerly caching bean '</span><span style="color: #800000;">"</span> + beanName +  
<span style="color: #800080;">63</span>                        <span style="color: #800000;">"</span><span style="color: #800000;">' to allow for resolving potential circular references</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">64</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">65</span>            <span style="color: #008000;">//</span><span style="color: #008000;">这里是一个匿名内部类，为了防止循环引用，尽早持有对象的引用  </span>
<span style="color: #800080;">66</span>            addSingletonFactory(beanName, <span style="color: #0000ff;">new</span><span style="color: #000000;"> ObjectFactory() {  
</span><span style="color: #800080;">67</span>                <span style="color: #0000ff;">public</span><span style="color: #000000;"> Object getObject() throws BeansException {  
</span><span style="color: #800080;">68</span>                    <span style="color: #0000ff;">return</span><span style="color: #000000;"> getEarlyBeanReference(beanName, mbd, bean);  
</span><span style="color: #800080;">69</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">70</span><span style="color: #000000;">            });  
</span><span style="color: #800080;">71</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">72</span>        <span style="color: #008000;">//</span><span style="color: #008000;">Bean对象的初始化，依赖注入在此触发  </span>
<span style="color: #800080;">73</span>        <span style="color: #008000;">//</span><span style="color: #008000;">这个exposedObject在初始化完成之后返回作为依赖注入完成后的Bean  </span>
<span style="color: #800080;">74</span>        Object exposedObject =<span style="color: #000000;"> bean;  
</span><span style="color: #800080;">75</span>        <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">76</span>            <span style="color: #008000;">//</span><span style="color: #008000;">将Bean实例对象封装，并且Bean定义中配置的属性值赋值给实例对象  </span>
<span style="color: #800080;">77</span><span style="color: #000000;">            populateBean(beanName, mbd, instanceWrapper);  
</span><span style="color: #800080;">78</span>            <span style="color: #0000ff;">if</span> (exposedObject != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">79</span>                <span style="color: #008000;">//</span><span style="color: #008000;">初始化Bean对象  </span>
<span style="color: #800080;">80</span>                exposedObject =<span style="color: #000000;"> initializeBean(beanName, exposedObject, mbd);  
</span><span style="color: #800080;">81</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">82</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">83</span>        <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Throwable ex) {  
</span><span style="color: #800080;">84</span>            <span style="color: #0000ff;">if</span> (ex instanceof BeanCreationException &amp;&amp;<span style="color: #000000;"> beanName.equals(((BeanCreationException) ex).getBeanName())) {  
</span><span style="color: #800080;">85</span>                <span style="color: #0000ff;">throw</span><span style="color: #000000;"> (BeanCreationException) ex;  
</span><span style="color: #800080;">86</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">87</span>            <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">88</span>                <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span> BeanCreationException(mbd.getResourceDescription(), beanName, <span style="color: #800000;">"</span><span style="color: #800000;">Initialization of bean failed</span><span style="color: #800000;">"</span><span style="color: #000000;">, ex);  
</span><span style="color: #800080;">89</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">90</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">91</span>        <span style="color: #0000ff;">if</span><span style="color: #000000;"> (earlySingletonExposure) {  
</span><span style="color: #800080;">92</span>            <span style="color: #008000;">//</span><span style="color: #008000;">获取指定名称的已注册的单态模式Bean对象  </span>
<span style="color: #800080;">93</span>            Object earlySingletonReference = getSingleton(beanName, <span style="color: #0000ff;">false</span><span style="color: #000000;">);  
</span><span style="color: #800080;">94</span>            <span style="color: #0000ff;">if</span> (earlySingletonReference != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">95</span>                <span style="color: #008000;">//</span><span style="color: #008000;">根据名称获取的以注册的Bean和正在实例化的Bean是同一个  </span>
<span style="color: #800080;">96</span>                <span style="color: #0000ff;">if</span> (exposedObject ==<span style="color: #000000;"> bean) {  
</span><span style="color: #800080;">97</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">当前实例化的Bean初始化完成  </span>
<span style="color: #800080;">98</span>                    exposedObject =<span style="color: #000000;"> earlySingletonReference;  
</span><span style="color: #800080;">99</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">100</span>                <span style="color: #008000;">//</span><span style="color: #008000;">当前Bean依赖其他Bean，并且当发生循环引用时不允许新创建实例对象  </span>
<span style="color: #800080;">101</span>                <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> (!<span style="color: #0000ff;">this</span>.allowRawInjectionDespiteWrapping &amp;&amp;<span style="color: #000000;"> hasDependentBean(beanName)) {  
</span><span style="color: #800080;">102</span>                    String[] dependentBeans =<span style="color: #000000;"> getDependentBeans(beanName);  
</span><span style="color: #800080;">103</span>                    Set&lt;String&gt; actualDependentBeans = <span style="color: #0000ff;">new</span> LinkedHashSet&lt;String&gt;<span style="color: #000000;">(dependentBeans.length);  
</span><span style="color: #800080;">104</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">获取当前Bean所依赖的其他Bean  </span>
<span style="color: #800080;">105</span>                    <span style="color: #0000ff;">for</span><span style="color: #000000;"> (String dependentBean : dependentBeans) {  
</span><span style="color: #800080;">106</span>                        <span style="color: #008000;">//</span><span style="color: #008000;">对依赖Bean进行类型检查  </span>
<span style="color: #800080;">107</span>                        <span style="color: #0000ff;">if</span> (!<span style="color: #000000;">removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) {  
</span><span style="color: #800080;">108</span><span style="color: #000000;">                            actualDependentBeans.add(dependentBean);  
</span><span style="color: #800080;">109</span><span style="color: #000000;">                        }  
</span><span style="color: #800080;">110</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">111</span>                    <span style="color: #0000ff;">if</span> (!<span style="color: #000000;">actualDependentBeans.isEmpty()) {  
</span><span style="color: #800080;">112</span>                        <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> BeanCurrentlyInCreationException(beanName,  
</span><span style="color: #800080;">113</span>                                <span style="color: #800000;">"</span><span style="color: #800000;">Bean with name '</span><span style="color: #800000;">"</span> + beanName + <span style="color: #800000;">"</span><span style="color: #800000;">' has been injected into other beans [</span><span style="color: #800000;">"</span> +  
<span style="color: #800080;">114</span>                                StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +  
<span style="color: #800080;">115</span>                                <span style="color: #800000;">"</span><span style="color: #800000;">] in its raw version as part of a circular reference, but has eventually been </span><span style="color: #800000;">"</span> +  
<span style="color: #800080;">116</span>                                <span style="color: #800000;">"</span><span style="color: #800000;">wrapped. This means that said other beans do not use the final version of the </span><span style="color: #800000;">"</span> +  
<span style="color: #800080;">117</span>                                <span style="color: #800000;">"</span><span style="color: #800000;">bean. This is often the result of over-eager type matching - consider using </span><span style="color: #800000;">"</span> +  
<span style="color: #800080;">118</span>                                <span style="color: #800000;">"</span><span style="color: #800000;">'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example.</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">119</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">120</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">121</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">122</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">123</span>        <span style="color: #008000;">//</span><span style="color: #008000;">注册完成依赖注入的Bean  </span>
<span style="color: #800080;">124</span>        <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">125</span><span style="color: #000000;">            registerDisposableBeanIfNecessary(beanName, bean, mbd);  
</span><span style="color: #800080;">126</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">127</span>        <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (BeanDefinitionValidationException ex) {  
</span><span style="color: #800080;">128</span>            <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span> BeanCreationException(mbd.getResourceDescription(), beanName, <span style="color: #800000;">"</span><span style="color: #800000;">Invalid destruction signature</span><span style="color: #800000;">"</span><span style="color: #000000;">, ex);  
</span><span style="color: #800080;">129</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">130</span>        <span style="color: #0000ff;">return</span><span style="color: #000000;"> exposedObject;  
    } </span></span></pre>
</div>
<p class="p0">&nbsp;</p>
<p>&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">通过对方法源码的分析，我们看到具体的依赖注入实现在以下两个方法中：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">(1).createBeanInstance：生成Bean所包含的java对象实例。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">(2).populateBean&nbsp;：对Bean属性的依赖注入进行处理。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">下面继续分析这两个方法的代码实现。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">4、createBeanInstance方法创建Bean的java实例对象：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">在createBeanInstance方法中，根据指定的初始化策略，使用静态工厂、工厂方法或者容器的自动装配特性生成java实例对象，创建对象的源码如下：</span></p>
<p class="p0">&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #800080;">1    </span><span style="color: #008000;">//</span><span style="color: #008000;">创建Bean的实例对象  </span>
2    <span style="color: #0000ff;">protected</span><span style="color: #000000;"> BeanWrapper createBeanInstance(String beanName, RootBeanDefinition mbd, Object[] args) {  
</span><span style="color: #800080;">3</span>        <span style="color: #008000;">//</span><span style="color: #008000;">检查确认Bean是可实例化的  </span>
<span style="color: #800080;">4</span>        Class beanClass =<span style="color: #000000;"> resolveBeanClass(mbd, beanName);  
</span><span style="color: #800080;">5</span>        <span style="color: #008000;">//</span><span style="color: #008000;">使用工厂方法对Bean进行实例化  </span>
<span style="color: #800080;">6</span>        <span style="color: #0000ff;">if</span> (beanClass != <span style="color: #0000ff;">null</span> &amp;&amp; !Modifier.isPublic(beanClass.getModifiers()) &amp;&amp; !<span style="color: #000000;">mbd.isNonPublicAccessAllowed()) {  
</span><span style="color: #800080;">7</span>            <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> BeanCreationException(mbd.getResourceDescription(), beanName,  
</span><span style="color: #800080;">8</span>                    <span style="color: #800000;">"</span><span style="color: #800000;">Bean class isn't public, and non-public access not allowed: </span><span style="color: #800000;">"</span> +<span style="color: #000000;"> beanClass.getName());  
</span><span style="color: #800080;">9</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">10</span>        <span style="color: #0000ff;">if</span> (mbd.getFactoryMethodName() != <span style="color: #0000ff;">null</span><span style="color: #000000;">)  {  
</span><span style="color: #800080;">11</span>            <span style="color: #008000;">//</span><span style="color: #008000;">调用工厂方法实例化  </span>
<span style="color: #800080;">12</span>            <span style="color: #0000ff;">return</span><span style="color: #000000;"> instantiateUsingFactoryMethod(beanName, mbd, args);  
</span><span style="color: #800080;">13</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">14</span>        <span style="color: #008000;">//</span><span style="color: #008000;">使用容器的自动装配方法进行实例化  </span>
<span style="color: #800080;">15</span>        boolean resolved = <span style="color: #0000ff;">false</span><span style="color: #000000;">;  
</span><span style="color: #800080;">16</span>        boolean autowireNecessary = <span style="color: #0000ff;">false</span><span style="color: #000000;">;  
</span><span style="color: #800080;">17</span>        <span style="color: #0000ff;">if</span> (args == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">18</span><span style="color: #000000;">            synchronized (mbd.constructorArgumentLock) {  
</span><span style="color: #800080;">19</span>                <span style="color: #0000ff;">if</span> (mbd.resolvedConstructorOrFactoryMethod != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">20</span>                    resolved = <span style="color: #0000ff;">true</span><span style="color: #000000;">;  
</span><span style="color: #800080;">21</span>                    autowireNecessary =<span style="color: #000000;"> mbd.constructorArgumentsResolved;  
</span><span style="color: #800080;">22</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">23</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">24</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">25</span>        <span style="color: #0000ff;">if</span><span style="color: #000000;"> (resolved) {  
</span><span style="color: #800080;">26</span>            <span style="color: #0000ff;">if</span><span style="color: #000000;"> (autowireNecessary) {  
</span><span style="color: #800080;">27</span>                <span style="color: #008000;">//</span><span style="color: #008000;">配置了自动装配属性，使用容器的自动装配实例化  </span>
<span style="color: #800080;">28</span>                <span style="color: #008000;">//</span><span style="color: #008000;">容器的自动装配是根据参数类型匹配Bean的构造方法  </span>
<span style="color: #800080;">29</span>                <span style="color: #0000ff;">return</span> autowireConstructor(beanName, mbd, <span style="color: #0000ff;">null</span>, <span style="color: #0000ff;">null</span><span style="color: #000000;">);  
</span><span style="color: #800080;">30</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">31</span>            <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">32</span>                <span style="color: #008000;">//</span><span style="color: #008000;">使用默认的无参构造方法实例化  </span>
<span style="color: #800080;">33</span>                <span style="color: #0000ff;">return</span><span style="color: #000000;"> instantiateBean(beanName, mbd);  
</span><span style="color: #800080;">34</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">35</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">36</span>        <span style="color: #008000;">//</span><span style="color: #008000;">使用Bean的构造方法进行实例化  </span>
<span style="color: #800080;">37</span>        Constructor[] ctors =<span style="color: #000000;"> determineConstructorsFromBeanPostProcessors(beanClass, beanName);  
</span><span style="color: #800080;">38</span>        <span style="color: #0000ff;">if</span> (ctors != <span style="color: #0000ff;">null</span> ||  
<span style="color: #800080;">39</span>                mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR ||  
<span style="color: #800080;">40</span>                mbd.hasConstructorArgumentValues() || !<span style="color: #000000;">ObjectUtils.isEmpty(args))  {  
</span><span style="color: #800080;">41</span>            <span style="color: #008000;">//</span><span style="color: #008000;">使用容器的自动装配特性，调用匹配的构造方法实例化  </span>
<span style="color: #800080;">42</span>            <span style="color: #0000ff;">return</span><span style="color: #000000;"> autowireConstructor(beanName, mbd, ctors, args);  
</span><span style="color: #800080;">43</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">44</span>        <span style="color: #008000;">//</span><span style="color: #008000;">使用默认的无参构造方法实例化  </span>
<span style="color: #800080;">45</span>        <span style="color: #0000ff;">return</span><span style="color: #000000;"> instantiateBean(beanName, mbd);  
</span><span style="color: #800080;">46</span><span style="color: #000000;">    }   
</span><span style="color: #800080;">47    </span><span style="color: #008000;">//</span><span style="color: #008000;">使用默认的无参构造方法实例化Bean对象  </span>
48    <span style="color: #0000ff;">protected</span><span style="color: #000000;"> BeanWrapper instantiateBean(final String beanName, final RootBeanDefinition mbd) {  
</span><span style="color: #800080;">49</span>        <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">50</span><span style="color: #000000;">            Object beanInstance;  
</span><span style="color: #800080;">51</span>            final BeanFactory parent = <span style="color: #0000ff;">this</span><span style="color: #000000;">;  
</span><span style="color: #800080;">52</span>            <span style="color: #008000;">//</span><span style="color: #008000;">获取系统的安全管理接口，JDK标准的安全管理API  </span>
<span style="color: #800080;">53</span>            <span style="color: #0000ff;">if</span> (System.getSecurityManager() != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">54</span>                <span style="color: #008000;">//</span><span style="color: #008000;">这里是一个匿名内置类，根据实例化策略创建实例对象  </span>
<span style="color: #800080;">55</span>                beanInstance = AccessController.doPrivileged(<span style="color: #0000ff;">new</span> PrivilegedAction&lt;Object&gt;<span style="color: #000000;">() {  
</span><span style="color: #800080;">56</span>                    <span style="color: #0000ff;">public</span><span style="color: #000000;"> Object run() {  
</span><span style="color: #800080;">57</span>                        <span style="color: #0000ff;">return</span><span style="color: #000000;"> getInstantiationStrategy().instantiate(mbd, beanName, parent);  
</span><span style="color: #800080;">58</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">59</span><span style="color: #000000;">                }, getAccessControlContext());  
</span><span style="color: #800080;">60</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">61</span>            <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">62</span>                <span style="color: #008000;">//</span><span style="color: #008000;">将实例化的对象封装起来  </span>
<span style="color: #800080;">63</span>                beanInstance =<span style="color: #000000;"> getInstantiationStrategy().instantiate(mbd, beanName, parent);  
</span><span style="color: #800080;">64</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">65</span>            BeanWrapper bw = <span style="color: #0000ff;">new</span><span style="color: #000000;"> BeanWrapperImpl(beanInstance);  
</span><span style="color: #800080;">66</span><span style="color: #000000;">            initBeanWrapper(bw);  
</span><span style="color: #800080;">67</span>            <span style="color: #0000ff;">return</span><span style="color: #000000;"> bw;  
</span><span style="color: #800080;">68</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">69</span>        <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Throwable ex) {  
</span><span style="color: #800080;">70</span>            <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span> BeanCreationException(mbd.getResourceDescription(), beanName, <span style="color: #800000;">"</span><span style="color: #800000;">Instantiation of bean failed</span><span style="color: #800000;">"</span><span style="color: #000000;">, ex);  
</span><span style="color: #800080;">71</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">72</span>    }</span></pre>
</div>
<p class="p0">&nbsp;</p>
<p>&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">经
过对上面的代码分析，我们可以看出，对使用工厂方法和自动装配特性的Bean的实例化相当比较清楚，调用相应的工厂方法或者参数匹配的构造方法即可完成实
例化对象的工作，但是对于我们最常使用的默认无参构造方法就需要使用相应的初始化策略(JDK的反射机制或者CGLIB)来进行初始化了，在方法
getInstantiationStrategy().instantiate中就具体实现类使用初始策略实例化对象。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">5、SimpleInstantiationStrategy类使用默认的无参构造方法创建Bean实例化对象：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">在使用默认的无参构造方法创建Bean的实例化对象时，方法getInstantiationStrategy().instantiate调用了SimpleInstantiationStrategy类中的实例化Bean的方法，其源码如下：</span></p>
<p class="p0">&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #800080;">1    </span><span style="color: #008000;">//</span><span style="color: #008000;">使用初始化策略实例化Bean对象  </span>
2    <span style="color: #0000ff;">public</span><span style="color: #000000;"> Object instantiate(RootBeanDefinition beanDefinition, String beanName, BeanFactory owner) {  
</span><span style="color: #800080;">3</span>        <span style="color: #008000;">//</span><span style="color: #008000;">如果Bean定义中没有方法覆盖，则就不需要CGLIB父类类的方法  </span>
<span style="color: #800080;">4</span>        <span style="color: #0000ff;">if</span><span style="color: #000000;"> (beanDefinition.getMethodOverrides().isEmpty()) {  
</span><span style="color: #800080;">5</span>            Constructor&lt;?&gt;<span style="color: #000000;"> constructorToUse;  
</span><span style="color: #800080;">6</span><span style="color: #000000;">            synchronized (beanDefinition.constructorArgumentLock) {  
</span><span style="color: #800080;">7</span>                <span style="color: #008000;">//</span><span style="color: #008000;">获取对象的构造方法或工厂方法  </span>
<span style="color: #800080;">8</span>                constructorToUse = (Constructor&lt;?&gt;<span style="color: #000000;">) beanDefinition.resolvedConstructorOrFactoryMethod;  
</span><span style="color: #800080;">9</span>                <span style="color: #008000;">//</span><span style="color: #008000;">如果没有构造方法且没有工厂方法  </span>
<span style="color: #800080;">10</span>                <span style="color: #0000ff;">if</span> (constructorToUse == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">11</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">使用JDK的反射机制，判断要实例化的Bean是否是接口  </span>
<span style="color: #800080;">12</span>                    final Class clazz =<span style="color: #000000;"> beanDefinition.getBeanClass();  
</span><span style="color: #800080;">13</span>                    <span style="color: #0000ff;">if</span><span style="color: #000000;"> (clazz.isInterface()) {  
</span><span style="color: #800080;">14</span>                        <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span> BeanInstantiationException(clazz, <span style="color: #800000;">"</span><span style="color: #800000;">Specified class is an interface</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">15</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">16</span>                    <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">17</span>                        <span style="color: #0000ff;">if</span> (System.getSecurityManager() != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">18</span>                        <span style="color: #008000;">//</span><span style="color: #008000;">这里是一个匿名内置类，使用反射机制获取Bean的构造方法  </span>
<span style="color: #800080;">19</span>                            constructorToUse = AccessController.doPrivileged(<span style="color: #0000ff;">new</span> PrivilegedExceptionAction&lt;Constructor&gt;<span style="color: #000000;">() {  
</span><span style="color: #800080;">20</span>                                <span style="color: #0000ff;">public</span><span style="color: #000000;"> Constructor run() throws Exception {  
</span><span style="color: #800080;">21</span>                                    <span style="color: #0000ff;">return</span> clazz.getDeclaredConstructor((Class[]) <span style="color: #0000ff;">null</span><span style="color: #000000;">);  
</span><span style="color: #800080;">22</span><span style="color: #000000;">                                }  
</span><span style="color: #800080;">23</span><span style="color: #000000;">                            });  
</span><span style="color: #800080;">24</span><span style="color: #000000;">                        }  
</span><span style="color: #800080;">25</span>                        <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">26</span>                            constructorToUse =  clazz.getDeclaredConstructor((Class[]) <span style="color: #0000ff;">null</span><span style="color: #000000;">);  
</span><span style="color: #800080;">27</span><span style="color: #000000;">                        }  
</span><span style="color: #800080;">28</span>                        beanDefinition.resolvedConstructorOrFactoryMethod =<span style="color: #000000;"> constructorToUse;  
</span><span style="color: #800080;">29</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">30</span>                    <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception ex) {  
</span><span style="color: #800080;">31</span>                        <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span> BeanInstantiationException(clazz, <span style="color: #800000;">"</span><span style="color: #800000;">No default constructor found</span><span style="color: #800000;">"</span><span style="color: #000000;">, ex);  
</span><span style="color: #800080;">32</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">33</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">34</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">35            </span><span style="color: #008000;">//</span><span style="color: #008000;">使用BeanUtils实例化，通过反射机制调用”构造方法.newInstance(arg)”来进行实例化  </span>
<span style="color: #800080;">36</span>            <span style="color: #0000ff;">return</span><span style="color: #000000;"> BeanUtils.instantiateClass(constructorToUse);  
</span><span style="color: #800080;">37</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">38</span>        <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">39</span>            <span style="color: #008000;">//</span><span style="color: #008000;">使用CGLIB来实例化对象  </span>
<span style="color: #800080;">40</span>            <span style="color: #0000ff;">return</span><span style="color: #000000;"> instantiateWithMethodInjection(beanDefinition, beanName, owner);  
</span><span style="color: #800080;">41</span><span style="color: #000000;">        }  
    } </span></span></pre>
</div>
<p class="p0">&nbsp;</p>
<p>&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">通过上面的代码分析，我们看到了如果Bean有方法被覆盖了，则使用JDK的反射机制进行实例化，否则，使用CGLIB进行实例化。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">instantiateWithMethodInjection方法调用SimpleInstantiationStrategy的子类CglibSubclassingInstantiationStrategy使用CGLIB来进行初始化，其源码如下：</span></p>
<p class="p0">&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #800080;">1    </span><span style="color: #008000;">//</span><span style="color: #008000;">使用CGLIB进行Bean对象实例化  </span>
2    <span style="color: #0000ff;">public</span><span style="color: #000000;"> Object instantiate(Constructor ctor, Object[] args) {  
</span><span style="color: #800080;">3</span>            <span style="color: #008000;">//</span><span style="color: #008000;">CGLIB中的类  </span>
<span style="color: #800080;">4</span>            Enhancer enhancer = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Enhancer();  
</span><span style="color: #800080;">5</span>            <span style="color: #008000;">//</span><span style="color: #008000;">将Bean本身作为其基类  </span>
<span style="color: #800080;">6</span>            enhancer.setSuperclass(<span style="color: #0000ff;">this</span><span style="color: #000000;">.beanDefinition.getBeanClass());  
</span><span style="color: #800080;">7</span>            enhancer.setCallbackFilter(<span style="color: #0000ff;">new</span><span style="color: #000000;"> CallbackFilterImpl());  
</span><span style="color: #800080;">8</span>            enhancer.setCallbacks(<span style="color: #0000ff;">new</span><span style="color: #000000;"> Callback[] {  
</span><span style="color: #800080;">9</span><span style="color: #000000;">                    NoOp.INSTANCE,  
</span><span style="color: #800080;">10</span>                    <span style="color: #0000ff;">new</span><span style="color: #000000;"> LookupOverrideMethodInterceptor(),  
</span><span style="color: #800080;">11</span>                    <span style="color: #0000ff;">new</span><span style="color: #000000;"> ReplaceOverrideMethodInterceptor()  
</span><span style="color: #800080;">12</span><span style="color: #000000;">            });  
</span><span style="color: #800080;">13</span>            <span style="color: #008000;">//</span><span style="color: #008000;">使用CGLIB的create方法生成实例对象  </span>
<span style="color: #800080;">14</span>            <span style="color: #0000ff;">return</span> (ctor == <span style="color: #0000ff;">null</span>) ?   
<span style="color: #800080;">15</span><span style="color: #000000;">                    enhancer.create() :   
</span><span style="color: #800080;">16</span><span style="color: #000000;">                    enhancer.create(ctor.getParameterTypes(), args);  
</span><span style="color: #800080;">17</span>        } </span></pre>
</div>
<p class="p0">&nbsp;</p>
<p>&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">CGLIB是一个常用的字节码生成器的类库，它提供了一系列API实现java字节码的生成和转换功能。我们在学习JDK的动态代理时都知道，JDK的动态代理只能针对接口，如果一个类没有实现任何接口，要对其进行动态代理只能使用CGLIB。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">6、populateBean方法对Bean属性的依赖注入：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">在第3步的分析中我们已经了解到Bean的依赖注入分为以下两个过程：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">(1).createBeanInstance：生成Bean所包含的java对象实例。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">(2).populateBean&nbsp;：对Bean属性的依赖注入进行处理。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">第4、5步中我们已经分析了容器初始化生成Bean所包含的Java实例对象的过程，现在我们继续分析生成对象后，Spring&nbsp;IoC容器是如何将Bean的属性依赖关系注入Bean实例对象中并设置好的，属性依赖注入的代码如下：</span></p>
<p class="p0">&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #800080;">1    </span><span style="color: #008000;">//</span><span style="color: #008000;">将Bean属性设置到生成的实例对象上  </span>
2    <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> populateBean(String beanName, AbstractBeanDefinition mbd, BeanWrapper bw) {  
</span><span style="color: #800080;">3</span>        <span style="color: #008000;">//</span><span style="color: #008000;">获取容器在解析Bean定义资源时为BeanDefiniton中设置的属性值  </span>
<span style="color: #800080;">4</span>        PropertyValues pvs =<span style="color: #000000;"> mbd.getPropertyValues();  
</span><span style="color: #800080;">5</span>        <span style="color: #008000;">//</span><span style="color: #008000;">实例对象为null  </span>
<span style="color: #800080;">6</span>        <span style="color: #0000ff;">if</span> (bw == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">7</span>            <span style="color: #008000;">//</span><span style="color: #008000;">属性值不为空  </span>
<span style="color: #800080;">8</span>            <span style="color: #0000ff;">if</span> (!<span style="color: #000000;">pvs.isEmpty()) {  
</span><span style="color: #800080;">9</span>                <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> BeanCreationException(  
</span><span style="color: #800080;">10</span>                        mbd.getResourceDescription(), beanName, <span style="color: #800000;">"</span><span style="color: #800000;">Cannot apply property values to null instance</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">11</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">12</span>            <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">13</span>                <span style="color: #008000;">//</span><span style="color: #008000;">实例对象为null，属性值也为空，不需要设置属性值，直接返回  </span>
<span style="color: #800080;">14</span>                <span style="color: #0000ff;">return</span><span style="color: #000000;">;  
</span><span style="color: #800080;">15</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">16</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">17        </span><span style="color: #008000;">//</span><span style="color: #008000;">在设置属性之前调用Bean的PostProcessor后置处理器  </span>
<span style="color: #800080;">18</span>        boolean continueWithPropertyPopulation = <span style="color: #0000ff;">true</span><span style="color: #000000;">;  
</span><span style="color: #800080;">19</span>        <span style="color: #0000ff;">if</span> (!mbd.isSynthetic() &amp;&amp;<span style="color: #000000;"> hasInstantiationAwareBeanPostProcessors()) {  
</span><span style="color: #800080;">20</span>            <span style="color: #0000ff;">for</span><span style="color: #000000;"> (BeanPostProcessor bp : getBeanPostProcessors()) {  
</span><span style="color: #800080;">21</span>                <span style="color: #0000ff;">if</span><span style="color: #000000;"> (bp instanceof InstantiationAwareBeanPostProcessor) {  
</span><span style="color: #800080;">22</span>                    InstantiationAwareBeanPostProcessor ibp =<span style="color: #000000;"> (InstantiationAwareBeanPostProcessor) bp;  
</span><span style="color: #800080;">23</span>                    <span style="color: #0000ff;">if</span> (!<span style="color: #000000;">ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) {  
</span><span style="color: #800080;">24</span>                        continueWithPropertyPopulation = <span style="color: #0000ff;">false</span><span style="color: #000000;">;  
</span><span style="color: #800080;">25</span>                        <span style="color: #0000ff;">break</span><span style="color: #000000;">;  
</span><span style="color: #800080;">26</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">27</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">28</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">29</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">30</span>        <span style="color: #0000ff;">if</span> (!<span style="color: #000000;">continueWithPropertyPopulation) {  
</span><span style="color: #800080;">31</span>            <span style="color: #0000ff;">return</span><span style="color: #000000;">;  
</span><span style="color: #800080;">32</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">33</span>        <span style="color: #008000;">//</span><span style="color: #008000;">依赖注入开始，首先处理autowire自动装配的注入  </span>
<span style="color: #800080;">34</span>        <span style="color: #0000ff;">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME ||  
<span style="color: #800080;">35</span>                mbd.getResolvedAutowireMode() ==<span style="color: #000000;"> RootBeanDefinition.AUTOWIRE_BY_TYPE) {  
</span><span style="color: #800080;">36</span>            MutablePropertyValues newPvs = <span style="color: #0000ff;">new</span><span style="color: #000000;"> MutablePropertyValues(pvs);  
</span><span style="color: #800080;">37</span>            <span style="color: #008000;">//</span><span style="color: #008000;">对autowire自动装配的处理，根据Bean名称自动装配注入  </span>
<span style="color: #800080;">38</span>            <span style="color: #0000ff;">if</span> (mbd.getResolvedAutowireMode() ==<span style="color: #000000;"> RootBeanDefinition.AUTOWIRE_BY_NAME) {  
</span><span style="color: #800080;">39</span><span style="color: #000000;">                autowireByName(beanName, mbd, bw, newPvs);  
</span><span style="color: #800080;">40</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">41</span>            <span style="color: #008000;">//</span><span style="color: #008000;">根据Bean类型自动装配注入  </span>
<span style="color: #800080;">42</span>            <span style="color: #0000ff;">if</span> (mbd.getResolvedAutowireMode() ==<span style="color: #000000;"> RootBeanDefinition.AUTOWIRE_BY_TYPE) {  
</span><span style="color: #800080;">43</span><span style="color: #000000;">                autowireByType(beanName, mbd, bw, newPvs);  
</span><span style="color: #800080;">44</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">45</span>            pvs =<span style="color: #000000;"> newPvs;  
</span><span style="color: #800080;">46</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">47</span>        <span style="color: #008000;">//</span><span style="color: #008000;">检查容器是否持有用于处理单态模式Bean关闭时的后置处理器  </span>
<span style="color: #800080;">48</span>        boolean hasInstAwareBpps =<span style="color: #000000;"> hasInstantiationAwareBeanPostProcessors();  
</span><span style="color: #800080;">49</span>        <span style="color: #008000;">//</span><span style="color: #008000;">Bean实例对象没有依赖，即没有继承基类  </span>
<span style="color: #800080;">50</span>        boolean needsDepCheck = (mbd.getDependencyCheck() !=<span style="color: #000000;"> RootBeanDefinition.DEPENDENCY_CHECK_NONE);  
</span><span style="color: #800080;">51</span>        <span style="color: #0000ff;">if</span> (hasInstAwareBpps ||<span style="color: #000000;"> needsDepCheck) {  
</span><span style="color: #800080;">52</span>            <span style="color: #008000;">//</span><span style="color: #008000;">从实例对象中提取属性描述符  </span>
<span style="color: #800080;">53</span>            PropertyDescriptor[] filteredPds =<span style="color: #000000;"> filterPropertyDescriptorsForDependencyCheck(bw);  
</span><span style="color: #800080;">54</span>            <span style="color: #0000ff;">if</span><span style="color: #000000;"> (hasInstAwareBpps) {  
</span><span style="color: #800080;">55</span>                <span style="color: #0000ff;">for</span><span style="color: #000000;"> (BeanPostProcessor bp : getBeanPostProcessors()) {  
</span><span style="color: #800080;">56</span>                    <span style="color: #0000ff;">if</span><span style="color: #000000;"> (bp instanceof InstantiationAwareBeanPostProcessor) {  
</span><span style="color: #800080;">57</span>                        InstantiationAwareBeanPostProcessor ibp =<span style="color: #000000;"> (InstantiationAwareBeanPostProcessor) bp;  
</span><span style="color: #800080;">58</span>                        <span style="color: #008000;">//</span><span style="color: #008000;">使用BeanPostProcessor处理器处理属性值  </span>
<span style="color: #800080;">59</span>                        pvs =<span style="color: #000000;"> ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);  
</span><span style="color: #800080;">60</span>                        <span style="color: #0000ff;">if</span> (pvs == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">61</span>                            <span style="color: #0000ff;">return</span><span style="color: #000000;">;  
</span><span style="color: #800080;">62</span><span style="color: #000000;">                        }  
</span><span style="color: #800080;">63</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">64</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">65</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">66</span>            <span style="color: #0000ff;">if</span><span style="color: #000000;"> (needsDepCheck) {  
</span><span style="color: #800080;">67</span>                <span style="color: #008000;">//</span><span style="color: #008000;">为要设置的属性进行依赖检查  </span>
<span style="color: #800080;">68</span><span style="color: #000000;">                checkDependencies(beanName, mbd, filteredPds, pvs);  
</span><span style="color: #800080;">69</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">70</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">71</span>        <span style="color: #008000;">//</span><span style="color: #008000;">对属性进行注入  </span>
<span style="color: #800080;">72</span><span style="color: #000000;">        applyPropertyValues(beanName, mbd, bw, pvs);  
</span><span style="color: #800080;">73</span><span style="color: #000000;">    }  
</span><span style="color: #800080;">74    </span><span style="color: #008000;">//</span><span style="color: #008000;">解析并注入依赖属性的过程  </span>
75    <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> applyPropertyValues(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs) {  
</span><span style="color: #800080;">76</span>        <span style="color: #0000ff;">if</span> (pvs == <span style="color: #0000ff;">null</span> ||<span style="color: #000000;"> pvs.isEmpty()) {  
</span><span style="color: #800080;">77</span>            <span style="color: #0000ff;">return</span><span style="color: #000000;">;  
</span><span style="color: #800080;">78</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">79</span>        <span style="color: #008000;">//</span><span style="color: #008000;">封装属性值  </span>
<span style="color: #800080;">80</span>        MutablePropertyValues mpvs = <span style="color: #0000ff;">null</span><span style="color: #000000;">;  
</span><span style="color: #800080;">81</span>        List&lt;PropertyValue&gt;<span style="color: #000000;"> original;  
</span><span style="color: #800080;">82</span>        <span style="color: #0000ff;">if</span> (System.getSecurityManager()!= <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">83</span>            <span style="color: #0000ff;">if</span><span style="color: #000000;"> (bw instanceof BeanWrapperImpl) {  
</span><span style="color: #800080;">84</span>                <span style="color: #008000;">//</span><span style="color: #008000;">设置安全上下文，JDK安全机制  </span>
<span style="color: #800080;">85</span><span style="color: #000000;">                ((BeanWrapperImpl) bw).setSecurityContext(getAccessControlContext());  
</span><span style="color: #800080;">86</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">87</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">88</span>        <span style="color: #0000ff;">if</span><span style="color: #000000;"> (pvs instanceof MutablePropertyValues) {  
</span><span style="color: #800080;">89</span>            mpvs =<span style="color: #000000;"> (MutablePropertyValues) pvs;  
</span><span style="color: #800080;">90</span>            <span style="color: #008000;">//</span><span style="color: #008000;">属性值已经转换  </span>
<span style="color: #800080;">91</span>            <span style="color: #0000ff;">if</span><span style="color: #000000;"> (mpvs.isConverted()) {  
</span><span style="color: #800080;">92</span>                <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">93</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">为实例化对象设置属性值  </span>
<span style="color: #800080;">94</span><span style="color: #000000;">                    bw.setPropertyValues(mpvs);  
</span><span style="color: #800080;">95</span>                    <span style="color: #0000ff;">return</span><span style="color: #000000;">;  
</span><span style="color: #800080;">96</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">97</span>                <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (BeansException ex) {  
</span><span style="color: #800080;">98</span>                    <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> BeanCreationException(  
</span><span style="color: #800080;">99</span>                            mbd.getResourceDescription(), beanName, <span style="color: #800000;">"</span><span style="color: #800000;">Error setting property values</span><span style="color: #800000;">"</span><span style="color: #000000;">, ex);  
</span><span style="color: #800080;">100</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">101</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">102</span>            <span style="color: #008000;">//</span><span style="color: #008000;">获取属性值对象的原始类型值  </span>
<span style="color: #800080;">103</span>            original =<span style="color: #000000;"> mpvs.getPropertyValueList();  
</span><span style="color: #800080;">104</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">105</span>        <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">106</span>            original =<span style="color: #000000;"> Arrays.asList(pvs.getPropertyValues());  
</span><span style="color: #800080;">107</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">108</span>        <span style="color: #008000;">//</span><span style="color: #008000;">获取用户自定义的类型转换  </span>
<span style="color: #800080;">109</span>        TypeConverter converter =<span style="color: #000000;"> getCustomTypeConverter();  
</span><span style="color: #800080;">110</span>        <span style="color: #0000ff;">if</span> (converter == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">111</span>            converter =<span style="color: #000000;"> bw;  
</span><span style="color: #800080;">112</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">113</span>        <span style="color: #008000;">//</span><span style="color: #008000;">创建一个Bean定义属性值解析器，将Bean定义中的属性值解析为Bean实例对象  </span>
<span style="color: #800080;">114        </span><span style="color: #008000;">//</span><span style="color: #008000;">的实际值  </span>
<span style="color: #800080;">115</span>        BeanDefinitionValueResolver valueResolver = <span style="color: #0000ff;">new</span> BeanDefinitionValueResolver(<span style="color: #0000ff;">this</span><span style="color: #000000;">, beanName, mbd, converter);  
</span><span style="color: #800080;">116</span>        <span style="color: #008000;">//</span><span style="color: #008000;">为属性的解析值创建一个拷贝，将拷贝的数据注入到实例对象中  </span>
<span style="color: #800080;">117</span>        List&lt;PropertyValue&gt; deepCopy = <span style="color: #0000ff;">new</span> ArrayList&lt;PropertyValue&gt;<span style="color: #000000;">(original.size());  
</span><span style="color: #800080;">118</span>        boolean resolveNecessary = <span style="color: #0000ff;">false</span><span style="color: #000000;">;  
</span><span style="color: #800080;">119</span>        <span style="color: #0000ff;">for</span><span style="color: #000000;"> (PropertyValue pv : original) {  
</span><span style="color: #800080;">120</span>            <span style="color: #008000;">//</span><span style="color: #008000;">属性值不需要转换  </span>
<span style="color: #800080;">121</span>            <span style="color: #0000ff;">if</span><span style="color: #000000;"> (pv.isConverted()) {  
</span><span style="color: #800080;">122</span><span style="color: #000000;">                deepCopy.add(pv);  
</span><span style="color: #800080;">123</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">124</span>            <span style="color: #008000;">//</span><span style="color: #008000;">属性值需要转换  </span>
<span style="color: #800080;">125</span>            <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">126</span>                String propertyName =<span style="color: #000000;"> pv.getName();  
</span><span style="color: #800080;">127</span>                <span style="color: #008000;">//</span><span style="color: #008000;">原始的属性值，即转换之前的属性值  </span>
<span style="color: #800080;">128</span>                Object originalValue =<span style="color: #000000;"> pv.getValue();  
</span><span style="color: #800080;">129</span>                <span style="color: #008000;">//</span><span style="color: #008000;">转换属性值，例如将引用转换为IoC容器中实例化对象引用  </span>
<span style="color: #800080;">130</span>                Object resolvedValue =<span style="color: #000000;"> valueResolver.resolveValueIfNecessary(pv, originalValue);  
</span><span style="color: #800080;">131                </span><span style="color: #008000;">//</span><span style="color: #008000;">转换之后的属性值  </span>
<span style="color: #800080;">132</span>                Object convertedValue =<span style="color: #000000;"> resolvedValue;  
</span><span style="color: #800080;">133</span>                <span style="color: #008000;">//</span><span style="color: #008000;">属性值是否可以转换  </span>
<span style="color: #800080;">134</span>                boolean convertible = bw.isWritableProperty(propertyName) &amp;&amp;  
<span style="color: #800080;">135</span>                        !<span style="color: #000000;">PropertyAccessorUtils.isNestedOrIndexedProperty(propertyName);  
</span><span style="color: #800080;">136</span>                <span style="color: #0000ff;">if</span><span style="color: #000000;"> (convertible) {  
</span><span style="color: #800080;">137</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">使用用户自定义的类型转换器转换属性值  </span>
<span style="color: #800080;">138</span>                    convertedValue =<span style="color: #000000;"> convertForProperty(resolvedValue, propertyName, bw, converter);  
</span><span style="color: #800080;">139</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">140</span>                <span style="color: #008000;">//</span><span style="color: #008000;">存储转换后的属性值，避免每次属性注入时的转换工作  </span>
<span style="color: #800080;">141</span>                <span style="color: #0000ff;">if</span> (resolvedValue ==<span style="color: #000000;"> originalValue) {  
</span><span style="color: #800080;">142</span>                    <span style="color: #0000ff;">if</span><span style="color: #000000;"> (convertible) {  
</span><span style="color: #800080;">143</span>                        <span style="color: #008000;">//</span><span style="color: #008000;">设置属性转换之后的值  </span>
<span style="color: #800080;">144</span><span style="color: #000000;">                        pv.setConvertedValue(convertedValue);  
</span><span style="color: #800080;">145</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">146</span><span style="color: #000000;">                    deepCopy.add(pv);  
</span><span style="color: #800080;">147</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">148</span>                <span style="color: #008000;">//</span><span style="color: #008000;">属性是可转换的，且属性原始值是字符串类型，且属性的原始类型值不是  </span>
<span style="color: #800080;">149</span>                <span style="color: #008000;">//</span><span style="color: #008000;">动态生成的字符串，且属性的原始值不是集合或者数组类型  </span>
<span style="color: #800080;">150</span>                <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> (convertible &amp;&amp; originalValue instanceof TypedStringValue &amp;&amp;  
<span style="color: #800080;">151</span>                        !((TypedStringValue) originalValue).isDynamic() &amp;&amp;  
<span style="color: #800080;">152</span>                        !(convertedValue instanceof Collection ||<span style="color: #000000;"> ObjectUtils.isArray(convertedValue))) {  
</span><span style="color: #800080;">153</span><span style="color: #000000;">                    pv.setConvertedValue(convertedValue);  
</span><span style="color: #800080;">154</span><span style="color: #000000;">                    deepCopy.add(pv);  
</span><span style="color: #800080;">155</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">156</span>                <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">157</span>                    resolveNecessary = <span style="color: #0000ff;">true</span><span style="color: #000000;">;  
</span><span style="color: #800080;">158</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">重新封装属性的值  </span>
<span style="color: #800080;">159</span>                    deepCopy.add(<span style="color: #0000ff;">new</span><span style="color: #000000;"> PropertyValue(pv, convertedValue));  
</span><span style="color: #800080;">160</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">161</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">162</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">163</span>        <span style="color: #0000ff;">if</span> (mpvs != <span style="color: #0000ff;">null</span> &amp;&amp; !<span style="color: #000000;">resolveNecessary) {  
</span><span style="color: #800080;">164</span>            <span style="color: #008000;">//</span><span style="color: #008000;">标记属性值已经转换过  </span>
<span style="color: #800080;">165</span><span style="color: #000000;">            mpvs.setConverted();  
</span><span style="color: #800080;">166</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">167</span>        <span style="color: #008000;">//</span><span style="color: #008000;">进行属性依赖注入  </span>
<span style="color: #800080;">168</span>        <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">169</span>            bw.setPropertyValues(<span style="color: #0000ff;">new</span><span style="color: #000000;"> MutablePropertyValues(deepCopy));  
</span><span style="color: #800080;">170</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">171</span>        <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (BeansException ex) {  
</span><span style="color: #800080;">172</span>            <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> BeanCreationException(  
</span><span style="color: #800080;">173</span>                    mbd.getResourceDescription(), beanName, <span style="color: #800000;">"</span><span style="color: #800000;">Error setting property values</span><span style="color: #800000;">"</span><span style="color: #000000;">, ex);  
</span><span style="color: #800080;">174</span><span style="color: #000000;">        }  
    }  </span></span></pre>
</div>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">分析上述代码，我们可以看出，对属性的注入过程分以下两种情况：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">(1).属性值类型不需要转换时，不需要解析属性值，直接准备进行依赖注入。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">(2).属性值需要进行类型转换时，如对其他对象的引用等，首先需要解析属性值，然后对解析后的属性值进行依赖注入。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">对
属性值的解析是在BeanDefinitionValueResolver类中的resolveValueIfNecessary方法中进行的，对属性值
的依赖注入是通过bw.setPropertyValues方法实现的，在分析属性值的依赖注入之前，我们先分析一下对属性值的解析过程。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">7、BeanDefinitionValueResolver解析属性值：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">当
容器在对属性进行依赖注入时，如果发现属性值需要进行类型转换，如属性值是容器中另一个Bean实例对象的引用，则容器首先需要根据属性值解析出所引用的
对象，然后才能将该引用对象注入到目标实例对象的属性上去，对属性进行解析的由resolveValueIfNecessary方法实现，其源码如下：</span></p>
<p class="p0">&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #800080;">1    </span><span style="color: #008000;">//</span><span style="color: #008000;">解析属性值，对注入类型进行转换  </span>
2    <span style="color: #0000ff;">public</span><span style="color: #000000;"> Object resolveValueIfNecessary(Object argName, Object value) {  
</span><span style="color: #800080;">3</span>        <span style="color: #008000;">//</span><span style="color: #008000;">对引用类型的属性进行解析  </span>
<span style="color: #800080;">4</span>        <span style="color: #0000ff;">if</span><span style="color: #000000;"> (value instanceof RuntimeBeanReference) {  
</span><span style="color: #800080;">5</span>            RuntimeBeanReference <span style="color: #0000ff;">ref</span> =<span style="color: #000000;"> (RuntimeBeanReference) value;  
</span><span style="color: #800080;">6</span>            <span style="color: #008000;">//</span><span style="color: #008000;">调用引用类型属性的解析方法  </span>
<span style="color: #800080;">7</span>            <span style="color: #0000ff;">return</span> resolveReference(argName, <span style="color: #0000ff;">ref</span><span style="color: #000000;">);  
</span><span style="color: #800080;">8</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">9</span>        <span style="color: #008000;">//</span><span style="color: #008000;">对属性值是引用容器中另一个Bean名称的解析  </span>
<span style="color: #800080;">10</span>        <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span><span style="color: #000000;"> (value instanceof RuntimeBeanNameReference) {  
</span><span style="color: #800080;">11</span>            String refName =<span style="color: #000000;"> ((RuntimeBeanNameReference) value).getBeanName();  
</span><span style="color: #800080;">12</span>            refName =<span style="color: #000000;"> String.valueOf(evaluate(refName));  
</span><span style="color: #800080;">13</span>            <span style="color: #008000;">//</span><span style="color: #008000;">从容器中获取指定名称的Bean  </span>
<span style="color: #800080;">14</span>            <span style="color: #0000ff;">if</span> (!<span style="color: #0000ff;">this</span><span style="color: #000000;">.beanFactory.containsBean(refName)) {  
</span><span style="color: #800080;">15</span>                <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> BeanDefinitionStoreException(  
</span><span style="color: #800080;">16</span>                        <span style="color: #800000;">"</span><span style="color: #800000;">Invalid bean name '</span><span style="color: #800000;">"</span> + refName + <span style="color: #800000;">"</span><span style="color: #800000;">' in bean reference for </span><span style="color: #800000;">"</span> +<span style="color: #000000;"> argName);  
</span><span style="color: #800080;">17</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">18</span>            <span style="color: #0000ff;">return</span><span style="color: #000000;"> refName;  
</span><span style="color: #800080;">19</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">20</span>        <span style="color: #008000;">//</span><span style="color: #008000;">对Bean类型属性的解析，主要是Bean中的内部类  </span>
<span style="color: #800080;">21</span>        <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span><span style="color: #000000;"> (value instanceof BeanDefinitionHolder) {  
</span><span style="color: #800080;">22</span>            BeanDefinitionHolder bdHolder =<span style="color: #000000;"> (BeanDefinitionHolder) value;  
</span><span style="color: #800080;">23</span>            <span style="color: #0000ff;">return</span><span style="color: #000000;"> resolveInnerBean(argName, bdHolder.getBeanName(), bdHolder.getBeanDefinition());  
</span><span style="color: #800080;">24</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">25</span>        <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span><span style="color: #000000;"> (value instanceof BeanDefinition) {  
</span><span style="color: #800080;">26</span>            BeanDefinition bd =<span style="color: #000000;"> (BeanDefinition) value;  
</span><span style="color: #800080;">27</span>            <span style="color: #0000ff;">return</span> resolveInnerBean(argName, <span style="color: #800000;">"</span><span style="color: #800000;">(inner bean)</span><span style="color: #800000;">"</span><span style="color: #000000;">, bd);  
</span><span style="color: #800080;">28</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">29</span>        <span style="color: #008000;">//</span><span style="color: #008000;">对集合数组类型的属性解析  </span>
<span style="color: #800080;">30</span>        <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span><span style="color: #000000;"> (value instanceof ManagedArray) {  
</span><span style="color: #800080;">31</span>            ManagedArray array =<span style="color: #000000;"> (ManagedArray) value;  
</span><span style="color: #800080;">32</span>            <span style="color: #008000;">//</span><span style="color: #008000;">获取数组的类型  </span>
<span style="color: #800080;">33</span>            Class elementType =<span style="color: #000000;"> array.resolvedElementType;  
</span><span style="color: #800080;">34</span>            <span style="color: #0000ff;">if</span> (elementType == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">35</span>                <span style="color: #008000;">//</span><span style="color: #008000;">获取数组元素的类型  </span>
<span style="color: #800080;">36</span>                String elementTypeName =<span style="color: #000000;"> array.getElementTypeName();  
</span><span style="color: #800080;">37</span>                <span style="color: #0000ff;">if</span><span style="color: #000000;"> (StringUtils.hasText(elementTypeName)) {  
</span><span style="color: #800080;">38</span>                    <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">39</span>                        <span style="color: #008000;">//</span><span style="color: #008000;">使用反射机制创建指定类型的对象  </span>
<span style="color: #800080;">40</span>                        elementType = ClassUtils.forName(elementTypeName, <span style="color: #0000ff;">this</span><span style="color: #000000;">.beanFactory.getBeanClassLoader());  
</span><span style="color: #800080;">41</span>                        array.resolvedElementType =<span style="color: #000000;"> elementType;  
</span><span style="color: #800080;">42</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">43</span>                    <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Throwable ex) {  
</span><span style="color: #800080;">44</span>                        <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> BeanCreationException(  
</span><span style="color: #800080;">45</span>                                <span style="color: #0000ff;">this</span>.beanDefinition.getResourceDescription(), <span style="color: #0000ff;">this</span><span style="color: #000000;">.beanName,  
</span><span style="color: #800080;">46</span>                                <span style="color: #800000;">"</span><span style="color: #800000;">Error resolving array type for </span><span style="color: #800000;">"</span> +<span style="color: #000000;"> argName, ex);  
</span><span style="color: #800080;">47</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">48</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">49</span>                <span style="color: #008000;">//</span><span style="color: #008000;">没有获取到数组的类型，也没有获取到数组元素的类型，则直接设置数  </span>
<span style="color: #800080;">50                </span><span style="color: #008000;">//</span><span style="color: #008000;">组的类型为Object  </span>
<span style="color: #800080;">51</span>                <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">52</span>                    elementType = Object.<span style="color: #0000ff;">class</span><span style="color: #000000;">;  
</span><span style="color: #800080;">53</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">54</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">55</span>            <span style="color: #008000;">//</span><span style="color: #008000;">创建指定类型的数组  </span>
<span style="color: #800080;">56</span>            <span style="color: #0000ff;">return</span> resolveManagedArray(argName, (List&lt;?&gt;<span style="color: #000000;">) value, elementType);  
</span><span style="color: #800080;">57</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">58</span>        <span style="color: #008000;">//</span><span style="color: #008000;">解析list类型的属性值  </span>
<span style="color: #800080;">59</span>        <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span><span style="color: #000000;"> (value instanceof ManagedList) {  
</span><span style="color: #800080;">60</span>            <span style="color: #0000ff;">return</span> resolveManagedList(argName, (List&lt;?&gt;<span style="color: #000000;">) value);  
</span><span style="color: #800080;">61</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">62</span>        <span style="color: #008000;">//</span><span style="color: #008000;">解析set类型的属性值  </span>
<span style="color: #800080;">63</span>        <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span><span style="color: #000000;"> (value instanceof ManagedSet) {  
</span><span style="color: #800080;">64</span>            <span style="color: #0000ff;">return</span> resolveManagedSet(argName, (Set&lt;?&gt;<span style="color: #000000;">) value);  
</span><span style="color: #800080;">65</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">66</span>        <span style="color: #008000;">//</span><span style="color: #008000;">解析map类型的属性值  </span>
<span style="color: #800080;">67</span>        <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span><span style="color: #000000;"> (value instanceof ManagedMap) {  
</span><span style="color: #800080;">68</span>            <span style="color: #0000ff;">return</span> resolveManagedMap(argName, (Map&lt;?, ?&gt;<span style="color: #000000;">) value);  
</span><span style="color: #800080;">69</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">70</span>        <span style="color: #008000;">//</span><span style="color: #008000;">解析props类型的属性值，props其实就是key和value均为字符串的map  </span>
<span style="color: #800080;">71</span>        <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span><span style="color: #000000;"> (value instanceof ManagedProperties) {  
</span><span style="color: #800080;">72</span>            Properties original =<span style="color: #000000;"> (Properties) value;  
</span><span style="color: #800080;">73</span>            <span style="color: #008000;">//</span><span style="color: #008000;">创建一个拷贝，用于作为解析后的返回值  </span>
<span style="color: #800080;">74</span>            Properties copy = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Properties();  
</span><span style="color: #800080;">75</span>            <span style="color: #0000ff;">for</span><span style="color: #000000;"> (Map.Entry propEntry : original.entrySet()) {  
</span><span style="color: #800080;">76</span>                Object propKey =<span style="color: #000000;"> propEntry.getKey();  
</span><span style="color: #800080;">77</span>                Object propValue =<span style="color: #000000;"> propEntry.getValue();  
</span><span style="color: #800080;">78</span>                <span style="color: #0000ff;">if</span><span style="color: #000000;"> (propKey instanceof TypedStringValue) {  
</span><span style="color: #800080;">79</span>                    propKey =<span style="color: #000000;"> evaluate((TypedStringValue) propKey);  
</span><span style="color: #800080;">80</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">81</span>                <span style="color: #0000ff;">if</span><span style="color: #000000;"> (propValue instanceof TypedStringValue) {  
</span><span style="color: #800080;">82</span>                    propValue =<span style="color: #000000;"> evaluate((TypedStringValue) propValue);  
</span><span style="color: #800080;">83</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">84</span><span style="color: #000000;">                copy.put(propKey, propValue);  
</span><span style="color: #800080;">85</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">86</span>            <span style="color: #0000ff;">return</span><span style="color: #000000;"> copy;  
</span><span style="color: #800080;">87</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">88</span>        <span style="color: #008000;">//</span><span style="color: #008000;">解析字符串类型的属性值  </span>
<span style="color: #800080;">89</span>        <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span><span style="color: #000000;"> (value instanceof TypedStringValue) {  
</span><span style="color: #800080;">90</span>            TypedStringValue typedStringValue =<span style="color: #000000;"> (TypedStringValue) value;  
</span><span style="color: #800080;">91</span>            Object valueObject =<span style="color: #000000;"> evaluate(typedStringValue);  
</span><span style="color: #800080;">92</span>            <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">93</span>                <span style="color: #008000;">//</span><span style="color: #008000;">获取属性的目标类型  </span>
<span style="color: #800080;">94</span>                Class&lt;?&gt; resolvedTargetType =<span style="color: #000000;"> resolveTargetType(typedStringValue);  
</span><span style="color: #800080;">95</span>                <span style="color: #0000ff;">if</span> (resolvedTargetType != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">96</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">对目标类型的属性进行解析，递归调用  </span>
<span style="color: #800080;">97</span>                    <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span><span style="color: #000000;">.typeConverter.convertIfNecessary(valueObject, resolvedTargetType);  
</span><span style="color: #800080;">98</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">99</span>                <span style="color: #008000;">//</span><span style="color: #008000;">没有获取到属性的目标对象，则按Object类型返回  </span>
<span style="color: #800080;">100</span>                <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">101</span>                    <span style="color: #0000ff;">return</span><span style="color: #000000;"> valueObject;  
</span><span style="color: #800080;">102</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">103</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">104</span>            <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Throwable ex) {  
</span><span style="color: #800080;">105</span>                <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> BeanCreationException(  
</span><span style="color: #800080;">106</span>                        <span style="color: #0000ff;">this</span>.beanDefinition.getResourceDescription(), <span style="color: #0000ff;">this</span><span style="color: #000000;">.beanName,  
</span><span style="color: #800080;">107</span>                        <span style="color: #800000;">"</span><span style="color: #800000;">Error converting typed String value for </span><span style="color: #800000;">"</span> +<span style="color: #000000;"> argName, ex);  
</span><span style="color: #800080;">108</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">109</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">110</span>        <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">111</span>            <span style="color: #0000ff;">return</span><span style="color: #000000;"> evaluate(value);  
</span><span style="color: #800080;">112</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">113</span><span style="color: #000000;">    }  
</span><span style="color: #800080;">114</span>    <span style="color: #008000;">//</span><span style="color: #008000;">解析引用类型的属性值  </span>
115    <span style="color: #0000ff;">private</span> Object resolveReference(Object argName, RuntimeBeanReference <span style="color: #0000ff;">ref</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">116</span>        <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">117</span>            <span style="color: #008000;">//</span><span style="color: #008000;">获取引用的Bean名称  </span>
<span style="color: #800080;">118</span>            String refName = <span style="color: #0000ff;">ref</span><span style="color: #000000;">.getBeanName();  
</span><span style="color: #800080;">119</span>            refName =<span style="color: #000000;"> String.valueOf(evaluate(refName));  
</span><span style="color: #800080;">120</span>            <span style="color: #008000;">//</span><span style="color: #008000;">如果引用的对象在父类容器中，则从父类容器中获取指定的引用对象  </span>
<span style="color: #800080;">121</span>            <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">ref</span><span style="color: #000000;">.isToParent()) {  
</span><span style="color: #800080;">122</span>                <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">this</span>.beanFactory.getParentBeanFactory() == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">123</span>                    <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> BeanCreationException(  
</span><span style="color: #800080;">124</span>                            <span style="color: #0000ff;">this</span>.beanDefinition.getResourceDescription(), <span style="color: #0000ff;">this</span><span style="color: #000000;">.beanName,  
</span><span style="color: #800080;">125</span>                            <span style="color: #800000;">"</span><span style="color: #800000;">Can't resolve reference to bean '</span><span style="color: #800000;">"</span> + refName +  
<span style="color: #800080;">126</span>                            <span style="color: #800000;">"</span><span style="color: #800000;">' in parent factory: no parent factory available</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">127</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">128</span>                <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span><span style="color: #000000;">.beanFactory.getParentBeanFactory().getBean(refName);  
</span><span style="color: #800080;">129</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">130</span>            <span style="color: #008000;">//</span><span style="color: #008000;">从当前的容器中获取指定的引用Bean对象，如果指定的Bean没有被实例化  </span>
<span style="color: #800080;">131</span>            <span style="color: #008000;">//</span><span style="color: #008000;">则会递归触发引用Bean的初始化和依赖注入  </span>
<span style="color: #800080;">132</span>            <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">133</span>                Object bean = <span style="color: #0000ff;">this</span><span style="color: #000000;">.beanFactory.getBean(refName);  
</span><span style="color: #800080;">134</span>                <span style="color: #008000;">//</span><span style="color: #008000;">将当前实例化对象的依赖引用对象  </span>
<span style="color: #800080;">135</span>                <span style="color: #0000ff;">this</span>.beanFactory.registerDependentBean(refName, <span style="color: #0000ff;">this</span><span style="color: #000000;">.beanName);  
</span><span style="color: #800080;">136</span>                <span style="color: #0000ff;">return</span><span style="color: #000000;"> bean;  
</span><span style="color: #800080;">137</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">138</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">139</span>        <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (BeansException ex) {  
</span><span style="color: #800080;">140</span>            <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> BeanCreationException(  
</span><span style="color: #800080;">141</span>                    <span style="color: #0000ff;">this</span>.beanDefinition.getResourceDescription(), <span style="color: #0000ff;">this</span><span style="color: #000000;">.beanName,  
</span><span style="color: #800080;">142</span>                    <span style="color: #800000;">"</span><span style="color: #800000;">Cannot resolve reference to bean '</span><span style="color: #800000;">"</span> + <span style="color: #0000ff;">ref</span>.getBeanName() + <span style="color: #800000;">"</span><span style="color: #800000;">' while setting </span><span style="color: #800000;">"</span> +<span style="color: #000000;"> argName, ex);  
</span><span style="color: #800080;">143</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">144</span><span style="color: #000000;">    }   
</span><span style="color: #800080;">145    </span><span style="color: #008000;">//</span><span style="color: #008000;">解析array类型的属性  </span>
146    <span style="color: #0000ff;">private</span> Object resolveManagedArray(Object argName, List&lt;?&gt;<span style="color: #000000;"> ml, Class elementType) {  
</span><span style="color: #800080;">147</span>        <span style="color: #008000;">//</span><span style="color: #008000;">创建一个指定类型的数组，用于存放和返回解析后的数组  </span>
<span style="color: #800080;">148</span>        Object resolved =<span style="color: #000000;"> Array.newInstance(elementType, ml.size());  
</span><span style="color: #800080;">149</span>        <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> i = <span style="color: #800080;">0</span>; i &lt; ml.size(); i++<span style="color: #000000;">) {  
</span><span style="color: #800080;">150</span>        <span style="color: #008000;">//</span><span style="color: #008000;">递归解析array的每一个元素，并将解析后的值设置到resolved数组中，索引为i  </span>
<span style="color: #800080;">151</span>            Array.<span style="color: #0000ff;">set</span><span style="color: #000000;">(resolved, i,  
</span><span style="color: #800080;">152</span>                resolveValueIfNecessary(<span style="color: #0000ff;">new</span> KeyedArgName(argName, i), ml.<span style="color: #0000ff;">get</span><span style="color: #000000;">(i)));  
</span><span style="color: #800080;">153</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">154</span>        <span style="color: #0000ff;">return</span><span style="color: #000000;"> resolved;  
</span><span style="color: #800080;">155</span><span style="color: #000000;">    }  
</span><span style="color: #800080;">156</span>    <span style="color: #008000;">//</span><span style="color: #008000;">解析list类型的属性  </span>
<span style="color: #800080;">157</span>    <span style="color: #0000ff;">private</span> List resolveManagedList(Object argName, List&lt;?&gt;<span style="color: #000000;"> ml) {  
</span><span style="color: #800080;">158</span>        List&lt;Object&gt; resolved = <span style="color: #0000ff;">new</span> ArrayList&lt;Object&gt;<span style="color: #000000;">(ml.size());  
</span><span style="color: #800080;">159</span>        <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> i = <span style="color: #800080;">0</span>; i &lt; ml.size(); i++<span style="color: #000000;">) {  
</span><span style="color: #800080;">160</span>            <span style="color: #008000;">//</span><span style="color: #008000;">递归解析list的每一个元素  </span>
<span style="color: #800080;">161</span><span style="color: #000000;">            resolved.add(  
</span><span style="color: #800080;">162</span>                resolveValueIfNecessary(<span style="color: #0000ff;">new</span> KeyedArgName(argName, i), ml.<span style="color: #0000ff;">get</span><span style="color: #000000;">(i)));  
</span><span style="color: #800080;">163</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">164</span>        <span style="color: #0000ff;">return</span><span style="color: #000000;"> resolved;  
</span><span style="color: #800080;">165</span><span style="color: #000000;">    }  
</span><span style="color: #800080;">166    </span><span style="color: #008000;">//</span><span style="color: #008000;">解析set类型的属性  </span>
<span style="color: #800080;">167</span>    <span style="color: #0000ff;">private</span> Set resolveManagedSet(Object argName, Set&lt;?&gt;<span style="color: #000000;"> ms) {  
</span><span style="color: #800080;">168</span>        Set&lt;Object&gt; resolved = <span style="color: #0000ff;">new</span> LinkedHashSet&lt;Object&gt;<span style="color: #000000;">(ms.size());  
</span><span style="color: #800080;">169</span>        <span style="color: #0000ff;">int</span> i = <span style="color: #800080;">0</span><span style="color: #000000;">;  
</span><span style="color: #800080;">170</span>        <span style="color: #008000;">//</span><span style="color: #008000;">递归解析set的每一个元素  </span>
<span style="color: #800080;">171</span>        <span style="color: #0000ff;">for</span><span style="color: #000000;"> (Object m : ms) {  
</span><span style="color: #800080;">172</span>            resolved.add(resolveValueIfNecessary(<span style="color: #0000ff;">new</span><span style="color: #000000;"> KeyedArgName(argName, i), m));  
</span><span style="color: #800080;">173</span>            i++<span style="color: #000000;">;  
</span><span style="color: #800080;">174</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">175</span>        <span style="color: #0000ff;">return</span><span style="color: #000000;"> resolved;  
</span><span style="color: #800080;">176</span><span style="color: #000000;">    }  
</span><span style="color: #800080;">177</span>    <span style="color: #008000;">//</span><span style="color: #008000;">解析map类型的属性  </span>
<span style="color: #800080;">178</span>    <span style="color: #0000ff;">private</span> Map resolveManagedMap(Object argName, Map&lt;?, ?&gt;<span style="color: #000000;"> mm) {  
</span><span style="color: #800080;">179</span>        Map&lt;Object, Object&gt; resolved = <span style="color: #0000ff;">new</span> LinkedHashMap&lt;Object, Object&gt;<span style="color: #000000;">(mm.size());  
</span><span style="color: #800080;">180</span>        <span style="color: #008000;">//</span><span style="color: #008000;">递归解析map中每一个元素的key和value  </span>
<span style="color: #800080;">181</span>        <span style="color: #0000ff;">for</span><span style="color: #000000;"> (Map.Entry entry : mm.entrySet()) {  
</span><span style="color: #800080;">182</span>            Object resolvedKey =<span style="color: #000000;"> resolveValueIfNecessary(argName, entry.getKey());  
</span><span style="color: #800080;">183</span>            Object resolvedValue =<span style="color: #000000;"> resolveValueIfNecessary(  
</span><span style="color: #800080;">184</span>                    <span style="color: #0000ff;">new</span><span style="color: #000000;"> KeyedArgName(argName, entry.getKey()), entry.getValue());  
</span><span style="color: #800080;">185</span><span style="color: #000000;">            resolved.put(resolvedKey, resolvedValue);  
</span><span style="color: #800080;">186</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">187</span>        <span style="color: #0000ff;">return</span><span style="color: #000000;"> resolved;  
</span><span style="color: #800080;">188</span>    } </span></pre>
</div>
<p class="p0">&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p class="p0">&nbsp;</p>
<p><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">通
过上面的代码分析，我们明白了Spring是如何将引用类型，内部类以及集合类型等属性进行解析的，属性值解析完成后就可以进行依赖注入了，依赖注入的过
程就是Bean对象实例设置到它所依赖的Bean对象属性上去，在第7步中我们已经说过，依赖注入是通过bw.setPropertyValues方法实
现的，该方法也使用了委托模式，在BeanWrapper接口中至少定义了方法声明，依赖注入的具体实现交由其实现类BeanWrapperImpl来完
成，下面我们就分析依BeanWrapperImpl中赖注入相关的源码。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">8、BeanWrapperImpl对Bean属性的依赖注入：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">BeanWrapperImpl类主要是对容器中完成初始化的Bean实例对象进行属性的依赖注入，即把Bean对象设置到它所依赖的另一个Bean的属性中去，依赖注入的相关源码如下：</span></p>
<p class="p0">&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #800080;">1    </span><span style="color: #008000;">//</span><span style="color: #008000;">实现属性依赖注入功能  </span>
2    <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setPropertyValue(PropertyTokenHolder tokens, PropertyValue pv) throws BeansException {  
</span><span style="color: #800080;">3</span>        <span style="color: #008000;">//</span><span style="color: #008000;">PropertyTokenHolder主要保存属性的名称、路径，以及集合的size等信息  </span>
<span style="color: #800080;">4</span>        String propertyName =<span style="color: #000000;"> tokens.canonicalName;  
</span><span style="color: #800080;">5</span>        String actualName =<span style="color: #000000;"> tokens.actualName;  
</span><span style="color: #800080;">6</span>        <span style="color: #008000;">//</span><span style="color: #008000;">keys是用来保存集合类型属性的size  </span>
<span style="color: #800080;">7</span>        <span style="color: #0000ff;">if</span> (tokens.keys != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">8</span>            <span style="color: #008000;">//</span><span style="color: #008000;">将属性信息拷贝  </span>
<span style="color: #800080;">9</span>            PropertyTokenHolder getterTokens = <span style="color: #0000ff;">new</span><span style="color: #000000;"> PropertyTokenHolder();  
</span><span style="color: #800080;">10</span>            getterTokens.canonicalName =<span style="color: #000000;"> tokens.canonicalName;  
</span><span style="color: #800080;">11</span>            getterTokens.actualName =<span style="color: #000000;"> tokens.actualName;  
</span><span style="color: #800080;">12</span>            getterTokens.keys = <span style="color: #0000ff;">new</span> String[tokens.keys.length - <span style="color: #800080;">1</span><span style="color: #000000;">];  
</span><span style="color: #800080;">13</span>            System.arraycopy(tokens.keys, <span style="color: #800080;">0</span>, getterTokens.keys, <span style="color: #800080;">0</span>, tokens.keys.length - <span style="color: #800080;">1</span><span style="color: #000000;">);  
</span><span style="color: #800080;">14</span><span style="color: #000000;">            Object propValue;  
</span><span style="color: #800080;">15</span>            <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">16                </span><span style="color: #008000;">//</span><span style="color: #008000;">获取属性值，该方法内部使用JDK的内省( Introspector)机制，调用属性</span><span style="color: #008000;">//</span><span style="color: #008000;">的getter(readerMethod)方法，获取属性的值  </span>
<span style="color: #800080;">17</span>                propValue =<span style="color: #000000;"> getPropertyValue(getterTokens);  
</span><span style="color: #800080;">18</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">19</span>            <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (NotReadablePropertyException ex) {  
</span><span style="color: #800080;">20</span>                <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span> NotWritablePropertyException(getRootClass(), <span style="color: #0000ff;">this</span>.nestedPath +<span style="color: #000000;"> propertyName,  
</span><span style="color: #800080;">21</span>                        <span style="color: #800000;">"</span><span style="color: #800000;">Cannot access indexed value in property referenced </span><span style="color: #800000;">"</span> +  
<span style="color: #800080;">22</span>                        <span style="color: #800000;">"</span><span style="color: #800000;">in indexed property path '</span><span style="color: #800000;">"</span> + propertyName + <span style="color: #800000;">"</span><span style="color: #800000;">'</span><span style="color: #800000;">"</span><span style="color: #000000;">, ex);  
</span><span style="color: #800080;">23</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">24</span>            <span style="color: #008000;">//</span><span style="color: #008000;">获取集合类型属性的长度  </span>
<span style="color: #800080;">25</span>            String key = tokens.keys[tokens.keys.length - <span style="color: #800080;">1</span><span style="color: #000000;">];  
</span><span style="color: #800080;">26</span>            <span style="color: #0000ff;">if</span> (propValue == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">27</span>                <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span> NullValueInNestedPathException(getRootClass(), <span style="color: #0000ff;">this</span>.nestedPath +<span style="color: #000000;"> propertyName,  
</span><span style="color: #800080;">28</span>                        <span style="color: #800000;">"</span><span style="color: #800000;">Cannot access indexed value in property referenced </span><span style="color: #800000;">"</span> +  
<span style="color: #800080;">29</span>                        <span style="color: #800000;">"</span><span style="color: #800000;">in indexed property path '</span><span style="color: #800000;">"</span> + propertyName + <span style="color: #800000;">"</span><span style="color: #800000;">': returned null</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">30</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">31</span>            <span style="color: #008000;">//</span><span style="color: #008000;">注入array类型的属性值  </span>
<span style="color: #800080;">32</span>            <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span><span style="color: #000000;"> (propValue.getClass().isArray()) {  
</span><span style="color: #800080;">33</span>                <span style="color: #008000;">//</span><span style="color: #008000;">获取属性的描述符  </span>
<span style="color: #800080;">34</span>                PropertyDescriptor pd =<span style="color: #000000;"> getCachedIntrospectionResults().getPropertyDescriptor(actualName);  
</span><span style="color: #800080;">35</span>                <span style="color: #008000;">//</span><span style="color: #008000;">获取数组的类型  </span>
<span style="color: #800080;">36</span>                Class requiredType =<span style="color: #000000;"> propValue.getClass().getComponentType();  
</span><span style="color: #800080;">37</span>                <span style="color: #008000;">//</span><span style="color: #008000;">获取数组的长度  </span>
<span style="color: #800080;">38</span>                <span style="color: #0000ff;">int</span> arrayIndex =<span style="color: #000000;"> Integer.parseInt(key);  
</span><span style="color: #800080;">39</span>                Object oldValue = <span style="color: #0000ff;">null</span><span style="color: #000000;">;  
</span><span style="color: #800080;">40</span>                <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">41</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">获取数组以前初始化的值  </span>
<span style="color: #800080;">42</span>                    <span style="color: #0000ff;">if</span><span style="color: #000000;"> (isExtractOldValueForEditor()) {  
</span><span style="color: #800080;">43</span>                        oldValue = Array.<span style="color: #0000ff;">get</span><span style="color: #000000;">(propValue, arrayIndex);  
</span><span style="color: #800080;">44</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">45</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">将属性的值赋值给数组中的元素  </span>
<span style="color: #800080;">46</span>                    Object convertedValue =<span style="color: #000000;"> convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType,  
</span><span style="color: #800080;">47</span>                            <span style="color: #0000ff;">new</span> PropertyTypeDescriptor(pd, <span style="color: #0000ff;">new</span> MethodParameter(pd.getReadMethod(), -<span style="color: #800080;">1</span><span style="color: #000000;">), requiredType));  
</span><span style="color: #800080;">48</span>                    Array.<span style="color: #0000ff;">set</span><span style="color: #000000;">(propValue, arrayIndex, convertedValue);  
</span><span style="color: #800080;">49</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">50</span>                <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IndexOutOfBoundsException ex) {  
</span><span style="color: #800080;">51</span>                    <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span> InvalidPropertyException(getRootClass(), <span style="color: #0000ff;">this</span>.nestedPath +<span style="color: #000000;"> propertyName,  
</span><span style="color: #800080;">52</span>                            <span style="color: #800000;">"</span><span style="color: #800000;">Invalid array index in property path '</span><span style="color: #800000;">"</span> + propertyName + <span style="color: #800000;">"</span><span style="color: #800000;">'</span><span style="color: #800000;">"</span><span style="color: #000000;">, ex);  
</span><span style="color: #800080;">53</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">54</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">55</span>            <span style="color: #008000;">//</span><span style="color: #008000;">注入list类型的属性值  </span>
<span style="color: #800080;">56</span>            <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span><span style="color: #000000;"> (propValue instanceof List) {  
</span><span style="color: #800080;">57</span>                PropertyDescriptor pd =<span style="color: #000000;"> getCachedIntrospectionResults().getPropertyDescriptor(actualName);  
</span><span style="color: #800080;">58</span>                <span style="color: #008000;">//</span><span style="color: #008000;">获取list集合的类型  </span>
<span style="color: #800080;">59</span>                Class requiredType =<span style="color: #000000;"> GenericCollectionTypeResolver.getCollectionReturnType(  
</span><span style="color: #800080;">60</span><span style="color: #000000;">                        pd.getReadMethod(), tokens.keys.length);  
</span><span style="color: #800080;">61</span>                List list =<span style="color: #000000;"> (List) propValue;  
</span><span style="color: #800080;">62</span>                <span style="color: #008000;">//</span><span style="color: #008000;">获取list集合的size  </span>
<span style="color: #800080;">63</span>                <span style="color: #0000ff;">int</span> index =<span style="color: #000000;"> Integer.parseInt(key);  
</span><span style="color: #800080;">64</span>                Object oldValue = <span style="color: #0000ff;">null</span><span style="color: #000000;">;  
</span><span style="color: #800080;">65</span>                <span style="color: #0000ff;">if</span> (isExtractOldValueForEditor() &amp;&amp; index &lt;<span style="color: #000000;"> list.size()) {  
</span><span style="color: #800080;">66</span>                    oldValue = list.<span style="color: #0000ff;">get</span><span style="color: #000000;">(index);  
</span><span style="color: #800080;">67</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">68</span>                <span style="color: #008000;">//</span><span style="color: #008000;">获取list解析后的属性值  </span>
<span style="color: #800080;">69</span>                Object convertedValue =<span style="color: #000000;"> convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType,  
</span><span style="color: #800080;">70</span>                        <span style="color: #0000ff;">new</span> PropertyTypeDescriptor(pd, <span style="color: #0000ff;">new</span> MethodParameter(pd.getReadMethod(), -<span style="color: #800080;">1</span><span style="color: #000000;">), requiredType));  
</span><span style="color: #800080;">71</span>                <span style="color: #0000ff;">if</span> (index &lt;<span style="color: #000000;"> list.size()) {  
</span><span style="color: #800080;">72</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">为list属性赋值  </span>
<span style="color: #800080;">73</span>                    list.<span style="color: #0000ff;">set</span><span style="color: #000000;">(index, convertedValue);  
</span><span style="color: #800080;">74</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">75</span>                <span style="color: #008000;">//</span><span style="color: #008000;">如果list的长度大于属性值的长度，则多余的元素赋值为null  </span>
<span style="color: #800080;">76</span>                <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> (index &gt;=<span style="color: #000000;"> list.size()) {  
</span><span style="color: #800080;">77</span>                    <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> i = list.size(); i &lt; index; i++<span style="color: #000000;">) {  
</span><span style="color: #800080;">78</span>                        <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">79</span>                            list.add(<span style="color: #0000ff;">null</span><span style="color: #000000;">);  
</span><span style="color: #800080;">80</span><span style="color: #000000;">                        }  
</span><span style="color: #800080;">81</span>                        <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (NullPointerException ex) {  
</span><span style="color: #800080;">82</span>                            <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span> InvalidPropertyException(getRootClass(), <span style="color: #0000ff;">this</span>.nestedPath +<span style="color: #000000;"> propertyName,  
</span><span style="color: #800080;">83</span>                                    <span style="color: #800000;">"</span><span style="color: #800000;">Cannot set element with index </span><span style="color: #800000;">"</span> + index + <span style="color: #800000;">"</span><span style="color: #800000;"> in List of size </span><span style="color: #800000;">"</span> +  
<span style="color: #800080;">84</span>                                    list.size() + <span style="color: #800000;">"</span><span style="color: #800000;">, accessed using property path '</span><span style="color: #800000;">"</span> + propertyName +  
<span style="color: #800080;">85</span>                                    <span style="color: #800000;">"</span><span style="color: #800000;">': List does not support filling up gaps with null elements</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">86</span><span style="color: #000000;">                        }  
</span><span style="color: #800080;">87</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">88</span><span style="color: #000000;">                    list.add(convertedValue);  
</span><span style="color: #800080;">89</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">90</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">91</span>            <span style="color: #008000;">//</span><span style="color: #008000;">注入map类型的属性值  </span>
<span style="color: #800080;">92</span>            <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span><span style="color: #000000;"> (propValue instanceof Map) {  
</span><span style="color: #800080;">93</span>                PropertyDescriptor pd =<span style="color: #000000;"> getCachedIntrospectionResults().getPropertyDescriptor(actualName);  
</span><span style="color: #800080;">94</span>                <span style="color: #008000;">//</span><span style="color: #008000;">获取map集合key的类型  </span>
<span style="color: #800080;">95</span>                Class mapKeyType =<span style="color: #000000;"> GenericCollectionTypeResolver.getMapKeyReturnType(  
</span><span style="color: #800080;">96</span><span style="color: #000000;">                        pd.getReadMethod(), tokens.keys.length);  
</span><span style="color: #800080;">97</span>                <span style="color: #008000;">//</span><span style="color: #008000;">获取map集合value的类型  </span>
<span style="color: #800080;">98</span>                Class mapValueType =<span style="color: #000000;"> GenericCollectionTypeResolver.getMapValueReturnType(  
</span><span style="color: #800080;">99</span><span style="color: #000000;">                        pd.getReadMethod(), tokens.keys.length);  
</span><span style="color: #800080;">100</span>                Map map =<span style="color: #000000;"> (Map) propValue;  
</span><span style="color: #800080;">101</span>                <span style="color: #008000;">//</span><span style="color: #008000;">解析map类型属性key值  </span>
<span style="color: #800080;">102</span>                Object convertedMapKey = convertIfNecessary(<span style="color: #0000ff;">null</span>, <span style="color: #0000ff;">null</span><span style="color: #000000;">, key, mapKeyType,  
</span><span style="color: #800080;">103</span>                        <span style="color: #0000ff;">new</span> PropertyTypeDescriptor(pd, <span style="color: #0000ff;">new</span> MethodParameter(pd.getReadMethod(), -<span style="color: #800080;">1</span><span style="color: #000000;">), mapKeyType));  
</span><span style="color: #800080;">104</span>                Object oldValue = <span style="color: #0000ff;">null</span><span style="color: #000000;">;  
</span><span style="color: #800080;">105</span>                <span style="color: #0000ff;">if</span><span style="color: #000000;"> (isExtractOldValueForEditor()) {  
</span><span style="color: #800080;">106</span>                    oldValue = map.<span style="color: #0000ff;">get</span><span style="color: #000000;">(convertedMapKey);  
</span><span style="color: #800080;">107</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">108</span>                <span style="color: #008000;">//</span><span style="color: #008000;">解析map类型属性value值  </span>
<span style="color: #800080;">109</span>                Object convertedMapValue =<span style="color: #000000;"> convertIfNecessary(  
</span><span style="color: #800080;">110</span><span style="color: #000000;">                        propertyName, oldValue, pv.getValue(), mapValueType,  
</span><span style="color: #800080;">111</span>                        <span style="color: #0000ff;">new</span> TypeDescriptor(<span style="color: #0000ff;">new</span> MethodParameter(pd.getReadMethod(), -<span style="color: #800080;">1</span>, tokens.keys.length + <span style="color: #800080;">1</span><span style="color: #000000;">)));  
</span><span style="color: #800080;">112</span>                <span style="color: #008000;">//</span><span style="color: #008000;">将解析后的key和value值赋值给map集合属性  </span>
<span style="color: #800080;">113</span><span style="color: #000000;">                map.put(convertedMapKey, convertedMapValue);  
</span><span style="color: #800080;">114</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">115</span>            <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">116</span>                <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span> InvalidPropertyException(getRootClass(), <span style="color: #0000ff;">this</span>.nestedPath +<span style="color: #000000;"> propertyName,  
</span><span style="color: #800080;">117</span>                        <span style="color: #800000;">"</span><span style="color: #800000;">Property referenced in indexed property path '</span><span style="color: #800000;">"</span> + propertyName +  
<span style="color: #800080;">118</span>                        <span style="color: #800000;">"</span><span style="color: #800000;">' is neither an array nor a List nor a Map; returned value was [</span><span style="color: #800000;">"</span> + pv.getValue() + <span style="color: #800000;">"</span><span style="color: #800000;">]</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">119</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">120</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">121</span>        <span style="color: #008000;">//</span><span style="color: #008000;">对非集合类型的属性注入  </span>
<span style="color: #800080;">122</span>        <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">123</span>            PropertyDescriptor pd =<span style="color: #000000;"> pv.resolvedDescriptor;  
</span><span style="color: #800080;">124</span>            <span style="color: #0000ff;">if</span> (pd == <span style="color: #0000ff;">null</span> || !pd.getWriteMethod().getDeclaringClass().isInstance(<span style="color: #0000ff;">this</span>.<span style="color: #0000ff;">object</span><span style="color: #000000;">)) {  
</span><span style="color: #800080;">125</span>                pd =<span style="color: #000000;"> getCachedIntrospectionResults().getPropertyDescriptor(actualName);  
</span><span style="color: #800080;">126</span>                <span style="color: #008000;">//</span><span style="color: #008000;">无法获取到属性名或者属性没有提供setter(写方法)方法  </span>
<span style="color: #800080;">127</span>                <span style="color: #0000ff;">if</span> (pd == <span style="color: #0000ff;">null</span> || pd.getWriteMethod() == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">128</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">如果属性值是可选的，即不是必须的，则忽略该属性值  </span>
<span style="color: #800080;">129</span>                    <span style="color: #0000ff;">if</span><span style="color: #000000;"> (pv.isOptional()) {  
</span><span style="color: #800080;">130</span>                        logger.debug(<span style="color: #800000;">"</span><span style="color: #800000;">Ignoring optional value for property '</span><span style="color: #800000;">"</span> + actualName +  
<span style="color: #800080;">131</span>                                <span style="color: #800000;">"</span><span style="color: #800000;">' - property not found on bean class [</span><span style="color: #800000;">"</span> + getRootClass().getName() + <span style="color: #800000;">"</span><span style="color: #800000;">]</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">132</span>                        <span style="color: #0000ff;">return</span><span style="color: #000000;">;  
</span><span style="color: #800080;">133</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">134</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">如果属性值是必须的，则抛出无法给属性赋值，因为每天提供setter方法异常  </span>
<span style="color: #800080;">135</span>                    <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">136</span>                        PropertyMatches matches =<span style="color: #000000;"> PropertyMatches.forProperty(propertyName, getRootClass());  
</span><span style="color: #800080;">137</span>                        <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> NotWritablePropertyException(  
</span><span style="color: #800080;">138</span>                                getRootClass(), <span style="color: #0000ff;">this</span>.nestedPath +<span style="color: #000000;"> propertyName,  
</span><span style="color: #800080;">139</span><span style="color: #000000;">                                matches.buildErrorMessage(), matches.getPossibleMatches());  
</span><span style="color: #800080;">140</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">141</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">142</span>                pv.getOriginalPropertyValue().resolvedDescriptor =<span style="color: #000000;"> pd;  
</span><span style="color: #800080;">143</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">144</span>            Object oldValue = <span style="color: #0000ff;">null</span><span style="color: #000000;">;  
</span><span style="color: #800080;">145</span>            <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">146</span>                Object originalValue =<span style="color: #000000;"> pv.getValue();  
</span><span style="color: #800080;">147</span>                Object valueToApply =<span style="color: #000000;"> originalValue;  
</span><span style="color: #800080;">148</span>                <span style="color: #0000ff;">if</span> (!<span style="color: #000000;">Boolean.FALSE.equals(pv.conversionNecessary)) {  
</span><span style="color: #800080;">149</span>                    <span style="color: #0000ff;">if</span><span style="color: #000000;"> (pv.isConverted()) {  
</span><span style="color: #800080;">150</span>                        valueToApply =<span style="color: #000000;"> pv.getConvertedValue();  
</span><span style="color: #800080;">151</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">152</span>                    <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">153</span>                        <span style="color: #0000ff;">if</span> (isExtractOldValueForEditor() &amp;&amp; pd.getReadMethod() != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">154</span>                            <span style="color: #008000;">//</span><span style="color: #008000;">获取属性的getter方法(读方法)，JDK内省机制  </span>
<span style="color: #800080;">155</span>                            final Method readMethod =<span style="color: #000000;"> pd.getReadMethod();  
</span><span style="color: #800080;">156</span>                            <span style="color: #008000;">//</span><span style="color: #008000;">如果属性的getter方法不是public访问控制权限的，即访问控制权限比较严格，  </span>
<span style="color: #800080;">157</span>                            <span style="color: #008000;">//</span><span style="color: #008000;">则使用JDK的反射机制强行访问非public的方法(暴力读取属性值)  </span>
<span style="color: #800080;">158</span>                            <span style="color: #0000ff;">if</span> (!Modifier.isPublic(readMethod.getDeclaringClass().getModifiers()) &amp;&amp;  
<span style="color: #800080;">159</span>                                    !<span style="color: #000000;">readMethod.isAccessible()) {  
</span><span style="color: #800080;">160</span>                                <span style="color: #0000ff;">if</span> (System.getSecurityManager()!= <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">161</span>                                    <span style="color: #008000;">//</span><span style="color: #008000;">匿名内部类，根据权限修改属性的读取控制限制  </span>
<span style="color: #800080;">162</span>                                    AccessController.doPrivileged(<span style="color: #0000ff;">new</span> PrivilegedAction&lt;Object&gt;<span style="color: #000000;">() {  
</span><span style="color: #800080;">163</span>                                        <span style="color: #0000ff;">public</span><span style="color: #000000;"> Object run() {  
</span><span style="color: #800080;">164</span>                                            readMethod.setAccessible(<span style="color: #0000ff;">true</span><span style="color: #000000;">);  
</span><span style="color: #800080;">165</span>                                            <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">;  
</span><span style="color: #800080;">166</span><span style="color: #000000;">                                        }  
</span><span style="color: #800080;">167</span><span style="color: #000000;">                                    });  
</span><span style="color: #800080;">168</span><span style="color: #000000;">                                }  
</span><span style="color: #800080;">169</span>                                <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">170</span>                                    readMethod.setAccessible(<span style="color: #0000ff;">true</span><span style="color: #000000;">);  
</span><span style="color: #800080;">171</span><span style="color: #000000;">                                }  
</span><span style="color: #800080;">172</span><span style="color: #000000;">                            }  
</span><span style="color: #800080;">173</span>                            <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">174                                </span><span style="color: #008000;">//</span><span style="color: #008000;">属性没有提供getter方法时，调用潜在的读取属性值</span><span style="color: #008000;">//</span><span style="color: #008000;">的方法，获取属性值  </span>
<span style="color: #800080;">175</span>                                <span style="color: #0000ff;">if</span> (System.getSecurityManager() != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">176</span>                                    oldValue = AccessController.doPrivileged(<span style="color: #0000ff;">new</span> PrivilegedExceptionAction&lt;Object&gt;<span style="color: #000000;">() {  
</span><span style="color: #800080;">177</span>                                        <span style="color: #0000ff;">public</span><span style="color: #000000;"> Object run() throws Exception {  
</span><span style="color: #800080;">178</span>                                            <span style="color: #0000ff;">return</span> readMethod.invoke(<span style="color: #0000ff;">object</span><span style="color: #000000;">);  
</span><span style="color: #800080;">179</span><span style="color: #000000;">                                        }  
</span><span style="color: #800080;">180</span><span style="color: #000000;">                                    }, acc);  
</span><span style="color: #800080;">181</span><span style="color: #000000;">                                }  
</span><span style="color: #800080;">182</span>                                <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">183</span>                                    oldValue = readMethod.invoke(<span style="color: #0000ff;">object</span><span style="color: #000000;">);  
</span><span style="color: #800080;">184</span><span style="color: #000000;">                                }  
</span><span style="color: #800080;">185</span><span style="color: #000000;">                            }  
</span><span style="color: #800080;">186</span>                            <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception ex) {  
</span><span style="color: #800080;">187</span>                                <span style="color: #0000ff;">if</span><span style="color: #000000;"> (ex instanceof PrivilegedActionException) {  
</span><span style="color: #800080;">188</span>                                    ex =<span style="color: #000000;"> ((PrivilegedActionException) ex).getException();  
</span><span style="color: #800080;">189</span><span style="color: #000000;">                                }  
</span><span style="color: #800080;">190</span>                                <span style="color: #0000ff;">if</span><span style="color: #000000;"> (logger.isDebugEnabled()) {  
</span><span style="color: #800080;">191</span>                                    logger.debug(<span style="color: #800000;">"</span><span style="color: #800000;">Could not read previous value of property '</span><span style="color: #800000;">"</span> +  
<span style="color: #800080;">192</span>                                            <span style="color: #0000ff;">this</span>.nestedPath + propertyName + <span style="color: #800000;">"</span><span style="color: #800000;">'</span><span style="color: #800000;">"</span><span style="color: #000000;">, ex);  
</span><span style="color: #800080;">193</span><span style="color: #000000;">                                }  
</span><span style="color: #800080;">194</span><span style="color: #000000;">                            }  
</span><span style="color: #800080;">195</span><span style="color: #000000;">                        }  
</span><span style="color: #800080;">196</span>                        <span style="color: #008000;">//</span><span style="color: #008000;">设置属性的注入值  </span>
<span style="color: #800080;">197</span>                        valueToApply =<span style="color: #000000;"> convertForProperty(propertyName, oldValue, originalValue, pd);  
</span><span style="color: #800080;">198</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">199</span>                    pv.getOriginalPropertyValue().conversionNecessary = (valueToApply !=<span style="color: #000000;"> originalValue);  
</span><span style="color: #800080;">200</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">201</span>                <span style="color: #008000;">//</span><span style="color: #008000;">根据JDK的内省机制，获取属性的setter(写方法)方法  </span>
<span style="color: #800080;">202</span>                final Method writeMethod = (pd instanceof GenericTypeAwarePropertyDescriptor ?  
<span style="color: #800080;">203</span><span style="color: #000000;">                        ((GenericTypeAwarePropertyDescriptor) pd).getWriteMethodForActualAccess() :  
</span><span style="color: #800080;">204</span><span style="color: #000000;">                        pd.getWriteMethod());  
</span><span style="color: #800080;">205                </span><span style="color: #008000;">//</span><span style="color: #008000;">如果属性的setter方法是非public，即访问控制权限比较严格，则使用JDK的反射机制，  </span>
<span style="color: #800080;">206                </span><span style="color: #008000;">//</span><span style="color: #008000;">强行设置setter方法可访问(暴力为属性赋值)  </span>
<span style="color: #800080;">207</span>                <span style="color: #0000ff;">if</span> (!Modifier.isPublic(writeMethod.getDeclaringClass().getModifiers()) &amp;&amp; !<span style="color: #000000;">writeMethod.isAccessible()) {  
</span><span style="color: #800080;">208</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">如果使用了JDK的安全机制，则需要权限验证  </span>
<span style="color: #800080;">209</span>                    <span style="color: #0000ff;">if</span> (System.getSecurityManager()!= <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">210</span>                        AccessController.doPrivileged(<span style="color: #0000ff;">new</span> PrivilegedAction&lt;Object&gt;<span style="color: #000000;">() {  
</span><span style="color: #800080;">211</span>                            <span style="color: #0000ff;">public</span><span style="color: #000000;"> Object run() {  
</span><span style="color: #800080;">212</span>                                writeMethod.setAccessible(<span style="color: #0000ff;">true</span><span style="color: #000000;">);  
</span><span style="color: #800080;">213</span>                                <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">;  
</span><span style="color: #800080;">214</span><span style="color: #000000;">                            }  
</span><span style="color: #800080;">215</span><span style="color: #000000;">                        });  
</span><span style="color: #800080;">216</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">217</span>                    <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">218</span>                        writeMethod.setAccessible(<span style="color: #0000ff;">true</span><span style="color: #000000;">);  
</span><span style="color: #800080;">219</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">220</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">221</span>                final Object value =<span style="color: #000000;"> valueToApply;  
</span><span style="color: #800080;">222</span>                <span style="color: #0000ff;">if</span> (System.getSecurityManager() != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">223</span>                    <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">224</span>                        <span style="color: #008000;">//</span><span style="color: #008000;">将属性值设置到属性上去  </span>
<span style="color: #800080;">225</span>                        AccessController.doPrivileged(<span style="color: #0000ff;">new</span> PrivilegedExceptionAction&lt;Object&gt;<span style="color: #000000;">() {  
</span><span style="color: #800080;">226</span>                            <span style="color: #0000ff;">public</span><span style="color: #000000;"> Object run() throws Exception {  
</span><span style="color: #800080;">227</span>                                writeMethod.invoke(<span style="color: #0000ff;">object</span><span style="color: #000000;">, value);  
</span><span style="color: #800080;">228</span>                                <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">;  
</span><span style="color: #800080;">229</span><span style="color: #000000;">                            }  
</span><span style="color: #800080;">230</span><span style="color: #000000;">                        }, acc);  
</span><span style="color: #800080;">231</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">232</span>                    <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (PrivilegedActionException ex) {  
</span><span style="color: #800080;">233</span>                        <span style="color: #0000ff;">throw</span><span style="color: #000000;"> ex.getException();  
</span><span style="color: #800080;">234</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">235</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">236</span>                <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">237</span>                    writeMethod.invoke(<span style="color: #0000ff;">this</span>.<span style="color: #0000ff;">object</span><span style="color: #000000;">, value);  
</span><span style="color: #800080;">238</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">239</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">240</span>            <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (TypeMismatchException ex) {  
</span><span style="color: #800080;">241</span>                <span style="color: #0000ff;">throw</span><span style="color: #000000;"> ex;  
</span><span style="color: #800080;">242</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">243</span>            <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (InvocationTargetException ex) {  
</span><span style="color: #800080;">244</span>                PropertyChangeEvent propertyChangeEvent =  
<span style="color: #800080;">245</span>                        <span style="color: #0000ff;">new</span> PropertyChangeEvent(<span style="color: #0000ff;">this</span>.rootObject, <span style="color: #0000ff;">this</span>.nestedPath +<span style="color: #000000;"> propertyName, oldValue, pv.getValue());  
</span><span style="color: #800080;">246</span>                <span style="color: #0000ff;">if</span><span style="color: #000000;"> (ex.getTargetException() instanceof ClassCastException) {  
</span><span style="color: #800080;">247</span>                    <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> TypeMismatchException(propertyChangeEvent, pd.getPropertyType(), ex.getTargetException());  
</span><span style="color: #800080;">248</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">249</span>                <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">250</span>                    <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> MethodInvocationException(propertyChangeEvent, ex.getTargetException());  
</span><span style="color: #800080;">251</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">252</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">253</span>            <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception ex) {  
</span><span style="color: #800080;">254</span>                PropertyChangeEvent pce =  
<span style="color: #800080;">255</span>                        <span style="color: #0000ff;">new</span> PropertyChangeEvent(<span style="color: #0000ff;">this</span>.rootObject, <span style="color: #0000ff;">this</span>.nestedPath +<span style="color: #000000;"> propertyName, oldValue, pv.getValue());  
</span><span style="color: #800080;">256</span>                <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> MethodInvocationException(pce, ex);  
</span><span style="color: #800080;">257</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">258</span><span style="color: #000000;">        }  
    }  </span></span></pre>
</div>
<p class="p0">&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">通过对上面注入依赖代码的分析，我们已经明白了Spring&nbsp;IoC容器是如何将属性的值注入到Bean实例对象中去的：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">(1).对于集合类型的属性，将其属性值解析为目标类型的集合后直接赋值给属性。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">(2).
对于非集合类型的属性，大量使用了JDK的反射和内省机制，通过属性的getter方法(reader&nbsp;method)获取指定属性注入以前的
值，同时调用属性的setter方法(writer&nbsp;method)为属性设置注入后的值。看到这里相信很多人都明白了Spring的
setter注入原理。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">至
此Spring&nbsp;IoC容器对Bean定义资源文件的定位，载入、解析和依赖注入已经全部分析完毕，现在Spring&nbsp;IoC容器中
管理了一系列靠依赖关系联系起来的Bean，程序不需要应用自己手动创建所需的对象，Spring&nbsp;IoC容器会在我们使用的时候自动为我们创
建，并且为我们注入好相关的依赖，这就是Spring核心功能的控制反转和依赖注入的相关功能。</span></p>
<div id="tony_body">
<h2>
五、IoC容器的高级特性
</h2>
</div>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">1、介绍</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
通过前面4篇文章对Spring&nbsp;IoC容器的源码分析，我们已经基本上了解了Spring&nbsp;IoC容器对Bean定义资源的定位、
读入和解析过程，同时也清楚了当用户通过getBean方法向IoC容器获取被管理的Bean时，IoC容器对Bean进行的初始化和依赖注入过程，这些
是Spring&nbsp;IoC容器的基本功能特性。Spring&nbsp;IoC容器还有一些高级特性，如使用lazy-init属性对Bean预
初始化、FactoryBean产生或者修饰Bean对象的生成、IoC容器初始化Bean过程中使用BeanPostProcessor后置处理器对
Bean声明周期事件管理和IoC容器的autowiring自动装配功能等。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">2、Spring&nbsp;IoC容器的lazy-init属性实现预实例化：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
通过前面我们对IoC容器的实现和工作原理分析，我们知道IoC容器的初始化过程就是对Bean定义资源的定位、载入和注册，此时容器对Bean的依赖注
入并没有发生，依赖注入主要是在应用程序第一次向容器索取Bean时，通过getBean方法的调用完成。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">当
Bean定义资源的&lt;Bean&gt;元素中配置了lazy-init属性时，容器将会在初始化的时候对所配置的Bean进行预实例化，Bean的
依赖注入在容器初始化的时候就已经完成。这样，当应用程序第一次向容器索取被管理的Bean时，就不用再初始化和对Bean进行依赖注入了，直接从容器中
获取已经完成依赖注入的现成Bean，可以提高应用第一次向容器获取Bean的性能。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">下面我们通过代码分析容器预实例化的实现过程：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">(1).refresh()</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">先从IoC容器的初始会过程开始，通过前面文章分析，我们知道IoC容器读入已经定位的Bean定义资源是从refresh方法开始的，我们首先从AbstractApplicationContext类的refresh方法入手分析，源码如下：</span></p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #800080;">1    </span><span style="color: #008000;">//</span><span style="color: #008000;">容器初始化的过程，读入Bean定义资源，并解析注册  </span>
2    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> refresh() throws BeansException, IllegalStateException {  
</span><span style="color: #800080;">3</span>        synchronized (<span style="color: #0000ff;">this</span><span style="color: #000000;">.startupShutdownMonitor) {  
</span><span style="color: #800080;">4</span>             <span style="color: #008000;">//</span><span style="color: #008000;">调用容器准备刷新的方法，获取容器的当时时间，同时给容器设置同步标识  </span>
<span style="color: #800080;">5</span><span style="color: #000000;">             prepareRefresh();  
</span><span style="color: #800080;">6</span>             <span style="color: #008000;">//</span><span style="color: #008000;">告诉子类启动refreshBeanFactory()方法，Bean定义资源文件的载入从  </span>
<span style="color: #800080;">7             </span><span style="color: #008000;">//</span><span style="color: #008000;">子类的refreshBeanFactory()方法启动  </span>
<span style="color: #800080;">8</span>             ConfigurableListableBeanFactory beanFactory =<span style="color: #000000;"> obtainFreshBeanFactory();  
</span><span style="color: #800080;">9             </span><span style="color: #008000;">//</span><span style="color: #008000;">为BeanFactory配置容器特性，例如类加载器、事件处理器等  </span>
<span style="color: #800080;">10</span><span style="color: #000000;">            prepareBeanFactory(beanFactory);  
</span><span style="color: #800080;">11</span>            <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">12</span>                <span style="color: #008000;">//</span><span style="color: #008000;">为容器的某些子类指定特殊的BeanPost事件处理器  </span>
<span style="color: #800080;">13</span><span style="color: #000000;">                postProcessBeanFactory(beanFactory);  
</span><span style="color: #800080;">14</span>                <span style="color: #008000;">//</span><span style="color: #008000;">调用所有注册的BeanFactoryPostProcessor的Bean  </span>
<span style="color: #800080;">15</span><span style="color: #000000;">                invokeBeanFactoryPostProcessors(beanFactory);  
</span><span style="color: #800080;">16</span>                <span style="color: #008000;">//</span><span style="color: #008000;">为BeanFactory注册BeanPost事件处理器.  </span>
<span style="color: #800080;">17</span>                <span style="color: #008000;">//</span><span style="color: #008000;">BeanPostProcessor是Bean后置处理器，用于监听容器触发的事件  </span>
<span style="color: #800080;">18</span><span style="color: #000000;">                registerBeanPostProcessors(beanFactory);  
</span><span style="color: #800080;">19</span>                <span style="color: #008000;">//</span><span style="color: #008000;">初始化信息源，和国际化相关.  </span>
<span style="color: #800080;">20</span><span style="color: #000000;">                initMessageSource();  
</span><span style="color: #800080;">21</span>                <span style="color: #008000;">//</span><span style="color: #008000;">初始化容器事件传播器.  </span>
<span style="color: #800080;">22</span><span style="color: #000000;">                initApplicationEventMulticaster();  
</span><span style="color: #800080;">23</span>                <span style="color: #008000;">//</span><span style="color: #008000;">调用子类的某些特殊Bean初始化方法  </span>
<span style="color: #800080;">24</span><span style="color: #000000;">                onRefresh();  
</span><span style="color: #800080;">25</span>                <span style="color: #008000;">//</span><span style="color: #008000;">为事件传播器注册事件监听器.  </span>
<span style="color: #800080;">26</span><span style="color: #000000;">                registerListeners();  
</span><span style="color: #800080;">27</span>                <span style="color: #008000;">//</span><span style="color: #008000;">这里是对容器lazy-init属性进行处理的入口方法  </span>
<span style="color: #800080;">28</span><span style="color: #000000;">                finishBeanFactoryInitialization(beanFactory);  
</span><span style="color: #800080;">29</span>                <span style="color: #008000;">//</span><span style="color: #008000;">初始化容器的生命周期事件处理器，并发布容器的生命周期事件  </span>
<span style="color: #800080;">30</span><span style="color: #000000;">                finishRefresh();  
</span><span style="color: #800080;">31</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">32</span>            <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (BeansException ex) {  
</span><span style="color: #800080;">33</span>                <span style="color: #008000;">//</span><span style="color: #008000;">销毁以创建的单态Bean  </span>
<span style="color: #800080;">34</span><span style="color: #000000;">                destroyBeans();  
</span><span style="color: #800080;">35                </span><span style="color: #008000;">//</span><span style="color: #008000;">取消refresh操作，重置容器的同步标识.  </span>
<span style="color: #800080;">36</span><span style="color: #000000;">                cancelRefresh(ex);  
</span><span style="color: #800080;">37</span>                <span style="color: #0000ff;">throw</span><span style="color: #000000;"> ex;  
</span><span style="color: #800080;">38</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">39</span><span style="color: #000000;">        }  
    } </span></span></pre>
</div>
<p>&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">在
refresh方法中ConfigurableListableBeanFactorybeanFactory&nbsp;=&nbsp;
obtainFreshBeanFactory();启动了Bean定义资源的载入、注册过程，而
finishBeanFactoryInitialization方法是对注册后的Bean定义中的预实例化(lazy-
init=false，Spring默认就是预实例化，即为true)的Bean进行处理的地方。</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">(2).finishBeanFactoryInitialization处理预实例化Bean：</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">当
Bean定义资源被载入IoC容器之后，容器将Bean定义资源解析为容器内部的数据结构BeanDefinition注册到容器
中，AbstractApplicationContext类中的finishBeanFactoryInitialization方法对配置了预实例化
属性的Bean进行预初始化过程，源码如下：</span></p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #800080;">1    </span><span style="color: #008000;">//</span><span style="color: #008000;">对配置了lazy-init属性的Bean进行预实例化处理  </span>
2    <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {  
</span><span style="color: #800080;">3</span>        <span style="color: #008000;">//</span><span style="color: #008000;">这是Spring3以后新加的代码，为容器指定一个转换服务(ConversionService)  </span>
<span style="color: #800080;">4        </span><span style="color: #008000;">//</span><span style="color: #008000;">在对某些Bean属性进行转换时使用  </span>
5        <span style="color: #0000ff;">if</span> (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;  
<span style="color: #800080;">6</span>                beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.<span style="color: #0000ff;">class</span><span style="color: #000000;">)) {  
</span><span style="color: #800080;">7</span><span style="color: #000000;">            beanFactory.setConversionService(  
</span><span style="color: #800080;">8</span>                    beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.<span style="color: #0000ff;">class</span><span style="color: #000000;">));  
</span><span style="color: #800080;">9</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">10</span>        <span style="color: #008000;">//</span><span style="color: #008000;">为了类型匹配，停止使用临时的类加载器  </span>
<span style="color: #800080;">11</span>        beanFactory.setTempClassLoader(<span style="color: #0000ff;">null</span><span style="color: #000000;">);  
</span><span style="color: #800080;">12</span>        <span style="color: #008000;">//</span><span style="color: #008000;">缓存容器中所有注册的BeanDefinition元数据，以防被修改  </span>
<span style="color: #800080;">13</span><span style="color: #000000;">        beanFactory.freezeConfiguration();  
</span><span style="color: #800080;">14</span>        <span style="color: #008000;">//</span><span style="color: #008000;">对配置了lazy-init属性的单态模式Bean进行预实例化处理  </span>
<span style="color: #800080;">15</span><span style="color: #000000;">        beanFactory.preInstantiateSingletons();  
    } </span></span></pre>
</div>
<p>&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">ConfigurableListableBeanFactory是一个接口，其preInstantiateSingletons方法由其子类DefaultListableBeanFactory提供。&nbsp;&nbsp;</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">(3)、DefaultListableBeanFactory对配置lazy-init属性单态Bean的预实例化：</span></p>
<p class="p0">&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #800080;">1</span><span style="color: #008000;">//</span><span style="color: #008000;">对配置lazy-init属性单态Bean的预实例化  </span>
2<span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> preInstantiateSingletons() throws BeansException {  
</span><span style="color: #800080;">3</span>        <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">this</span><span style="color: #000000;">.logger.isInfoEnabled()) {  
</span><span style="color: #800080;">4</span>            <span style="color: #0000ff;">this</span>.logger.info(<span style="color: #800000;">"</span><span style="color: #800000;">Pre-instantiating singletons in </span><span style="color: #800000;">"</span> + <span style="color: #0000ff;">this</span><span style="color: #000000;">);  
</span><span style="color: #800080;">5</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">6</span>        <span style="color: #008000;">//</span><span style="color: #008000;">在对配置lazy-init属性单态Bean的预实例化过程中，必须多线程同步，以确保数据一致性  </span>
<span style="color: #800080;">7</span>        synchronized (<span style="color: #0000ff;">this</span><span style="color: #000000;">.beanDefinitionMap) {  
</span><span style="color: #800080;">8</span>            <span style="color: #0000ff;">for</span> (String beanName : <span style="color: #0000ff;">this</span><span style="color: #000000;">.beanDefinitionNames) {  
</span><span style="color: #800080;">9</span>                <span style="color: #008000;">//</span><span style="color: #008000;">获取指定名称的Bean定义  </span>
<span style="color: #800080;">10</span>                RootBeanDefinition bd =<span style="color: #000000;"> getMergedLocalBeanDefinition(beanName);  
</span><span style="color: #800080;">11</span>                <span style="color: #008000;">//</span><span style="color: #008000;">Bean不是抽象的，是单态模式的，且lazy-init属性配置为false  </span>
<span style="color: #800080;">12</span>                <span style="color: #0000ff;">if</span> (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !<span style="color: #000000;">bd.isLazyInit()) {  
</span><span style="color: #800080;">13</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">如果指定名称的bean是创建容器的Bean  </span>
<span style="color: #800080;">14</span>                    <span style="color: #0000ff;">if</span><span style="color: #000000;"> (isFactoryBean(beanName)) {  
</span><span style="color: #800080;">15</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">FACTORY_BEAN_PREFIX=”&amp;”，当Bean名称前面加”&amp;”符号  </span>
<span style="color: #800080;">16</span>                   <span style="color: #008000;">//</span><span style="color: #008000;">时，获取的是产生容器对象本身，而不是容器产生的Bean.  </span>
<span style="color: #800080;">17</span>                   <span style="color: #008000;">//</span><span style="color: #008000;">调用getBean方法，触发容器对Bean实例化和依赖注入过程  </span>
<span style="color: #800080;">18</span>                        final FactoryBean factory = (FactoryBean) getBean(FACTORY_BEAN_PREFIX +<span style="color: #000000;"> beanName);  
</span><span style="color: #800080;">19</span>                        <span style="color: #008000;">//</span><span style="color: #008000;">标识是否需要预实例化  </span>
<span style="color: #800080;">20</span><span style="color: #000000;">                        boolean isEagerInit;  
</span><span style="color: #800080;">21</span>                        <span style="color: #0000ff;">if</span> (System.getSecurityManager() != <span style="color: #0000ff;">null</span> &amp;&amp;<span style="color: #000000;"> factory instanceof SmartFactoryBean) {  
</span><span style="color: #800080;">22</span>                            <span style="color: #008000;">//</span><span style="color: #008000;">一个匿名内部类  </span>
<span style="color: #800080;">23</span>                            isEagerInit = AccessController.doPrivileged(<span style="color: #0000ff;">new</span> PrivilegedAction&lt;Boolean&gt;<span style="color: #000000;">() {  
</span><span style="color: #800080;">24</span>                                <span style="color: #0000ff;">public</span><span style="color: #000000;"> Boolean run() {  
</span><span style="color: #800080;">25</span>                                    <span style="color: #0000ff;">return</span><span style="color: #000000;"> ((SmartFactoryBean) factory).isEagerInit();  
</span><span style="color: #800080;">26</span><span style="color: #000000;">                                }  
</span><span style="color: #800080;">27</span><span style="color: #000000;">                            }, getAccessControlContext());  
</span><span style="color: #800080;">28</span><span style="color: #000000;">                        }  
</span><span style="color: #800080;">29</span>                        <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">30</span>                            isEagerInit = factory instanceof SmartFactoryBean &amp;&amp;<span style="color: #000000;"> ((SmartFactoryBean) factory).isEagerInit();   
</span><span style="color: #800080;">31</span><span style="color: #000000;">                        }  
</span><span style="color: #800080;">32</span>                        <span style="color: #0000ff;">if</span><span style="color: #000000;"> (isEagerInit) {  
</span><span style="color: #800080;">33</span>                           <span style="color: #008000;">//</span><span style="color: #008000;">调用getBean方法，触发容器对Bean实例化和依赖注入过程  </span>
<span style="color: #800080;">34</span><span style="color: #000000;">                            getBean(beanName);  
</span><span style="color: #800080;">35</span><span style="color: #000000;">                        }  
</span><span style="color: #800080;">36</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">37</span>                    <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">38</span>                         <span style="color: #008000;">//</span><span style="color: #008000;">调用getBean方法，触发容器对Bean实例化和依赖注入过程  </span>
<span style="color: #800080;">39</span><span style="color: #000000;">                        getBean(beanName);  
</span><span style="color: #800080;">40</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">41</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">42</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">43</span><span style="color: #000000;">        }  
    } </span></span></pre>
</div>
<p class="p0">&nbsp;</p>
<p>&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">通
过对lazy-init处理源码的分析，我们可以看出，如果设置了lazy-init属性，则容器在完成Bean定义的注册之后，会通过getBean方
法，触发对指定Bean的初始化和依赖注入过程，这样当应用第一次向容器索取所需的Bean时，容器不再需要对Bean进行初始化和依赖注入，直接从已经
完成实例化和依赖注入的Bean中取一个线程的Bean，这样就提高了第一次获取Bean的性能。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">3、FactoryBean的实现：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在Spring中，有两个很容易混淆的类：BeanFactory和FactoryBean。</span><br><span style="font-family: courier new, courier; font-size: 16px;">BeanFactory：Bean工厂，是一个工厂(Factory)，我们Spring&nbsp;IoC容器的最顶层接口就是这个BeanFactory，它的作用是管理Bean，即实例化、定位、配置应用程序中的对象及建立这些对象间的依赖。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">FactoryBean：
工厂Bean，是一个Bean，作用是产生其他bean实例。通常情况下，这种bean没有什么特别的要求，仅需要提供一个工厂方法，该方法用来返回其他
bean实例。通常情况下，bean无须自己实现工厂模式，Spring容器担任工厂角色；但少数情况下，容器中的bean本身就是工厂，其作用是产生其
它bean实例。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">当用户使用容器本身时，可以使用转义字符”&amp;”来得到FactoryBean本身，以区别通过FactoryBean产生的实例对象和FactoryBean对象本身。在BeanFactory中通过如下代码定义了该转义字符：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">StringFACTORY_BEAN_PREFIX&nbsp;=&nbsp;"&amp;";</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">如果myJndiObject是一个FactoryBean，则使用&amp;myJndiObject得到的是myJndiObject对象，而不是myJndiObject产生出来的对象。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">(1).FactoryBean的源码如下：</span></p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #008000;">//</span><span style="color: #008000;">工厂Bean，用于产生其他对象  </span>
<span style="color: #0000ff;">public</span> <span style="color: #0000ff;">interface</span> FactoryBean&lt;T&gt;<span style="color: #000000;"> {  
</span><span style="color: #008000;">   //</span><span style="color: #008000;">获取容器管理的对象实例  </span>
<span style="color: #000000;">    T getObject() throws Exception;  
    </span><span style="color: #008000;">//</span><span style="color: #008000;">获取Bean工厂创建的对象的类型  </span>
    Class&lt;?&gt;<span style="color: #000000;"> getObjectType();  
    </span><span style="color: #008000;">//</span><span style="color: #008000;">Bean工厂创建的对象是否是单态模式，如果是单态模式，则整个容器中只有一个实例  
</span><span style="color: #008000;">   //</span><span style="color: #008000;">对象，每次请求都返回同一个实例对象  </span>
<span style="color: #000000;">    boolean isSingleton();  
} </span></span></pre>
</div>
<p>&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">(2).&nbsp;AbstractBeanFactory的getBean方法调用FactoryBean：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">在前面我们分析Spring&nbsp;Ioc容器实例化Bean并进行依赖注入过程的源码时，提到在getBean方法触发容器实例化Bean的时候会调用AbstractBeanFactory的doGetBean方法来进行实例化的过程，源码如下：</span></p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #800080;">1      </span><span style="color: #008000;">//</span><span style="color: #008000;">真正实现向IoC容器获取Bean的功能，也是触发依赖注入功能的地方    </span>
<span style="color: #800080;">2</span>      @SuppressWarnings(<span style="color: #800000;">"</span><span style="color: #800000;">unchecked</span><span style="color: #800000;">"</span><span style="color: #000000;">)    
</span><span style="color: #800080;">3</span>      <span style="color: #0000ff;">protected</span> &lt;T&gt;<span style="color: #000000;"> T doGetBean(    
</span><span style="color: #800080;">4</span>              final String name, final Class&lt;T&gt;<span style="color: #000000;"> requiredType, final Object[] args, boolean typeCheckOnly)    
</span><span style="color: #800080;">5</span><span style="color: #000000;">              throws BeansException {    
</span><span style="color: #800080;">6</span>          <span style="color: #008000;">//</span><span style="color: #008000;">根据指定的名称获取被管理Bean的名称，剥离指定名称中对容器的相关依赖    </span>
<span style="color: #800080;">7</span>          <span style="color: #008000;">//</span><span style="color: #008000;">如果指定的是别名，将别名转换为规范的Bean名称    </span>
<span style="color: #800080;">8</span>          final String beanName =<span style="color: #000000;"> transformedBeanName(name);    
</span><span style="color: #800080;">9</span><span style="color: #000000;">          Object bean;    
</span><span style="color: #800080;">10</span>        <span style="color: #008000;">//</span><span style="color: #008000;">先从缓存中取是否已经有被创建过的单态类型的Bean，对于单态模式的Bean整    </span>
<span style="color: #800080;">11</span>            <span style="color: #008000;">//</span><span style="color: #008000;">个IoC容器中只创建一次，不需要重复创建    </span>
<span style="color: #800080;">12</span>          Object sharedInstance =<span style="color: #000000;"> getSingleton(beanName);    
</span><span style="color: #800080;">13</span>          <span style="color: #008000;">//</span><span style="color: #008000;">IoC容器创建单态模式Bean实例对象    </span>
<span style="color: #800080;">14</span>          <span style="color: #0000ff;">if</span> (sharedInstance != <span style="color: #0000ff;">null</span> &amp;&amp; args == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {    
</span><span style="color: #800080;">15</span>              <span style="color: #0000ff;">if</span><span style="color: #000000;"> (logger.isDebugEnabled()) {    
</span><span style="color: #800080;">16</span>              <span style="color: #008000;">//</span><span style="color: #008000;">如果指定名称的Bean在容器中已有单态模式的Bean被创建，直接返回    </span>
<span style="color: #800080;">17</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">已经创建的Bean    </span>
<span style="color: #800080;">18</span>                  <span style="color: #0000ff;">if</span><span style="color: #000000;"> (isSingletonCurrentlyInCreation(beanName)) {    
</span><span style="color: #800080;">19</span>                      logger.debug(<span style="color: #800000;">"</span><span style="color: #800000;">Returning eagerly cached instance of singleton bean '</span><span style="color: #800000;">"</span> + beanName +    
<span style="color: #800080;">20</span>                              <span style="color: #800000;">"</span><span style="color: #800000;">' that is not fully initialized yet - a consequence of a circular reference</span><span style="color: #800000;">"</span><span style="color: #000000;">);    
</span><span style="color: #800080;">21</span><span style="color: #000000;">                  }    
</span><span style="color: #800080;">22</span>                  <span style="color: #0000ff;">else</span><span style="color: #000000;"> {    
</span><span style="color: #800080;">23</span>                      logger.debug(<span style="color: #800000;">"</span><span style="color: #800000;">Returning cached instance of singleton bean '</span><span style="color: #800000;">"</span> + beanName + <span style="color: #800000;">"</span><span style="color: #800000;">'</span><span style="color: #800000;">"</span><span style="color: #000000;">);    
</span><span style="color: #800080;">24</span><span style="color: #000000;">                  }    
</span><span style="color: #800080;">25</span><span style="color: #000000;">              }    
</span><span style="color: #800080;">26</span>              <span style="color: #008000;">//</span><span style="color: #008000;">获取给定Bean的实例对象，主要是完成FactoryBean的相关处理   </span>
<span style="color: #800080;">27</span>              bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span style="color: #0000ff;">null</span><span style="color: #000000;">);    
</span><span style="color: #800080;">28</span><span style="color: #000000;">          }    
</span><span style="color: #800080;">29         </span><span style="color: #000000;">……  
</span><span style="color: #800080;">30     </span><span style="color: #000000;">}  
</span><span style="color: #800080;">31    </span><span style="color: #008000;">//</span><span style="color: #008000;">获取给定Bean的实例对象，主要是完成FactoryBean的相关处理 </span>
32    <span style="color: #0000ff;">protected</span><span style="color: #000000;"> Object getObjectForBeanInstance(  
</span><span style="color: #800080;">33</span><span style="color: #000000;">            Object beanInstance, String name, String beanName, RootBeanDefinition mbd) {  
</span><span style="color: #800080;">34</span>        <span style="color: #008000;">//</span><span style="color: #008000;">容器已经得到了Bean实例对象，这个实例对象可能是一个普通的Bean，也可能是  </span>
<span style="color: #800080;">35</span>        <span style="color: #008000;">//</span><span style="color: #008000;">一个工厂Bean，如果是一个工厂Bean，则使用它创建一个Bean实例对象，如果  </span>
<span style="color: #800080;">36        </span><span style="color: #008000;">//</span><span style="color: #008000;">调用本身就想获得一个容器的引用，则指定返回这个工厂Bean实例对象  </span>
<span style="color: #800080;">37</span>        <span style="color: #008000;">//</span><span style="color: #008000;">如果指定的名称是容器的解引用(dereference，即是对象本身而非内存地址)，  </span>
<span style="color: #800080;">38        </span><span style="color: #008000;">//</span><span style="color: #008000;">且Bean实例也不是创建Bean实例对象的工厂Bean  </span>
<span style="color: #800080;">39</span>        <span style="color: #0000ff;">if</span> (BeanFactoryUtils.isFactoryDereference(name) &amp;&amp; !<span style="color: #000000;">(beanInstance instanceof FactoryBean)) {  
</span><span style="color: #800080;">40</span>            <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> BeanIsNotAFactoryException(transformedBeanName(name), beanInstance.getClass());  
</span><span style="color: #800080;">41</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">42</span>        <span style="color: #008000;">//</span><span style="color: #008000;">如果Bean实例不是工厂Bean，或者指定名称是容器的解引用，调用者向获取对  </span>
<span style="color: #800080;">43        </span><span style="color: #008000;">//</span><span style="color: #008000;">容器的引用，则直接返回当前的Bean实例  </span>
<span style="color: #800080;">44</span>        <span style="color: #0000ff;">if</span> (!(beanInstance instanceof FactoryBean) ||<span style="color: #000000;"> BeanFactoryUtils.isFactoryDereference(name)) {  
</span><span style="color: #800080;">45</span>            <span style="color: #0000ff;">return</span><span style="color: #000000;"> beanInstance;  
</span><span style="color: #800080;">46</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">47</span>    <span style="color: #008000;">//</span><span style="color: #008000;">处理指定名称不是容器的解引用，或者根据名称获取的Bean实例对象是一个工厂Bean  </span>
<span style="color: #800080;">48</span>    <span style="color: #008000;">//</span><span style="color: #008000;">使用工厂Bean创建一个Bean的实例对象  </span>
<span style="color: #800080;">49</span>        Object <span style="color: #0000ff;">object</span> = <span style="color: #0000ff;">null</span><span style="color: #000000;">;  
</span><span style="color: #800080;">50</span>        <span style="color: #0000ff;">if</span> (mbd == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">51</span>            <span style="color: #008000;">//</span><span style="color: #008000;">从Bean工厂缓存中获取给定名称的Bean实例对象  </span>
<span style="color: #800080;">52</span>            <span style="color: #0000ff;">object</span> =<span style="color: #000000;"> getCachedObjectForFactoryBean(beanName);  
</span><span style="color: #800080;">53</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">54</span>        <span style="color: #008000;">//</span><span style="color: #008000;">让Bean工厂生产给定名称的Bean对象实例  </span>
<span style="color: #800080;">55</span>        <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">object</span> == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">56</span>            FactoryBean factory =<span style="color: #000000;"> (FactoryBean) beanInstance;  
</span><span style="color: #800080;">57</span>            <span style="color: #008000;">//</span><span style="color: #008000;">如果从Bean工厂生产的Bean是单态模式的，则缓存  </span>
<span style="color: #800080;">58</span>            <span style="color: #0000ff;">if</span> (mbd == <span style="color: #0000ff;">null</span> &amp;&amp;<span style="color: #000000;"> containsBeanDefinition(beanName)) {  
</span><span style="color: #800080;">59</span>                <span style="color: #008000;">//</span><span style="color: #008000;">从容器中获取指定名称的Bean定义，如果继承基类，则合并基类相关属性  </span>
<span style="color: #800080;">60</span>                mbd =<span style="color: #000000;"> getMergedLocalBeanDefinition(beanName);  
</span><span style="color: #800080;">61</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">62</span>            <span style="color: #008000;">//</span><span style="color: #008000;">如果从容器得到Bean定义信息，并且Bean定义信息不是虚构的，则让工厂  </span>
<span style="color: #800080;">63</span>            <span style="color: #008000;">//</span><span style="color: #008000;">Bean生产Bean实例对象  </span>
<span style="color: #800080;">64</span>            boolean synthetic = (mbd != <span style="color: #0000ff;">null</span> &amp;&amp;<span style="color: #000000;"> mbd.isSynthetic());  
</span><span style="color: #800080;">65</span>            <span style="color: #008000;">//</span><span style="color: #008000;">调用FactoryBeanRegistrySupport类的getObjectFromFactoryBean  </span>
<span style="color: #800080;">66</span>            <span style="color: #008000;">//</span><span style="color: #008000;">方法，实现工厂Bean生产Bean对象实例的过程  </span>
<span style="color: #800080;">67</span>            <span style="color: #0000ff;">object</span> = getObjectFromFactoryBean(factory, beanName, !<span style="color: #000000;">synthetic);  
</span><span style="color: #800080;">68</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">69</span>        <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">object</span><span style="color: #000000;">;  
    } </span></span></pre>
</div>
<p>&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">在上面获取给定Bean的实例对象的getObjectForBeanInstance方法中，会调用FactoryBeanRegistrySupport类的getObjectFromFactoryBean方法，该方法实现了Bean工厂生产Bean实例对象。</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">Dereference(解引用)：一个在C/C++中应用比较多的术语，在C++中，”<span style="color: black;">*</span>”是解引用符号，而”<span style="color: black;">&amp;</span>”是引用符号，解引用是指变量指向的是所引用对象的本身数据，而不是引用对象的内存地址。</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">(3)、AbstractBeanFactory生产Bean实例对象：</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">AbstractBeanFactory类中生产Bean实例对象的主要源码如下：</span></p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #800080;">71    </span><span style="color: #008000;">//</span><span style="color: #008000;">Bean工厂生产Bean实例对象  </span>
72    <span style="color: #0000ff;">protected</span><span style="color: #000000;"> Object getObjectFromFactoryBean(FactoryBean factory, String beanName, boolean shouldPostProcess) {  
</span><span style="color: #800080;">73</span>        <span style="color: #008000;">//</span><span style="color: #008000;">Bean工厂是单态模式，并且Bean工厂缓存中存在指定名称的Bean实例对象  </span>
<span style="color: #800080;">74</span>        <span style="color: #0000ff;">if</span> (factory.isSingleton() &amp;&amp;<span style="color: #000000;"> containsSingleton(beanName)) {  
</span><span style="color: #800080;">75</span>            <span style="color: #008000;">//</span><span style="color: #008000;">多线程同步，以防止数据不一致  </span>
<span style="color: #800080;">76</span><span style="color: #000000;">            synchronized (getSingletonMutex()) {  
</span><span style="color: #800080;">77</span>                <span style="color: #008000;">//</span><span style="color: #008000;">直接从Bean工厂缓存中获取指定名称的Bean实例对象  </span>
<span style="color: #800080;">78</span>                Object <span style="color: #0000ff;">object</span> = <span style="color: #0000ff;">this</span>.factoryBeanObjectCache.<span style="color: #0000ff;">get</span><span style="color: #000000;">(beanName);  
</span><span style="color: #800080;">79</span>                <span style="color: #008000;">//</span><span style="color: #008000;">Bean工厂缓存中没有指定名称的实例对象，则生产该实例对象  </span>
<span style="color: #800080;">80</span>                <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">object</span> == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">81</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">调用Bean工厂的getObject方法生产指定Bean的实例对象  </span>
<span style="color: #800080;">82</span>                    <span style="color: #0000ff;">object</span> =<span style="color: #000000;"> doGetObjectFromFactoryBean(factory, beanName, shouldPostProcess);  
</span><span style="color: #800080;">83</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">将生产的实例对象添加到Bean工厂缓存中  </span>
<span style="color: #800080;">84</span>                    <span style="color: #0000ff;">this</span>.factoryBeanObjectCache.put(beanName, (<span style="color: #0000ff;">object</span> != <span style="color: #0000ff;">null</span> ? <span style="color: #0000ff;">object</span><span style="color: #000000;"> : NULL_OBJECT));  
</span><span style="color: #800080;">85</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">86</span>                <span style="color: #0000ff;">return</span> (<span style="color: #0000ff;">object</span> != NULL_OBJECT ? <span style="color: #0000ff;">object</span> : <span style="color: #0000ff;">null</span><span style="color: #000000;">);  
</span><span style="color: #800080;">87</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">88</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">89</span>        <span style="color: #008000;">//</span><span style="color: #008000;">调用Bean工厂的getObject方法生产指定Bean的实例对象  </span>
<span style="color: #800080;">90</span>        <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">91</span>            <span style="color: #0000ff;">return</span><span style="color: #000000;"> doGetObjectFromFactoryBean(factory, beanName, shouldPostProcess);  
</span><span style="color: #800080;">92</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">93</span><span style="color: #000000;">    }  
</span><span style="color: #800080;">94</span>    <span style="color: #008000;">//</span><span style="color: #008000;">调用Bean工厂的getObject方法生产指定Bean的实例对象  </span>
<span style="color: #800080;">95</span>    <span style="color: #0000ff;">private</span><span style="color: #000000;"> Object doGetObjectFromFactoryBean(  
</span><span style="color: #800080;">96</span><span style="color: #000000;">            final FactoryBean factory, final String beanName, final boolean shouldPostProcess)  
</span><span style="color: #800080;">97</span><span style="color: #000000;">            throws BeanCreationException {  
</span><span style="color: #800080;">98</span>        Object <span style="color: #0000ff;">object</span><span style="color: #000000;">;  
</span><span style="color: #800080;">99</span>        <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">100</span>            <span style="color: #0000ff;">if</span> (System.getSecurityManager() != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">101</span>                AccessControlContext acc =<span style="color: #000000;"> getAccessControlContext();  
</span><span style="color: #800080;">102</span>                <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">103</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">实现PrivilegedExceptionAction接口的匿名内置类  </span>
<span style="color: #800080;">104</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">根据JVM检查权限，然后决定BeanFactory创建实例对象  </span>
<span style="color: #800080;">105</span>                    <span style="color: #0000ff;">object</span> = AccessController.doPrivileged(<span style="color: #0000ff;">new</span> PrivilegedExceptionAction&lt;Object&gt;<span style="color: #000000;">() {  
</span><span style="color: #800080;">106</span>                        <span style="color: #0000ff;">public</span><span style="color: #000000;"> Object run() throws Exception {  
</span><span style="color: #800080;">107</span>                                <span style="color: #008000;">//</span><span style="color: #008000;">调用BeanFactory接口实现类的创建对象方法  </span>
<span style="color: #800080;">108</span>                                <span style="color: #0000ff;">return</span><span style="color: #000000;"> factory.getObject();  
</span><span style="color: #800080;">109</span><span style="color: #000000;">                            }  
</span><span style="color: #800080;">110</span><span style="color: #000000;">                        }, acc);  
</span><span style="color: #800080;">111</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">112</span>                <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (PrivilegedActionException pae) {  
</span><span style="color: #800080;">113</span>                    <span style="color: #0000ff;">throw</span><span style="color: #000000;"> pae.getException();  
</span><span style="color: #800080;">114</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">115</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">116</span>            <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">117                </span><span style="color: #008000;">//</span><span style="color: #008000;">调用BeanFactory接口实现类的创建对象方法  </span>
<span style="color: #800080;">118</span>                <span style="color: #0000ff;">object</span> =<span style="color: #000000;"> factory.getObject();  
</span><span style="color: #800080;">119</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">120</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">121</span>        <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (FactoryBeanNotInitializedException ex) {  
</span><span style="color: #800080;">122</span>            <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> BeanCurrentlyInCreationException(beanName, ex.toString());  
</span><span style="color: #800080;">123</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">124</span>        <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Throwable ex) {  
</span><span style="color: #800080;">125</span>            <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span> BeanCreationException(beanName, <span style="color: #800000;">"</span><span style="color: #800000;">FactoryBean threw exception on object creation</span><span style="color: #800000;">"</span><span style="color: #000000;">, ex);  
</span><span style="color: #800080;">126</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">127</span>        <span style="color: #008000;">//</span><span style="color: #008000;">创建出来的实例对象为null，或者因为单态对象正在创建而返回null  </span>
<span style="color: #800080;">128</span>        <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">object</span> == <span style="color: #0000ff;">null</span> &amp;&amp;<span style="color: #000000;"> isSingletonCurrentlyInCreation(beanName)) {  
</span><span style="color: #800080;">129</span>            <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> BeanCurrentlyInCreationException(  
</span><span style="color: #800080;">130</span>                    beanName, <span style="color: #800000;">"</span><span style="color: #800000;">FactoryBean which is currently in creation returned null from getObject</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">131</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">132</span>        <span style="color: #008000;">//</span><span style="color: #008000;">为创建出来的Bean实例对象添加BeanPostProcessor后置处理器  </span>
<span style="color: #800080;">133</span>        <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">object</span> != <span style="color: #0000ff;">null</span> &amp;&amp;<span style="color: #000000;"> shouldPostProcess) {  
</span><span style="color: #800080;">134</span>            <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">135</span>                <span style="color: #0000ff;">object</span> = postProcessObjectFromFactoryBean(<span style="color: #0000ff;">object</span><span style="color: #000000;">, beanName);  
</span><span style="color: #800080;">136</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">137</span>            <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Throwable ex) {  
</span><span style="color: #800080;">138</span>                <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span> BeanCreationException(beanName, <span style="color: #800000;">"</span><span style="color: #800000;">Post-processing of the FactoryBean's object failed</span><span style="color: #800000;">"</span><span style="color: #000000;">, ex);  
</span><span style="color: #800080;">139</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">140</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">141</span>        <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">object</span><span style="color: #000000;">;  
    } </span></span></pre>
</div>
<p>&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">从上面的源码分析中，我们可以看出，BeanFactory接口调用其实现类的getObject方法来实现创建Bean实例对象的功能。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">(4).工厂Bean的实现类getObject方法创建Bean实例对象：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">FactoryBean
的实现类有非常多，比如：Proxy、RMI、JNDI、ServletContextFactoryBean等等，FactoryBean接口为
Spring容器提供了一个很好的封装机制，具体的getObject有不同的实现类根据不同的实现策略来具体提供，我们分析一个最简单的
AnnotationTestFactoryBean的实现源码：</span></p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;">143    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> AnnotationTestBeanFactory implements FactoryBean&lt;IJmxTestBean&gt;<span style="color: #000000;"> {  
</span><span style="color: #800080;">144</span>        <span style="color: #0000ff;">private</span> final FactoryCreatedAnnotationTestBean instance = <span style="color: #0000ff;">new</span><span style="color: #000000;"> FactoryCreatedAnnotationTestBean();  
</span><span style="color: #800080;">145</span>        <span style="color: #0000ff;">public</span><span style="color: #000000;"> AnnotationTestBeanFactory() {  
</span><span style="color: #800080;">146</span>            <span style="color: #0000ff;">this</span>.instance.setName(<span style="color: #800000;">"</span><span style="color: #800000;">FACTORY</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">147</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">148</span>        <span style="color: #008000;">//</span><span style="color: #008000;">AnnotationTestBeanFactory产生Bean实例对象的实现  </span>
<span style="color: #800080;">149</span>        <span style="color: #0000ff;">public</span><span style="color: #000000;"> IJmxTestBean getObject() throws Exception {  
</span><span style="color: #800080;">150</span>            <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span><span style="color: #000000;">.instance;  
</span><span style="color: #800080;">151</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">152</span>        <span style="color: #0000ff;">public</span> Class&lt;? extends IJmxTestBean&gt;<span style="color: #000000;"> getObjectType() {  
</span><span style="color: #800080;">153</span>            <span style="color: #0000ff;">return</span> FactoryCreatedAnnotationTestBean.<span style="color: #0000ff;">class</span><span style="color: #000000;">;  
</span><span style="color: #800080;">154</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">155</span>        <span style="color: #0000ff;">public</span><span style="color: #000000;"> boolean isSingleton() {  
</span><span style="color: #800080;">156</span>            <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">true</span><span style="color: #000000;">;  
</span><span style="color: #800080;">157</span><span style="color: #000000;">        }  
     } </span></span></pre>
</div>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">其他的Proxy，RMI，JNDI等等，都是根据相应的策略提供getObject的实现。这里不做一一分析，这已经不是Spring的核心功能，有需要的时候再去深入研究。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">4.BeanPostProcessor后置处理器的实现：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">BeanPostProcessor
后置处理器是Spring&nbsp;IoC容器经常使用到的一个特性，这个Bean后置处理器是一个监听器，可以监听容器触发的Bean声明周期事件。
后置处理器向容器注册以后，容器中管理的Bean就具备了接收IoC容器事件回调的能力。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">BeanPostProcessor的使用非常简单，只需要提供一个实现接口BeanPostProcessor的实现类，然后在Bean的配置文件中设置即可。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">(1).BeanPostProcessor的源码如下：</span></p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #000000;">1    package org.springframework.beans.factory.config;  
2    import org.springframework.beans.BeansException;  
3    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">interface</span><span style="color: #000000;"> BeanPostProcessor {  
</span><span style="color: #800080;">4</span>        <span style="color: #008000;">//</span><span style="color: #008000;">为在Bean的初始化前提供回调入口  </span>
<span style="color: #800080;">5</span><span style="color: #000000;">        Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException;  
</span><span style="color: #800080;">6</span>        <span style="color: #008000;">//</span><span style="color: #008000;">为在Bean的初始化之后提供回调入口  </span>
<span style="color: #800080;">7</span><span style="color: #000000;">        Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException;  
     }  </span></span></pre>
</div>
<p>&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">这两个回调的入口都是和容器管理的Bean的生命周期事件紧密相关，可以为用户提供在Spring&nbsp;IoC容器初始化Bean过程中自定义的处理操作。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">(2).AbstractAutowireCapableBeanFactory类对容器生成的Bean添加后置处理器：</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">BeanPostProcessor
后置处理器的调用发生在Spring&nbsp;IoC容器完成对Bean实例对象的创建和属性的依赖注入完成之后，在对Spring依赖注入的源码分析
过程中我们知道，当应用程序第一次调用getBean方法(lazy-init预实例化除外)向Spring&nbsp;IoC容器索取指定Bean时触
发Spring&nbsp;IoC容器创建Bean实例对象并进行依赖注入的过程，其中真正实现创建Bean对象并进行依赖注入的方法是
AbstractAutowireCapableBeanFactory类的doCreateBean方法，主要源码如下：</span></p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #800080;">1    </span><span style="color: #008000;">//</span><span style="color: #008000;">真正创建Bean的方法  </span>
2    <span style="color: #0000ff;">protected</span><span style="color: #000000;"> Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final Object[] args) {  
</span><span style="color: #800080;">3</span>        <span style="color: #008000;">//</span><span style="color: #008000;">创建Bean实例对象  </span>
<span style="color: #800080;">4</span><span style="color: #000000;">        ……  
</span><span style="color: #800080;">5</span>        <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">6</span>            <span style="color: #008000;">//</span><span style="color: #008000;">对Bean属性进行依赖注入  </span>
<span style="color: #800080;">7</span><span style="color: #000000;">            populateBean(beanName, mbd, instanceWrapper);  
</span><span style="color: #800080;">8</span>            <span style="color: #0000ff;">if</span> (exposedObject != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">9</span>                <span style="color: #008000;">//</span><span style="color: #008000;">在对Bean实例对象生成和依赖注入完成以后，开始对Bean实例对象  </span>
<span style="color: #800080;">10               </span><span style="color: #008000;">//</span><span style="color: #008000;">进行初始化 ，为Bean实例对象应用BeanPostProcessor后置处理器  </span>
<span style="color: #800080;">11</span>               exposedObject =<span style="color: #000000;"> initializeBean(beanName, exposedObject, mbd);  
</span><span style="color: #800080;">12</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">13</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">14</span>        <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Throwable ex) {  
</span><span style="color: #800080;">15</span>            <span style="color: #0000ff;">if</span> (ex instanceof BeanCreationException &amp;&amp;<span style="color: #000000;"> beanName.equals(((BeanCreationException) ex).getBeanName())) {  
</span><span style="color: #800080;">16</span>                <span style="color: #0000ff;">throw</span><span style="color: #000000;"> (BeanCreationException) ex;  
</span><span style="color: #800080;">17</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">18</span><span style="color: #000000;">        ……  
</span><span style="color: #800080;">19</span>        <span style="color: #008000;">//</span><span style="color: #008000;">为应用返回所需要的实例对象  </span>
<span style="color: #800080;">20</span>        <span style="color: #0000ff;">return</span><span style="color: #000000;"> exposedObject;  
    } </span></span></pre>
</div>
<p>&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">从上面的代码中我们知道，为Bean实例对象添加BeanPostProcessor后置处理器的入口的是initializeBean方法。</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">(3).initializeBean方法为容器产生的Bean实例对象添加BeanPostProcessor后置处理器：</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">同样在AbstractAutowireCapableBeanFactory类中，initializeBean方法实现为容器创建的Bean实例对象添加BeanPostProcessor后置处理器，源码如下：</span></p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #800080;">1    </span><span style="color: #008000;">//</span><span style="color: #008000;">初始容器创建的Bean实例对象，为其添加BeanPostProcessor后置处理器  </span>
2    <span style="color: #0000ff;">protected</span><span style="color: #000000;"> Object initializeBean(final String beanName, final Object bean, RootBeanDefinition mbd) {  
</span><span style="color: #800080;">3</span>        <span style="color: #008000;">//</span><span style="color: #008000;">JDK的安全机制验证权限  </span>
<span style="color: #800080;">4</span>        <span style="color: #0000ff;">if</span> (System.getSecurityManager() != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">5</span>            <span style="color: #008000;">//</span><span style="color: #008000;">实现PrivilegedAction接口的匿名内部类  </span>
<span style="color: #800080;">6</span>            AccessController.doPrivileged(<span style="color: #0000ff;">new</span> PrivilegedAction&lt;Object&gt;<span style="color: #000000;">() {  
</span><span style="color: #800080;">7</span>                <span style="color: #0000ff;">public</span><span style="color: #000000;"> Object run() {  
</span><span style="color: #800080;">8</span><span style="color: #000000;">                    invokeAwareMethods(beanName, bean);  
</span><span style="color: #800080;">9</span>                    <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">;  
</span><span style="color: #800080;">10</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">11</span><span style="color: #000000;">            }, getAccessControlContext());  
</span><span style="color: #800080;">12</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">13</span>        <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">14</span>            <span style="color: #008000;">//</span><span style="color: #008000;">为Bean实例对象包装相关属性，如名称，类加载器，所属容器等信息  </span>
<span style="color: #800080;">15</span><span style="color: #000000;">            invokeAwareMethods(beanName, bean);  
</span><span style="color: #800080;">16</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">17</span>        Object wrappedBean =<span style="color: #000000;"> bean;  
</span><span style="color: #800080;">18</span>        <span style="color: #008000;">//</span><span style="color: #008000;">对BeanPostProcessor后置处理器的postProcessBeforeInitialization  </span>
<span style="color: #800080;">19</span>        <span style="color: #008000;">//</span><span style="color: #008000;">回调方法的调用，为Bean实例初始化前做一些处理  </span>
<span style="color: #800080;">20</span>        <span style="color: #0000ff;">if</span> (mbd == <span style="color: #0000ff;">null</span> || !<span style="color: #000000;">mbd.isSynthetic()) {  
</span><span style="color: #800080;">21</span>            wrappedBean =<span style="color: #000000;"> applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);  
</span><span style="color: #800080;">22</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">23</span>        <span style="color: #008000;">//</span><span style="color: #008000;">调用Bean实例对象初始化的方法，这个初始化方法是在Spring Bean定义配置  </span>
<span style="color: #800080;">24        </span><span style="color: #008000;">//</span><span style="color: #008000;">文件中通过init-method属性指定的  </span>
<span style="color: #800080;">25</span>        <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">26</span><span style="color: #000000;">            invokeInitMethods(beanName, wrappedBean, mbd);  
</span><span style="color: #800080;">27</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">28</span>        <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Throwable ex) {  
</span><span style="color: #800080;">29</span>            <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> BeanCreationException(  
</span><span style="color: #800080;">30</span>                    (mbd != <span style="color: #0000ff;">null</span> ? mbd.getResourceDescription() : <span style="color: #0000ff;">null</span><span style="color: #000000;">),  
</span><span style="color: #800080;">31</span>                    beanName, <span style="color: #800000;">"</span><span style="color: #800000;">Invocation of init method failed</span><span style="color: #800000;">"</span><span style="color: #000000;">, ex);  
</span><span style="color: #800080;">32</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">33</span>        <span style="color: #008000;">//</span><span style="color: #008000;">对BeanPostProcessor后置处理器的postProcessAfterInitialization  </span>
<span style="color: #800080;">34</span>        <span style="color: #008000;">//</span><span style="color: #008000;">回调方法的调用，为Bean实例初始化之后做一些处理  </span>
<span style="color: #800080;">35</span>        <span style="color: #0000ff;">if</span> (mbd == <span style="color: #0000ff;">null</span> || !<span style="color: #000000;">mbd.isSynthetic()) {  
</span><span style="color: #800080;">36</span>            wrappedBean =<span style="color: #000000;"> applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);  
</span><span style="color: #800080;">37</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">38</span>        <span style="color: #0000ff;">return</span><span style="color: #000000;"> wrappedBean;  
</span><span style="color: #800080;">39</span><span style="color: #000000;">    }  
</span><span style="color: #800080;">40    </span><span style="color: #008000;">//</span><span style="color: #008000;">调用BeanPostProcessor后置处理器实例对象初始化之前的处理方法  </span>
41    <span style="color: #0000ff;">public</span><span style="color: #000000;"> Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName)  
</span><span style="color: #800080;">42</span><span style="color: #000000;">            throws BeansException {  
</span><span style="color: #800080;">43</span>        Object result =<span style="color: #000000;"> existingBean;  
</span><span style="color: #800080;">44        </span><span style="color: #008000;">//</span><span style="color: #008000;">遍历容器为所创建的Bean添加的所有BeanPostProcessor后置处理器  </span>
<span style="color: #800080;">45</span>        <span style="color: #0000ff;">for</span><span style="color: #000000;"> (BeanPostProcessor beanProcessor : getBeanPostProcessors()) {  
</span><span style="color: #800080;">46</span>            <span style="color: #008000;">//</span><span style="color: #008000;">调用Bean实例所有的后置处理中的初始化前处理方法，为Bean实例对象在  </span>
<span style="color: #800080;">47            </span><span style="color: #008000;">//</span><span style="color: #008000;">初始化之前做一些自定义的处理操作  </span>
<span style="color: #800080;">48</span>            result =<span style="color: #000000;"> beanProcessor.postProcessBeforeInitialization(result, beanName);  
</span><span style="color: #800080;">49</span>            <span style="color: #0000ff;">if</span> (result == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">50</span>                <span style="color: #0000ff;">return</span><span style="color: #000000;"> result;  
</span><span style="color: #800080;">51</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">52</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">53</span>        <span style="color: #0000ff;">return</span><span style="color: #000000;"> result;  
</span><span style="color: #800080;">54</span><span style="color: #000000;">    }  
</span><span style="color: #800080;">55</span>    <span style="color: #008000;">//</span><span style="color: #008000;">调用BeanPostProcessor后置处理器实例对象初始化之后的处理方法  </span>
<span style="color: #800080;">56</span>    <span style="color: #0000ff;">public</span><span style="color: #000000;"> Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName)  
</span><span style="color: #800080;">57</span><span style="color: #000000;">            throws BeansException {  
</span><span style="color: #800080;">58</span>        Object result =<span style="color: #000000;"> existingBean;  
</span><span style="color: #800080;">59        </span><span style="color: #008000;">//</span><span style="color: #008000;">遍历容器为所创建的Bean添加的所有BeanPostProcessor后置处理器  </span>
<span style="color: #800080;">60</span>        <span style="color: #0000ff;">for</span><span style="color: #000000;"> (BeanPostProcessor beanProcessor : getBeanPostProcessors()) {  
</span><span style="color: #800080;">61</span>            <span style="color: #008000;">//</span><span style="color: #008000;">调用Bean实例所有的后置处理中的初始化后处理方法，为Bean实例对象在  </span>
<span style="color: #800080;">62            </span><span style="color: #008000;">//</span><span style="color: #008000;">初始化之后做一些自定义的处理操作  </span>
<span style="color: #800080;">63</span>            result =<span style="color: #000000;"> beanProcessor.postProcessAfterInitialization(result, beanName);  
</span><span style="color: #800080;">64</span>            <span style="color: #0000ff;">if</span> (result == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">65</span>                <span style="color: #0000ff;">return</span><span style="color: #000000;"> result;  
</span><span style="color: #800080;">66</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">67</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">68</span>        <span style="color: #0000ff;">return</span><span style="color: #000000;"> result;  
    } </span></span></pre>
</div>
<p>&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">BeanPostProcessor
是一个接口，其初始化前的操作方法和初始化后的操作方法均委托其实现子类来实现，在Spring中，BeanPostProcessor的实现子类非常的
多，分别完成不同的操作，如：AOP面向切面编程的注册通知适配器、Bean对象的数据校验、Bean继承属性/方法的合并等等，我们以最简单的AOP切
面织入来简单了解其主要的功能。</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">(4).AdvisorAdapterRegistrationManager在Bean对象初始化后注册通知适配器：</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">AdvisorAdapterRegistrationManager
是BeanPostProcessor的一个实现类，其主要的作用为容器中管理的Bean注册一个面向切面编程的通知适配器，以便在Spring容器为所
管理的Bean进行面向切面编程时提供方便，其源码如下：</span></p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #800080;">1 </span><span style="color: #008000;">//</span><span style="color: #008000;">为容器中管理的Bean注册一个面向切面编程的通知适配器  </span>
2 <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> AdvisorAdapterRegistrationManager implements BeanPostProcessor {  
</span><span style="color: #800080;">3</span>    <span style="color: #008000;">//</span><span style="color: #008000;">容器中负责管理切面通知适配器注册的对象  </span>
<span style="color: #800080;">4</span>    <span style="color: #0000ff;">private</span> AdvisorAdapterRegistry advisorAdapterRegistry =<span style="color: #000000;"> GlobalAdvisorAdapterRegistry.getInstance();  
</span><span style="color: #800080;">5</span>    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry) {  
</span><span style="color: #800080;">6</span>        <span style="color: #0000ff;">this</span>.advisorAdapterRegistry =<span style="color: #000000;"> advisorAdapterRegistry;  
</span><span style="color: #800080;">7</span><span style="color: #000000;">    }  
</span><span style="color: #800080;">8</span>    <span style="color: #008000;">//</span><span style="color: #008000;">BeanPostProcessor在Bean对象初始化前的操作  </span>
<span style="color: #800080;">9</span>    <span style="color: #0000ff;">public</span><span style="color: #000000;"> Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {  
</span><span style="color: #800080;">10</span>        <span style="color: #008000;">//</span><span style="color: #008000;">没有做任何操作，直接返回容器创建的Bean对象  </span>
<span style="color: #800080;">11</span>        <span style="color: #0000ff;">return</span><span style="color: #000000;"> bean;  
</span><span style="color: #800080;">12</span><span style="color: #000000;">    }  
</span><span style="color: #800080;">13</span>    <span style="color: #008000;">//</span><span style="color: #008000;">BeanPostProcessor在Bean对象初始化后的操作  </span>
<span style="color: #800080;">14</span>    <span style="color: #0000ff;">public</span><span style="color: #000000;"> Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {  
</span><span style="color: #800080;">15</span>        <span style="color: #0000ff;">if</span><span style="color: #000000;"> (bean instanceof AdvisorAdapter){  
</span><span style="color: #800080;">16</span>            <span style="color: #008000;">//</span><span style="color: #008000;">如果容器创建的Bean实例对象是一个切面通知适配器，则向容器的注册<br><span style="color: #000000;">this.advisorAdapterRegistry.registerAdvisorAdapter((AdvisorAdapter) bean);  </span></span>
<span style="color: #800080;">17</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">18</span>        <span style="color: #0000ff;">return</span><span style="color: #000000;"> bean;  
</span><span style="color: #800080;">19</span><span style="color: #000000;">    }  
} </span></span></pre>
</div>
<p>&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">其他的BeanPostProcessor接口实现类的也类似，都是对Bean对象使用到的一些特性进行处理，或者向IoC容器中注册，为创建的Bean实例对象做一些自定义的功能增加，这些操作是容器初始化Bean时自动触发的，不需要认为的干预。</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">5.Spring&nbsp;IoC容器autowiring实现原理：</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">Spring&nbsp;IoC容器提供了两种管理Bean依赖关系的方式：</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">a.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;显式管理：通过BeanDefinition的属性值和构造方法实现Bean依赖关系管理。</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">b．&nbsp;autowiring：Spring&nbsp;IoC
容器的依赖自动装配功能，不需要对Bean属性的依赖关系做显式的声明，只需要在配置好autowiring属性，IoC容器会自动使用反射查找属性的类
型和名称，然后基于属性的类型或者名称来自动匹配容器中管理的Bean，从而自动地完成依赖注入。</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">通
过对autowiring自动装配特性的理解，我们知道容器对Bean的自动装配发生在容器对Bean依赖注入的过程中。在前面对
Spring&nbsp;IoC容器的依赖注入过程源码分析中，我们已经知道了容器对Bean实例对象的属性注入的处理发生在
AbstractAutoWireCapableBeanFactory类中的populateBean方法中，我们通过程序流程分析
autowiring的实现原理：</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">(1).&nbsp;AbstractAutoWireCapableBeanFactory对Bean实例进行属性依赖注入：</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">应
用第一次通过getBean方法(配置了lazy-init预实例化属性的除外)向IoC容器索取Bean时，容器创建Bean实例对象，并且对Bean
实例对象进行属性依赖注入，AbstractAutoWireCapableBeanFactory的populateBean方法就是实现Bean属性
依赖注入的功能，其主要源码如下：</span></p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;">1    <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> populateBean(String beanName, AbstractBeanDefinition mbd, BeanWrapper bw) {  
</span><span style="color: #800080;">2</span>        <span style="color: #008000;">//</span><span style="color: #008000;">获取Bean定义的属性值，并对属性值进行处理  </span>
<span style="color: #800080;">3</span>        PropertyValues pvs =<span style="color: #000000;"> mbd.getPropertyValues();  
</span><span style="color: #800080;">4</span><span style="color: #000000;">        ……  
</span><span style="color: #800080;">5</span>        <span style="color: #008000;">//</span><span style="color: #008000;">对依赖注入处理，首先处理autowiring自动装配的依赖注入  </span>
<span style="color: #800080;">6</span>        <span style="color: #0000ff;">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME ||  
<span style="color: #800080;">7</span>                mbd.getResolvedAutowireMode() ==<span style="color: #000000;"> RootBeanDefinition.AUTOWIRE_BY_TYPE) {  
</span><span style="color: #800080;">8</span>            MutablePropertyValues newPvs = <span style="color: #0000ff;">new</span><span style="color: #000000;"> MutablePropertyValues(pvs);  
</span><span style="color: #800080;">9</span>            <span style="color: #008000;">//</span><span style="color: #008000;">根据Bean名称进行autowiring自动装配处理  </span>
<span style="color: #800080;">10</span>            <span style="color: #0000ff;">if</span> (mbd.getResolvedAutowireMode() ==<span style="color: #000000;"> RootBeanDefinition.AUTOWIRE_BY_NAME) {  
</span><span style="color: #800080;">11</span><span style="color: #000000;">                autowireByName(beanName, mbd, bw, newPvs);  
</span><span style="color: #800080;">12</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">13</span>            <span style="color: #008000;">//</span><span style="color: #008000;">根据Bean类型进行autowiring自动装配处理  </span>
<span style="color: #800080;">14</span>            <span style="color: #0000ff;">if</span> (mbd.getResolvedAutowireMode() ==<span style="color: #000000;"> RootBeanDefinition.AUTOWIRE_BY_TYPE) {  
</span><span style="color: #800080;">15</span><span style="color: #000000;">                autowireByType(beanName, mbd, bw, newPvs);  
</span><span style="color: #800080;">16</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">17</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">18        </span><span style="color: #008000;">//</span><span style="color: #008000;">对非autowiring的属性进行依赖注入处理  </span>
<span style="color: #800080;">19         </span><span style="color: #000000;">……  
    } </span></span></pre>
</div>
<p>&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">(2).Spring&nbsp;IoC容器根据Bean名称或者类型进行autowiring自动依赖注入：</span></p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #800080;">1    </span><span style="color: #008000;">//</span><span style="color: #008000;">根据名称对属性进行自动依赖注入  </span>
2    <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> autowireByName(  
</span><span style="color: #800080;">3</span><span style="color: #000000;">            String beanName, AbstractBeanDefinition mbd, BeanWrapper bw, MutablePropertyValues pvs) {  
</span><span style="color: #800080;">4         </span><span style="color: #008000;">//</span><span style="color: #008000;">对Bean对象中非简单属性(不是简单继承的对象，如8中原始类型，字符串，URL等</span><span style="color: #008000;">//</span><span style="color: #008000;">都是简单属性)进行处理  </span>
<span style="color: #800080;">5</span>        String[] propertyNames =<span style="color: #000000;"> unsatisfiedNonSimpleProperties(mbd, bw);  
</span><span style="color: #800080;">6</span>        <span style="color: #0000ff;">for</span><span style="color: #000000;"> (String propertyName : propertyNames) {  
</span><span style="color: #800080;">7</span>            <span style="color: #008000;">//</span><span style="color: #008000;">如果Spring IoC容器中包含指定名称的Bean  </span>
<span style="color: #800080;">8</span>            <span style="color: #0000ff;">if</span><span style="color: #000000;"> (containsBean(propertyName)) {  
</span><span style="color: #800080;">9                 </span><span style="color: #008000;">//</span><span style="color: #008000;">调用getBean方法向IoC容器索取指定名称的Bean实例，迭代触发属性的</span><span style="color: #008000;">//</span><span style="color: #008000;">初始化和依赖注入  </span>
<span style="color: #800080;">10</span>                Object bean =<span style="color: #000000;"> getBean(propertyName);  
</span><span style="color: #800080;">11</span>                <span style="color: #008000;">//</span><span style="color: #008000;">为指定名称的属性赋予属性值  </span>
<span style="color: #800080;">12</span><span style="color: #000000;">                pvs.add(propertyName, bean);  
</span><span style="color: #800080;">13</span>                <span style="color: #008000;">//</span><span style="color: #008000;">指定名称属性注册依赖Bean名称，进行属性依赖注入  </span>
<span style="color: #800080;">14</span><span style="color: #000000;">                registerDependentBean(propertyName, beanName);  
</span><span style="color: #800080;">15</span>                <span style="color: #0000ff;">if</span><span style="color: #000000;"> (logger.isDebugEnabled()) {  
</span><span style="color: #800080;">16</span>                    logger.debug(<span style="color: #800000;">"</span><span style="color: #800000;">Added autowiring by name from bean name '</span><span style="color: #800000;">"</span> + beanName +  
<span style="color: #800080;">17</span>                            <span style="color: #800000;">"</span><span style="color: #800000;">' via property '</span><span style="color: #800000;">"</span> + propertyName + <span style="color: #800000;">"</span><span style="color: #800000;">' to bean named '</span><span style="color: #800000;">"</span> + propertyName + <span style="color: #800000;">"</span><span style="color: #800000;">'</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">18</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">19</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">20</span>            <span style="color: #0000ff;">else</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">21</span>                <span style="color: #0000ff;">if</span><span style="color: #000000;"> (logger.isTraceEnabled()) {  
</span><span style="color: #800080;">22</span>                    logger.trace(<span style="color: #800000;">"</span><span style="color: #800000;">Not autowiring property '</span><span style="color: #800000;">"</span> + propertyName + <span style="color: #800000;">"</span><span style="color: #800000;">' of bean '</span><span style="color: #800000;">"</span> + beanName +  
<span style="color: #800080;">23</span>                            <span style="color: #800000;">"</span><span style="color: #800000;">' by name: no matching bean found</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">24</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">25</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">26</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">27</span><span style="color: #000000;">    }  
</span><span style="color: #800080;">28    </span><span style="color: #008000;">//</span><span style="color: #008000;">根据类型对属性进行自动依赖注入  </span>
29    <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> autowireByType(  
</span><span style="color: #800080;">30</span><span style="color: #000000;">            String beanName, AbstractBeanDefinition mbd, BeanWrapper bw, MutablePropertyValues pvs) {  
</span><span style="color: #800080;">31</span>        <span style="color: #008000;">//</span><span style="color: #008000;">获取用户定义的类型转换器  </span>
<span style="color: #800080;">32</span>        TypeConverter converter =<span style="color: #000000;"> getCustomTypeConverter();  
</span><span style="color: #800080;">33</span>        <span style="color: #0000ff;">if</span> (converter == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">34</span>            converter =<span style="color: #000000;"> bw;  
</span><span style="color: #800080;">35</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">36</span>        <span style="color: #008000;">//</span><span style="color: #008000;">存放解析的要注入的属性  </span>
<span style="color: #800080;">37</span>        Set&lt;String&gt; autowiredBeanNames = <span style="color: #0000ff;">new</span> LinkedHashSet&lt;String&gt;(<span style="color: #800080;">4</span><span style="color: #000000;">);  
</span><span style="color: #800080;">38          </span><span style="color: #008000;">//</span><span style="color: #008000;">对Bean对象中非简单属性(不是简单继承的对象，如8中原始类型，字符  </span>
<span style="color: #800080;">39         </span><span style="color: #008000;">//</span><span style="color: #008000;">URL等都是简单属性)进行处理  </span>
<span style="color: #800080;">40</span>        String[] propertyNames =<span style="color: #000000;"> unsatisfiedNonSimpleProperties(mbd, bw);  
</span><span style="color: #800080;">41</span>        <span style="color: #0000ff;">for</span><span style="color: #000000;"> (String propertyName : propertyNames) {  
</span><span style="color: #800080;">42</span>            <span style="color: #0000ff;">try</span><span style="color: #000000;"> {  
</span><span style="color: #800080;">43</span>                <span style="color: #008000;">//</span><span style="color: #008000;">获取指定属性名称的属性描述器  </span>
<span style="color: #800080;">44</span>                PropertyDescriptor pd =<span style="color: #000000;"> bw.getPropertyDescriptor(propertyName);  
</span><span style="color: #800080;">45</span>                <span style="color: #008000;">//</span><span style="color: #008000;">不对Object类型的属性进行autowiring自动依赖注入  </span>
<span style="color: #800080;">46</span>                <span style="color: #0000ff;">if</span> (!Object.<span style="color: #0000ff;">class</span><span style="color: #000000;">.equals(pd.getPropertyType())) {  
</span><span style="color: #800080;">47</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">获取属性的setter方法  </span>
<span style="color: #800080;">48</span>                    MethodParameter methodParam =<span style="color: #000000;"> BeanUtils.getWriteMethodParameter(pd);  
</span><span style="color: #800080;">49</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">检查指定类型是否可以被转换为目标对象的类型  </span>
<span style="color: #800080;">50</span>                    boolean eager = !PriorityOrdered.<span style="color: #0000ff;">class</span><span style="color: #000000;">.isAssignableFrom(bw.getWrappedClass());  
</span><span style="color: #800080;">51</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">创建一个要被注入的依赖描述  </span>
<span style="color: #800080;">52</span>                    DependencyDescriptor desc = <span style="color: #0000ff;">new</span><span style="color: #000000;"> AutowireByTypeDependencyDescriptor(methodParam, eager);  
</span><span style="color: #800080;">53</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">根据容器的Bean定义解析依赖关系，返回所有要被注入的Bean对象  </span>
<span style="color: #800080;">54</span>                    Object autowiredArgument =<span style="color: #000000;"> resolveDependency(desc, beanName, autowiredBeanNames, converter);  
</span><span style="color: #800080;">55</span>                    <span style="color: #0000ff;">if</span> (autowiredArgument != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">56</span>                        <span style="color: #008000;">//</span><span style="color: #008000;">为属性赋值所引用的对象  </span>
<span style="color: #800080;">57</span><span style="color: #000000;">                        pvs.add(propertyName, autowiredArgument);  
</span><span style="color: #800080;">58</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">59</span>                    <span style="color: #0000ff;">for</span><span style="color: #000000;"> (String autowiredBeanName : autowiredBeanNames) {  
</span><span style="color: #800080;">60                        </span><span style="color: #008000;">//</span><span style="color: #008000;">指定名称属性注册依赖Bean名称，进行属性依赖注入  </span>
<span style="color: #800080;">61</span><span style="color: #000000;">                        registerDependentBean(autowiredBeanName, beanName);  
</span><span style="color: #800080;">62</span>                        <span style="color: #0000ff;">if</span><span style="color: #000000;"> (logger.isDebugEnabled()) {  
</span><span style="color: #800080;">63</span>                            logger.debug(<span style="color: #800000;">"</span><span style="color: #800000;">Autowiring by type from bean name '</span><span style="color: #800000;">"</span> + beanName + <span style="color: #800000;">"</span><span style="color: #800000;">' via property '</span><span style="color: #800000;">"</span> +  
<span style="color: #800080;">64</span>                                    propertyName + <span style="color: #800000;">"</span><span style="color: #800000;">' to bean named '</span><span style="color: #800000;">"</span> + autowiredBeanName + <span style="color: #800000;">"</span><span style="color: #800000;">'</span><span style="color: #800000;">"</span><span style="color: #000000;">);  
</span><span style="color: #800080;">65</span><span style="color: #000000;">                        }  
</span><span style="color: #800080;">66</span><span style="color: #000000;">                    }  
</span><span style="color: #800080;">67</span>                    <span style="color: #008000;">//</span><span style="color: #008000;">释放已自动注入的属性  </span>
<span style="color: #800080;">68</span><span style="color: #000000;">                    autowiredBeanNames.clear();  
</span><span style="color: #800080;">69</span><span style="color: #000000;">                }  
</span><span style="color: #800080;">70</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">71</span>            <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (BeansException ex) {  
</span><span style="color: #800080;">72</span>                <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> UnsatisfiedDependencyException(mbd.getResourceDescription(), beanName, propertyName, ex);  
</span><span style="color: #800080;">73</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">74</span><span style="color: #000000;">        }  
    } </span></span></pre>
</div>
<p>&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">通过上面的源码分析，我们可以看出来通过属性名进行自动依赖注入的相对比通过属性类型进行自动依赖注入要稍微简单一些，但是真正实现属性注入的是DefaultSingletonBeanRegistry类的registerDependentBean方法。</span></p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">(3).DefaultSingletonBeanRegistry的registerDependentBean方法对属性注入：</span></p>
<div class="cnblogs_code">
<pre><span style="font-family: courier new, courier; font-size: 16px;"><span style="color: #800080;">1    </span><span style="color: #008000;">//</span><span style="color: #008000;">为指定的Bean注入依赖的Bean  </span>
2    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> registerDependentBean(String beanName, String dependentBeanName) {  
</span><span style="color: #800080;">3</span>        <span style="color: #008000;">//</span><span style="color: #008000;">处理Bean名称，将别名转换为规范的Bean名称  </span>
<span style="color: #800080;">4</span>        String canonicalName =<span style="color: #000000;"> canonicalName(beanName);  
</span><span style="color: #800080;">5</span>        <span style="color: #008000;">//</span><span style="color: #008000;">多线程同步，保证容器内数据的一致性  </span>
<span style="color: #800080;">6        </span><span style="color: #008000;">//</span><span style="color: #008000;">先从容器中：bean名称--&gt;全部依赖Bean名称集合找查找给定名称Bean的依赖Bean  </span>
<span style="color: #800080;">7</span>        synchronized (<span style="color: #0000ff;">this</span><span style="color: #000000;">.dependentBeanMap) {  
</span><span style="color: #800080;">8</span>            <span style="color: #008000;">//</span><span style="color: #008000;">获取给定名称Bean的所有依赖Bean名称  </span>
<span style="color: #800080;">9</span>            Set&lt;String&gt; dependentBeans = <span style="color: #0000ff;">this</span>.dependentBeanMap.<span style="color: #0000ff;">get</span><span style="color: #000000;">(canonicalName);  
</span><span style="color: #800080;">10</span>            <span style="color: #0000ff;">if</span> (dependentBeans == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">11</span>                <span style="color: #008000;">//</span><span style="color: #008000;">为Bean设置依赖Bean信息  </span>
<span style="color: #800080;">12</span>                dependentBeans = <span style="color: #0000ff;">new</span> LinkedHashSet&lt;String&gt;(<span style="color: #800080;">8</span><span style="color: #000000;">);  
</span><span style="color: #800080;">13</span>                <span style="color: #0000ff;">this</span><span style="color: #000000;">.dependentBeanMap.put(canonicalName, dependentBeans);  
</span><span style="color: #800080;">14</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">15</span>            <span style="color: #008000;">//</span><span style="color: #008000;">向容器中：bean名称--&gt;全部依赖Bean名称集合添加Bean的依赖信息  </span>
<span style="color: #800080;">16</span>            <span style="color: #008000;">//</span><span style="color: #008000;">即，将Bean所依赖的Bean添加到容器的集合中  </span>
<span style="color: #800080;">17</span><span style="color: #000000;">            dependentBeans.add(dependentBeanName);  
</span><span style="color: #800080;">18</span><span style="color: #000000;">        }  
</span><span style="color: #800080;">19          </span><span style="color: #008000;">//</span><span style="color: #008000;">从容器中：bean名称--&gt;指定名称Bean的依赖Bean集合找查找给定名称  </span>
<span style="color: #800080;">20         </span><span style="color: #008000;">//</span><span style="color: #008000;">Bean的依赖Bean  </span>
<span style="color: #800080;">21</span>        synchronized (<span style="color: #0000ff;">this</span><span style="color: #000000;">.dependenciesForBeanMap) {  
</span><span style="color: #800080;">22</span>            Set&lt;String&gt; dependenciesForBean = <span style="color: #0000ff;">this</span>.dependenciesForBeanMap.<span style="color: #0000ff;">get</span><span style="color: #000000;">(dependentBeanName);  
</span><span style="color: #800080;">23</span>            <span style="color: #0000ff;">if</span> (dependenciesForBean == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {  
</span><span style="color: #800080;">24</span>                dependenciesForBean = <span style="color: #0000ff;">new</span> LinkedHashSet&lt;String&gt;(<span style="color: #800080;">8</span><span style="color: #000000;">);  
</span><span style="color: #800080;">25</span>                <span style="color: #0000ff;">this</span><span style="color: #000000;">.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean);  
</span><span style="color: #800080;">26</span><span style="color: #000000;">            }  
</span><span style="color: #800080;">27</span>            <span style="color: #008000;">//</span><span style="color: #008000;">向容器中：bean名称--&gt;指定Bean的依赖Bean名称集合添加Bean的依赖信息  </span>
<span style="color: #800080;">28            </span><span style="color: #008000;">//</span><span style="color: #008000;">即，将Bean所依赖的Bean添加到容器的集合中  </span>
<span style="color: #800080;">29</span><span style="color: #000000;">            dependenciesForBean.add(canonicalName);  
</span><span style="color: #800080;">30</span><span style="color: #000000;">        }  
    }</span></span></pre>
</div>
<p>&nbsp;</p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">通过对autowiring的源码分析，我们可以看出，autowiring的实现过程：</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">a.&nbsp;&nbsp;&nbsp;&nbsp;对Bean的属性迭代调用getBean方法，完成依赖Bean的初始化和依赖注入。</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">b.&nbsp;&nbsp;&nbsp;&nbsp;将依赖Bean的属性引用设置到被依赖的Bean属性上。</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">c.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将依赖Bean的名称和被依赖Bean的名称存储在IoC容器的集合中。</span></p>
<p class="p0">&nbsp;</p>
<p class="p0"><span style="font-family: courier new, courier; font-size: 16px;">Spring&nbsp;IoC
容器的autowiring属性自动依赖注入是一个很方便的特性，可以简化开发时的配置，但是凡是都有两面性，自动属性依赖注入也有不足，首先，Bean
的依赖关系在配置文件中无法很清楚地看出来，对于维护造成一定困难。其次，由于自动依赖注入是Spring容器自动执行的，容器是不会智能判断的，如果配
置不当，将会带来无法预料的后果，所以自动依赖注入特性在使用时还是综合考虑。</span></p>
<p class="p0">&nbsp;</p>
<br><br><a href="http://www.cnblogs.com/ITtangtang/p/3978349.html" target="_blank" rel="nofollow">原文链接</a><br><br><h2>更多文章</h2><ul><li><a href="http://www.csdn123.com/html/topnews201408/83/2683.htm" target="_blank">Median of Two Sorted Arrays(Java)</a></li><li><a href="http://www.csdn123.com/html/topnews201408/82/2682.htm" target="_blank">OpenXml入门</a></li><li><a href="http://www.csdn123.com/html/topnews201408/81/2681.htm" target="_blank">PromiseKit 解析 (二) 递归  IOS</a></li><li><a href="http://www.csdn123.com/html/topnews201408/80/2680.htm" target="_blank">大数据让生活更加糟糕</a></li><li><a href="http://www.csdn123.com/html/topnews201408/79/2679.htm" target="_blank">这是一个傻逼横行的年代，较真你就输了</a></li><li><a href="http://www.csdn123.com/html/topnews201408/78/2678.htm" target="_blank">javascript搜索框点击文字消失</a></li><li><a href="http://www.csdn123.com/html/topnews201408/77/2677.htm" target="_blank">数据库：DB2 v10.5安装指南</a></li><li><a href="http://www.csdn123.com/html/topnews201408/76/2676.htm" target="_blank">【面试虐菜】—— Jboss调优</a></li><li><a href="http://www.csdn123.com/html/topnews201408/75/2675.htm" target="_blank">I/O复用-epoll模型</a></li><li><a href="http://www.csdn123.com/html/topnews201408/74/2674.htm" target="_blank">php 实现hash表</a></li></ul>
            
        <p style="color:#F00;font-weight:bold">
        如果您想提高自己的技术水平，认识同行朋友、开拓技术视野，请加入QQ群：116537189
        </p>
            
        <p>
		<script type="text/javascript">
		document.write(unescape('%3Cdiv id="bdcs"%3E%3C/div%3E%3Cscript charset="utf-8" src="http://rp.baidu.com/rp3w/3w.js?sid=12588339900577537215') + '&t=' + (Math.ceil(new Date()/3600000)) + unescape('"%3E%3C/script%3E'));
		</script></p><div id="bdcs"><div class="bdcs-container"><meta http-equiv="x-ua-compatible" content="IE=9"> <div class="bdcs-main bdcs-clearfix" id="default-searchbox">      <div class="bdcs-search bdcs-clearfix" id="bdcs-search-inline">         <form action="http://s.csdn123.com/cse/search" method="get" target="_blank" class="bdcs-search-form" id="bdcs-search-form">             <input name="s" value="12588339900577537215" type="hidden">             <input name="entry" value="1" type="hidden">                                                    <input autocomplete="off" name="q" class="bdcs-search-form-input" id="bdcs-search-form-input" placeholder="请输入IT技术关键词" type="text">             <input class="bdcs-search-form-submit " id="bdcs-search-form-submit" value="搜一下" type="submit">                      </form>           </div>              <div style="top: 94046px; width: 409px;" class="bdcs-search-sug" id="bdcs-search-sug">             <ul class="bdcs-search-sug-list" id="bdcs-search-sug-list"></ul>         </div>                      <div class="bdcs-hot" id="bdcs-hot">                           <a href="http://s.csdn123.com/cse/search?s=12588339900577537215&amp;entry=1&amp;q=int%E8%BD%ACstring" title="int转string" class="bdcs-hot-item" target="_blank">int转string</a>                              <a href="http://s.csdn123.com/cse/search?s=12588339900577537215&amp;entry=1&amp;q=%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84" title="指针数组" class="bdcs-hot-item" target="_blank">指针数组</a>                              <a href="http://s.csdn123.com/cse/search?s=12588339900577537215&amp;entry=1&amp;q=%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84" title="字符串数组" class="bdcs-hot-item" target="_blank">字符串数组</a>                              <a href="http://s.csdn123.com/cse/search?s=12588339900577537215&amp;entry=1&amp;q=%E6%B1%95%E5%A4%A7%E7%99%BE%E4%BA%8B%E9%80%9A" title="汕大百事通" class="bdcs-hot-item" target="_blank">汕大百事通</a>                              <a href="http://s.csdn123.com/cse/search?s=12588339900577537215&amp;entry=1&amp;q=%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B" title="数据类型" class="bdcs-hot-item" target="_blank">数据类型</a>                              <a href="http://s.csdn123.com/cse/search?s=12588339900577537215&amp;entry=1&amp;q=mysql%E5%AF%BC%E5%85%A5sql%E6%96%87%E4%BB%B6" title="mysql导入sql文件" class="bdcs-hot-item" target="_blank">mysql导入sql文件</a>                              <a href="http://s.csdn123.com/cse/search?s=12588339900577537215&amp;entry=1&amp;q=const" title="const" class="bdcs-hot-item" target="_blank">const</a>                              <a href="http://s.csdn123.com/cse/search?s=12588339900577537215&amp;entry=1&amp;q=sql%E6%95%99%E7%A8%8B" title="sql教程" class="bdcs-hot-item" target="_blank">sql教程</a>                              <a href="http://s.csdn123.com/cse/search?s=12588339900577537215&amp;entry=1&amp;q=memset%E5%87%BD%E6%95%B0" title="memset函数" class="bdcs-hot-item" target="_blank">memset函数</a>                              <a href="http://s.csdn123.com/cse/search?s=12588339900577537215&amp;entry=1&amp;q=shell%E8%84%9A%E6%9C%AC" title="shell脚本" class="bdcs-hot-item" target="_blank">shell脚本</a>                </div>                                          </div> </div></div><script charset="utf-8" src="Spring%EF%BC%9A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BBSpring%20IOC%E5%8E%9F%E7%90%86_files/3w.js"></script>
		<p></p>
        
        <p class="mydiv">
        Powered by <strong><a href="http://www.csdn123.com/" target="_blank">脚本百事通</a></strong> © 2014 <img src="Spring%EF%BC%9A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BBSpring%20IOC%E5%8E%9F%E7%90%86_files/copyright.gif">&nbsp;<a href="http://www.miitbeian.gov.cn/" target="_blank">粤ICP备13007878号-1</a>&nbsp;&nbsp;联系本站：155120699@qq.com
        </p>
        </div>

    </div>
	<div id="txtright">

        
    	<div class="divbaidu">
			<script type="text/javascript">
                /*300*250 创建于 2014-08-17*/
                var cpro_id = "u1664753";
            </script>
            <script src="Spring%EF%BC%9A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BBSpring%20IOC%E5%8E%9F%E7%90%86_files/c.js" type="text/javascript"></script><div id="BAIDU_DUP_wrapper_u1664753_0"><iframe id="cproIframe_u1664753_1" src="Spring%EF%BC%9A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BBSpring%20IOC%E5%8E%9F%E7%90%86_files/acom.html" marginwidth="0" marginheight="0" scrolling="no" allowtransparency="true" align="center,center" frameborder="0" height="250" width="300"></iframe></div><script charset="utf-8" src="Spring%EF%BC%9A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BBSpring%20IOC%E5%8E%9F%E7%90%86_files/acom_003"></script>
        </div>
        
    	<div class="divbaidu">
			<script type="text/javascript">
                /*300*600 创建于 2014-08-17*/
                var cpro_id = "u1664744";
            </script>
            <script src="Spring%EF%BC%9A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BBSpring%20IOC%E5%8E%9F%E7%90%86_files/c.js" type="text/javascript"></script><div id="BAIDU_DUP_wrapper_u1664744_0"><iframe id="cproIframe_u1664744_2" src="Spring%EF%BC%9A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BBSpring%20IOC%E5%8E%9F%E7%90%86_files/acom_002.html" marginwidth="0" marginheight="0" scrolling="no" allowtransparency="true" align="center,center" frameborder="0" height="600" width="300"></iframe></div><script charset="utf-8" src="Spring%EF%BC%9A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BBSpring%20IOC%E5%8E%9F%E7%90%86_files/acom_002"></script>        
        </div>    

    	<div class="divbaidu">
			<script type="text/javascript">
            /*300*250 创建于 2014-08-17*/
            var cpro_id = "u1664737";
            </script>
            <script src="Spring%EF%BC%9A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BBSpring%20IOC%E5%8E%9F%E7%90%86_files/c.js" type="text/javascript"></script><div style="z-index: 2147483646;" height="250px" width="300px" id="BAIDU_DUP_wrapper_u1664737_0"><iframe id="cproIframe_u1664737" src="Spring%EF%BC%9A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BBSpring%20IOC%E5%8E%9F%E7%90%86_files/acom_003.html" marginwidth="0" marginheight="0" scrolling="no" allowtransparency="true" align="center,center" frameborder="0" height="250" width="300"></iframe></div><script charset="utf-8" src="Spring%EF%BC%9A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BBSpring%20IOC%E5%8E%9F%E7%90%86_files/acom"></script>
        </div>

    </div>

</div>

<div style="display:none">
<script type="text/javascript">
var _bdhmProtocol = (("https:" == document.location.protocol) ? " https://" : " http://");
document.write(unescape("%3Cscript src='" + _bdhmProtocol + "hm.baidu.com/h.js%3F7fb5d140150f34cd0f7aa97a58e23238' type='text/javascript'%3E%3C/script%3E"));
</script><script src="Spring%EF%BC%9A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BBSpring%20IOC%E5%8E%9F%E7%90%86_files/h.txt" type="text/javascript"></script><a href="http://tongji.baidu.com/hm-web/welcome/ico?s=7fb5d140150f34cd0f7aa97a58e23238" target="_blank">百度统计</a> 
</div>


</body></html>