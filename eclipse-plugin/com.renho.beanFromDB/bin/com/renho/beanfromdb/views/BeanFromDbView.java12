package com.renho.beanfromdb.views;


import java.util.ArrayList;
import java.util.List;

import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.ui.ISharedImages;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.part.*;
import org.eclipse.jface.action.MenuManager;
import org.eclipse.jface.viewers.*;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.SWT;

import com.renho.beanfromdb.views.bean.DBConfig;
import com.renho.beanfromdb.views.bean.DBInstance;
import com.renho.beanfromdb.views.bean.DBViewSuperBean;


/**
 * This sample class demonstrates how to plug-in a new
 * workbench view. The view shows data obtained from the
 * model. The sample creates a dummy model on the fly,
 * but a real implementation would connect to the model
 * available either in this or another plug-in (e.g. the workspace).
 * The view is connected to the model using a content provider.
 * <p>
 * The view uses a label provider to define how model
 * objects should be presented in the view. Each
 * view can present the same model objects using
 * different labels and icons, if needed. Alternatively,
 * a single label provider can be shared between views
 * in order to ensure that objects of the same type are
 * presented in the same way everywhere.
 * <p>
 */

public class BeanFromDbView extends ViewPart {

	/**
	 * The ID of the view as specified by the extension.
	 */
	public static final String ID = "com.renho.beanfromdb.views.BeanFromDbView";

	private TableViewer viewer;
	
	class ViewContentProvider extends ArrayContentProvider implements IStructuredContentProvider{
        @Override
        public Object[] getElements(Object inputElement) {
        	DBViewSuperBean db = new DBViewSuperBean();
        	db.setTitle("245");
        	return new DBViewSuperBean[] {db};
        }
        
    }

	class ViewLabelProvider extends LabelProvider implements ITableLabelProvider {
		public String getColumnText(Object obj, int index) {
			return ((DBViewSuperBean)obj).getTitle();
		}
		public Image getColumnImage(Object obj, int index) {
			return getImage(obj);
		}
		public Image getImage(Object obj) {
			return PlatformUI.getWorkbench().
					getSharedImages().getImage(ISharedImages.IMG_OBJ_ELEMENT);
		}
	}
	
	/**
	 * The constructor.
	 */
	public BeanFromDbView() {
	}

	/**
	 * This is a callback that will allow us
	 * to create the viewer and initialize it.
	 */
	public void createPartControl(Composite parent) {
		viewer = new TableViewer(parent, SWT.SINGLE);
		viewer.setContentProvider(new ViewContentProvider());
		
		ViewLabelProvider vlp = new ViewLabelProvider();
		viewer.setLabelProvider(vlp);
		viewer.setInput(getViewSite());
		
		//初始化弹出菜单  
        MenuManager popupMenuManager = new MenuManager("#PopupMenu");  
        popupMenuManager.setRemoveAllWhenShown(true);  
        Menu popupMenu = popupMenuManager.createContextMenu(viewer.getTable());  
        viewer.getTable().setMenu(popupMenu);  
        //设置选择提供者和弹出菜单  
        getSite().setSelectionProvider(viewer);  
        getSite().registerContextMenu(popupMenuManager, viewer);  
	}
	
	public void setFocus() {
		viewer.getControl().setFocus();
	}
}